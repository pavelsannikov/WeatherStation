
weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006edc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  08006ff0  08006ff0  00016ff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b9c  08007b9c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007b9c  08007b9c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b9c  08007b9c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e4  08007d88  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08007d88  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000adcd  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee0  00000000  00000000  0002afda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  0002d990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018577  00000000  00000000  0002e378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3ae  00000000  00000000  000468ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000866a0  00000000  00000000  00053c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da33d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d7c  00000000  00000000  000da390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fd4 	.word	0x08006fd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08006fd4 	.word	0x08006fd4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_f2iz>:
 8000ca4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ca8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cac:	d30f      	bcc.n	8000cce <__aeabi_f2iz+0x2a>
 8000cae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cb6:	d90d      	bls.n	8000cd4 <__aeabi_f2iz+0x30>
 8000cb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cc4:	fa23 f002 	lsr.w	r0, r3, r2
 8000cc8:	bf18      	it	ne
 8000cca:	4240      	negne	r0, r0
 8000ccc:	4770      	bx	lr
 8000cce:	f04f 0000 	mov.w	r0, #0
 8000cd2:	4770      	bx	lr
 8000cd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cd8:	d101      	bne.n	8000cde <__aeabi_f2iz+0x3a>
 8000cda:	0242      	lsls	r2, r0, #9
 8000cdc:	d105      	bne.n	8000cea <__aeabi_f2iz+0x46>
 8000cde:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ce2:	bf08      	it	eq
 8000ce4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	4770      	bx	lr

08000cf0 <am2320_Init>:
 */


#include "am2320.h"

Am2320_HandleTypeDef am2320_Init(I2C_HandleTypeDef* i2c_handle,uint8_t device_address) {
 8000cf0:	b490      	push	{r4, r7}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	71fb      	strb	r3, [r7, #7]
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handle = i2c_handle;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	613b      	str	r3, [r7, #16]
	AM2320_.device_address = device_address;
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	753b      	strb	r3, [r7, #20]
	return AM2320_;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	461c      	mov	r4, r3
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc90      	pop	{r4, r7}
 8000d1c:	4770      	bx	lr

08000d1e <am2320_ReadValue>:

uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af02      	add	r7, sp, #8
 8000d24:	6078      	str	r0, [r7, #4]
	uint8_t my_data[3];
	my_data[0]=3;
 8000d26:	2303      	movs	r3, #3
 8000d28:	733b      	strb	r3, [r7, #12]
	my_data[1]=0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	737b      	strb	r3, [r7, #13]
	my_data[2]=4;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0, 0,100);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	791b      	ldrb	r3, [r3, #4]
 8000d3a:	b299      	uxth	r1, r3
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	2200      	movs	r2, #0
 8000d44:	f001 fd96 	bl	8002874 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f001 f993 	bl	8002074 <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address,my_data, 3, 100) != HAL_OK) {
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	791b      	ldrb	r3, [r3, #4]
 8000d56:	b299      	uxth	r1, r3
 8000d58:	f107 020c 	add.w	r2, r7, #12
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2303      	movs	r3, #3
 8000d62:	f001 fd87 	bl	8002874 <HAL_I2C_Master_Transmit>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <am2320_ReadValue+0x52>
		return 1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e01f      	b.n	8000db0 <am2320_ReadValue+0x92>
	}
	HAL_Delay(2);
 8000d70:	2002      	movs	r0, #2
 8000d72:	f001 f97f 	bl	8002074 <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handle, am2320->device_address,am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	1d5a      	adds	r2, r3, #5
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2308      	movs	r3, #8
 8000d8c:	f001 fe70 	bl	8002a70 <HAL_I2C_Master_Receive>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <am2320_ReadValue+0x7c>
		return 2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	e00a      	b.n	8000db0 <am2320_ReadValue+0x92>
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	799b      	ldrb	r3, [r3, #6]
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	d005      	beq.n	8000dae <am2320_ReadValue+0x90>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	795b      	ldrb	r3, [r3, #5]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d001      	beq.n	8000dae <am2320_ReadValue+0x90>
		return 3;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e000      	b.n	8000db0 <am2320_ReadValue+0x92>
	}
	return 0;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <am2320_GetTemperatureAndHumidity2>:

uint8_t am2320_GetTemperatureAndHumidity2(Am2320_HandleTypeDef *am2320, float *temperature,float *humidity) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
	uint8_t read = am2320_ReadValue(am2320);
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f7ff ffaa 	bl	8000d1e <am2320_ReadValue>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	757b      	strb	r3, [r7, #21]
	uint16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	7a9b      	ldrb	r3, [r3, #10]
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	7a5b      	ldrb	r3, [r3, #9]
 8000dd8:	021b      	lsls	r3, r3, #8
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	82fb      	strh	r3, [r7, #22]
	if (temp_temperature & 0x8000) {
 8000de2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da05      	bge.n	8000df6 <am2320_GetTemperatureAndHumidity2+0x3e>
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 8000dea:	8afb      	ldrh	r3, [r7, #22]
 8000dec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	425b      	negs	r3, r3
 8000df4:	82fb      	strh	r3, [r7, #22]
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = temp_temperature;
 8000df6:	8afb      	ldrh	r3, [r7, #22]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fefb 	bl	8000bf4 <__aeabi_ui2f>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	601a      	str	r2, [r3, #0]
	*humidity = (am2320->data[3] | am2320->data[2] << 8);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	7a1b      	ldrb	r3, [r3, #8]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	79db      	ldrb	r3, [r3, #7]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	4313      	orrs	r3, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fef2 	bl	8000bfc <__aeabi_i2f>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
	return read;
 8000e1e:	7d7b      	ldrb	r3, [r7, #21]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000e30:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <BMP180_Init+0x18>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	20000200 	.word	0x20000200

08000e44 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <BMP180_SetOversampling+0x1c>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	7013      	strb	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	2000021a 	.word	0x2000021a

08000e64 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000e64:	b598      	push	{r3, r4, r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000e68:	23aa      	movs	r3, #170	; 0xaa
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f8dc 	bl	8001028 <BMP180_ReadReg>
 8000e70:	4603      	mov	r3, r0
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b21c      	sxth	r4, r3
 8000e76:	23ab      	movs	r3, #171	; 0xab
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 f8d5 	bl	8001028 <BMP180_ReadReg>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4323      	orrs	r3, r4
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	4b58      	ldr	r3, [pc, #352]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000e88:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000e8a:	23ac      	movs	r3, #172	; 0xac
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f8cb 	bl	8001028 <BMP180_ReadReg>
 8000e92:	4603      	mov	r3, r0
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21c      	sxth	r4, r3
 8000e98:	23ad      	movs	r3, #173	; 0xad
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f8c4 	bl	8001028 <BMP180_ReadReg>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4323      	orrs	r3, r4
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b4f      	ldr	r3, [pc, #316]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000eaa:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000eac:	23ae      	movs	r3, #174	; 0xae
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f8ba 	bl	8001028 <BMP180_ReadReg>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b21c      	sxth	r4, r3
 8000eba:	23af      	movs	r3, #175	; 0xaf
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f8b3 	bl	8001028 <BMP180_ReadReg>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4323      	orrs	r3, r4
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000ecc:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000ece:	23b0      	movs	r3, #176	; 0xb0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f8a9 	bl	8001028 <BMP180_ReadReg>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b21c      	sxth	r4, r3
 8000edc:	23b1      	movs	r3, #177	; 0xb1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f8a2 	bl	8001028 <BMP180_ReadReg>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	4b3e      	ldr	r3, [pc, #248]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000ef0:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8000ef2:	23b2      	movs	r3, #178	; 0xb2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f897 	bl	8001028 <BMP180_ReadReg>
 8000efa:	4603      	mov	r3, r0
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	b21c      	sxth	r4, r3
 8000f00:	23b3      	movs	r3, #179	; 0xb3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f890 	bl	8001028 <BMP180_ReadReg>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4323      	orrs	r3, r4
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000f14:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000f16:	23b4      	movs	r3, #180	; 0xb4
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f885 	bl	8001028 <BMP180_ReadReg>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	b21c      	sxth	r4, r3
 8000f24:	23b5      	movs	r3, #181	; 0xb5
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f87e 	bl	8001028 <BMP180_ReadReg>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4323      	orrs	r3, r4
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000f38:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8000f3a:	23b6      	movs	r3, #182	; 0xb6
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f873 	bl	8001028 <BMP180_ReadReg>
 8000f42:	4603      	mov	r3, r0
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	b21c      	sxth	r4, r3
 8000f48:	23b7      	movs	r3, #183	; 0xb7
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f86c 	bl	8001028 <BMP180_ReadReg>
 8000f50:	4603      	mov	r3, r0
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	4323      	orrs	r3, r4
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000f5a:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8000f5c:	23b8      	movs	r3, #184	; 0xb8
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f862 	bl	8001028 <BMP180_ReadReg>
 8000f64:	4603      	mov	r3, r0
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21c      	sxth	r4, r3
 8000f6a:	23b9      	movs	r3, #185	; 0xb9
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f85b 	bl	8001028 <BMP180_ReadReg>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	4323      	orrs	r3, r4
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000f7c:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8000f7e:	23ba      	movs	r3, #186	; 0xba
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f851 	bl	8001028 <BMP180_ReadReg>
 8000f86:	4603      	mov	r3, r0
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b21c      	sxth	r4, r3
 8000f8c:	23bb      	movs	r3, #187	; 0xbb
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f84a 	bl	8001028 <BMP180_ReadReg>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4323      	orrs	r3, r4
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000f9e:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000fa0:	23bc      	movs	r3, #188	; 0xbc
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f840 	bl	8001028 <BMP180_ReadReg>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21c      	sxth	r4, r3
 8000fae:	23bd      	movs	r3, #189	; 0xbd
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f839 	bl	8001028 <BMP180_ReadReg>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4323      	orrs	r3, r4
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000fc0:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 8000fc2:	23be      	movs	r3, #190	; 0xbe
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f82f 	bl	8001028 <BMP180_ReadReg>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21c      	sxth	r4, r3
 8000fd0:	23bf      	movs	r3, #191	; 0xbf
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f828 	bl	8001028 <BMP180_ReadReg>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4323      	orrs	r3, r4
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	4b01      	ldr	r3, [pc, #4]	; (8000fe8 <BMP180_UpdateCalibrationData+0x184>)
 8000fe2:	829a      	strh	r2, [r3, #20]
}
 8000fe4:	bf00      	nop
 8000fe6:	bd98      	pop	{r3, r4, r7, pc}
 8000fe8:	20000204 	.word	0x20000204

08000fec <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	733b      	strb	r3, [r7, #12]
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <BMP180_WriteReg+0x38>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	f107 020c 	add.w	r2, r7, #12
 800100c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2302      	movs	r3, #2
 8001014:	21ee      	movs	r1, #238	; 0xee
 8001016:	f001 fc2d 	bl	8002874 <HAL_I2C_Master_Transmit>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000200 	.word	0x20000200

08001028 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af02      	add	r7, sp, #8
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <BMP180_ReadReg+0x40>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	1dfa      	adds	r2, r7, #7
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	21ee      	movs	r1, #238	; 0xee
 8001042:	f001 fc17 	bl	8002874 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <BMP180_ReadReg+0x40>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	f107 020f 	add.w	r2, r7, #15
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2301      	movs	r3, #1
 8001056:	21ee      	movs	r1, #238	; 0xee
 8001058:	f001 fd0a 	bl	8002a70 <HAL_I2C_Master_Receive>
	return result;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000200 	.word	0x20000200

0800106c <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8001072:	232e      	movs	r3, #46	; 0x2e
 8001074:	4619      	mov	r1, r3
 8001076:	20f4      	movs	r0, #244	; 0xf4
 8001078:	f7ff ffb8 	bl	8000fec <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 800107c:	2305      	movs	r3, #5
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fff8 	bl	8002074 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8001084:	20f6      	movs	r0, #246	; 0xf6
 8001086:	f7ff ffcf 	bl	8001028 <BMP180_ReadReg>
 800108a:	4603      	mov	r3, r0
 800108c:	021c      	lsls	r4, r3, #8
 800108e:	20f7      	movs	r0, #247	; 0xf7
 8001090:	f7ff ffca 	bl	8001028 <BMP180_ReadReg>
 8001094:	4603      	mov	r3, r0
 8001096:	4323      	orrs	r3, r4
 8001098:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <BMP180_GetRawTemperature+0x84>)
 800109c:	895b      	ldrh	r3, [r3, #10]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1a9b      	subs	r3, r3, r2
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <BMP180_GetRawTemperature+0x84>)
 80010a6:	8912      	ldrh	r2, [r2, #8]
 80010a8:	fb02 f303 	mul.w	r3, r2, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	da02      	bge.n	80010b6 <BMP180_GetRawTemperature+0x4a>
 80010b0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80010b4:	337f      	adds	r3, #127	; 0x7f
 80010b6:	13db      	asrs	r3, r3, #15
 80010b8:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <BMP180_GetRawTemperature+0x84>)
 80010bc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010c0:	02da      	lsls	r2, r3, #11
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <BMP180_GetRawTemperature+0x84>)
 80010c4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80010c8:	4619      	mov	r1, r3
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	440b      	add	r3, r1
 80010ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80010d2:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	3308      	adds	r3, #8
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da00      	bge.n	80010e6 <BMP180_GetRawTemperature+0x7a>
 80010e4:	330f      	adds	r3, #15
 80010e6:	111b      	asrs	r3, r3, #4
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	20000204 	.word	0x20000204

080010f4 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80010fa:	232e      	movs	r3, #46	; 0x2e
 80010fc:	4619      	mov	r1, r3
 80010fe:	20f4      	movs	r0, #244	; 0xf4
 8001100:	f7ff ff74 	bl	8000fec <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001104:	2305      	movs	r3, #5
 8001106:	4618      	mov	r0, r3
 8001108:	f000 ffb4 	bl	8002074 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 800110c:	f000 f902 	bl	8001314 <BMP180_GetUT>
 8001110:	62b8      	str	r0, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8001112:	4b7b      	ldr	r3, [pc, #492]	; (8001300 <BMP180_GetPressure+0x20c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	4b7a      	ldr	r3, [pc, #488]	; (8001304 <BMP180_GetPressure+0x210>)
 800111a:	5c9b      	ldrb	r3, [r3, r2]
 800111c:	4619      	mov	r1, r3
 800111e:	20f4      	movs	r0, #244	; 0xf4
 8001120:	f7ff ff64 	bl	8000fec <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8001124:	4b76      	ldr	r3, [pc, #472]	; (8001300 <BMP180_GetPressure+0x20c>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b77      	ldr	r3, [pc, #476]	; (8001308 <BMP180_GetPressure+0x214>)
 800112c:	5c9b      	ldrb	r3, [r3, r2]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 ffa0 	bl	8002074 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8001134:	f000 f8fc 	bl	8001330 <BMP180_GetUP>
 8001138:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800113a:	4b74      	ldr	r3, [pc, #464]	; (800130c <BMP180_GetPressure+0x218>)
 800113c:	895b      	ldrh	r3, [r3, #10]
 800113e:	461a      	mov	r2, r3
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	4a71      	ldr	r2, [pc, #452]	; (800130c <BMP180_GetPressure+0x218>)
 8001146:	8912      	ldrh	r2, [r2, #8]
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	da02      	bge.n	8001156 <BMP180_GetPressure+0x62>
 8001150:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001154:	337f      	adds	r3, #127	; 0x7f
 8001156:	13db      	asrs	r3, r3, #15
 8001158:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 800115a:	4b6c      	ldr	r3, [pc, #432]	; (800130c <BMP180_GetPressure+0x218>)
 800115c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001160:	02da      	lsls	r2, r3, #11
 8001162:	4b6a      	ldr	r3, [pc, #424]	; (800130c <BMP180_GetPressure+0x218>)
 8001164:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001168:	4619      	mov	r1, r3
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	440b      	add	r3, r1
 800116e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001172:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8001174:	6a3a      	ldr	r2, [r7, #32]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	4413      	add	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001182:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001184:	4b61      	ldr	r3, [pc, #388]	; (800130c <BMP180_GetPressure+0x218>)
 8001186:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800118a:	461a      	mov	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fb03 f303 	mul.w	r3, r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	da01      	bge.n	800119a <BMP180_GetPressure+0xa6>
 8001196:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800119a:	131b      	asrs	r3, r3, #12
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	da01      	bge.n	80011a8 <BMP180_GetPressure+0xb4>
 80011a4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80011a8:	12db      	asrs	r3, r3, #11
 80011aa:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 80011ac:	4b57      	ldr	r3, [pc, #348]	; (800130c <BMP180_GetPressure+0x218>)
 80011ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011b2:	461a      	mov	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fb02 f303 	mul.w	r3, r2, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da01      	bge.n	80011c2 <BMP180_GetPressure+0xce>
 80011be:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80011c2:	12db      	asrs	r3, r3, #11
 80011c4:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 80011c6:	6a3a      	ldr	r2, [r7, #32]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	4413      	add	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 80011ce:	4b4f      	ldr	r3, [pc, #316]	; (800130c <BMP180_GetPressure+0x218>)
 80011d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d4:	009a      	lsls	r2, r3, #2
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4413      	add	r3, r2
 80011da:	4a49      	ldr	r2, [pc, #292]	; (8001300 <BMP180_GetPressure+0x20c>)
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	4093      	lsls	r3, r2
 80011e0:	3302      	adds	r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da00      	bge.n	80011e8 <BMP180_GetPressure+0xf4>
 80011e6:	3303      	adds	r3, #3
 80011e8:	109b      	asrs	r3, r3, #2
 80011ea:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 80011ec:	4b47      	ldr	r3, [pc, #284]	; (800130c <BMP180_GetPressure+0x218>)
 80011ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	da02      	bge.n	8001204 <BMP180_GetPressure+0x110>
 80011fe:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001202:	331f      	adds	r3, #31
 8001204:	135b      	asrs	r3, r3, #13
 8001206:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8001208:	4b40      	ldr	r3, [pc, #256]	; (800130c <BMP180_GetPressure+0x218>)
 800120a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800120e:	461a      	mov	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fb03 f303 	mul.w	r3, r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	da01      	bge.n	800121e <BMP180_GetPressure+0x12a>
 800121a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800121e:	131b      	asrs	r3, r3, #12
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	da02      	bge.n	800122e <BMP180_GetPressure+0x13a>
 8001228:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800122c:	33ff      	adds	r3, #255	; 0xff
 800122e:	141b      	asrs	r3, r3, #16
 8001230:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001232:	6a3a      	ldr	r2, [r7, #32]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	4413      	add	r3, r2
 8001238:	3302      	adds	r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	da00      	bge.n	8001240 <BMP180_GetPressure+0x14c>
 800123e:	3303      	adds	r3, #3
 8001240:	109b      	asrs	r3, r3, #2
 8001242:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <BMP180_GetPressure+0x218>)
 8001246:	88db      	ldrh	r3, [r3, #6]
 8001248:	461a      	mov	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001250:	fb02 f303 	mul.w	r3, r2, r3
 8001254:	0bdb      	lsrs	r3, r3, #15
 8001256:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 8001258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <BMP180_GetPressure+0x20c>)
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	4611      	mov	r1, r2
 8001264:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001268:	410a      	asrs	r2, r1
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db06      	blt.n	8001284 <BMP180_GetPressure+0x190>
		p = (b7 * 2) / b4;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	005a      	lsls	r2, r3, #1
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001282:	e005      	b.n	8001290 <BMP180_GetPressure+0x19c>
	else
		p = (b7 / b4) * 2;
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	fbb2 f3f3 	udiv	r3, r2, r3
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	2b00      	cmp	r3, #0
 8001294:	da00      	bge.n	8001298 <BMP180_GetPressure+0x1a4>
 8001296:	33ff      	adds	r3, #255	; 0xff
 8001298:	121b      	asrs	r3, r3, #8
 800129a:	461a      	mov	r2, r3
 800129c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	da00      	bge.n	80012a4 <BMP180_GetPressure+0x1b0>
 80012a2:	33ff      	adds	r3, #255	; 0xff
 80012a4:	121b      	asrs	r3, r3, #8
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	f640 32de 	movw	r2, #3038	; 0xbde
 80012b2:	fb02 f303 	mul.w	r3, r2, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da02      	bge.n	80012c0 <BMP180_GetPressure+0x1cc>
 80012ba:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012be:	33ff      	adds	r3, #255	; 0xff
 80012c0:	141b      	asrs	r3, r3, #16
 80012c2:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 80012c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <BMP180_GetPressure+0x21c>)
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da02      	bge.n	80012d6 <BMP180_GetPressure+0x1e2>
 80012d0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012d4:	33ff      	adds	r3, #255	; 0xff
 80012d6:	141b      	asrs	r3, r3, #16
 80012d8:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 80012da:	6a3a      	ldr	r2, [r7, #32]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	4413      	add	r3, r2
 80012e0:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	da00      	bge.n	80012ea <BMP180_GetPressure+0x1f6>
 80012e8:	330f      	adds	r3, #15
 80012ea:	111b      	asrs	r3, r3, #4
 80012ec:	461a      	mov	r2, r3
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	4413      	add	r3, r2
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 80012f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000021a 	.word	0x2000021a
 8001304:	08007038 	.word	0x08007038
 8001308:	0800703c 	.word	0x0800703c
 800130c:	20000204 	.word	0x20000204
 8001310:	ffffe343 	.word	0xffffe343

08001314 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8001314:	b598      	push	{r3, r4, r7, lr}
 8001316:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8001318:	20f6      	movs	r0, #246	; 0xf6
 800131a:	f7ff fe85 	bl	8001028 <BMP180_ReadReg>
 800131e:	4603      	mov	r3, r0
 8001320:	021c      	lsls	r4, r3, #8
 8001322:	20f7      	movs	r0, #247	; 0xf7
 8001324:	f7ff fe80 	bl	8001028 <BMP180_ReadReg>
 8001328:	4603      	mov	r3, r0
 800132a:	4323      	orrs	r3, r4
}
 800132c:	4618      	mov	r0, r3
 800132e:	bd98      	pop	{r3, r4, r7, pc}

08001330 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001330:	b598      	push	{r3, r4, r7, lr}
 8001332:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001334:	20f6      	movs	r0, #246	; 0xf6
 8001336:	f7ff fe77 	bl	8001028 <BMP180_ReadReg>
 800133a:	4603      	mov	r3, r0
 800133c:	041c      	lsls	r4, r3, #16
 800133e:	20f7      	movs	r0, #247	; 0xf7
 8001340:	f7ff fe72 	bl	8001028 <BMP180_ReadReg>
 8001344:	4603      	mov	r3, r0
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	431c      	orrs	r4, r3
 800134a:	20f8      	movs	r0, #248	; 0xf8
 800134c:	f7ff fe6c 	bl	8001028 <BMP180_ReadReg>
 8001350:	4603      	mov	r3, r0
 8001352:	ea44 0203 	orr.w	r2, r4, r3
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <BMP180_GetUP+0x38>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	f1c3 0308 	rsb	r3, r3, #8
 800135e:	fa42 f303 	asr.w	r3, r2, r3
}
 8001362:	4618      	mov	r0, r3
 8001364:	bd98      	pop	{r3, r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	2000021a 	.word	0x2000021a

0800136c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af04      	add	r7, sp, #16
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2301      	movs	r3, #1
 8001392:	2200      	movs	r2, #0
 8001394:	2178      	movs	r1, #120	; 0x78
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <ssd1306_WriteCommand+0x2c>)
 8001398:	f001 fdca 	bl	8002f30 <HAL_I2C_Mem_Write>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000424 	.word	0x20000424

080013a8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af04      	add	r7, sp, #16
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ba:	9202      	str	r2, [sp, #8]
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2301      	movs	r3, #1
 80013c4:	2240      	movs	r2, #64	; 0x40
 80013c6:	2178      	movs	r1, #120	; 0x78
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <ssd1306_WriteData+0x30>)
 80013ca:	f001 fdb1 	bl	8002f30 <HAL_I2C_Mem_Write>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000424 	.word	0x20000424

080013dc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80013e0:	f7ff ffc4 	bl	800136c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80013e4:	2064      	movs	r0, #100	; 0x64
 80013e6:	f000 fe45 	bl	8002074 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f9d6 	bl	800179c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80013f0:	2020      	movs	r0, #32
 80013f2:	f7ff ffc1 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff ffbe 	bl	8001378 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80013fc:	20b0      	movs	r0, #176	; 0xb0
 80013fe:	f7ff ffbb 	bl	8001378 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001402:	20c8      	movs	r0, #200	; 0xc8
 8001404:	f7ff ffb8 	bl	8001378 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff ffb5 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800140e:	2010      	movs	r0, #16
 8001410:	f7ff ffb2 	bl	8001378 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001414:	2040      	movs	r0, #64	; 0x40
 8001416:	f7ff ffaf 	bl	8001378 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800141a:	20ff      	movs	r0, #255	; 0xff
 800141c:	f000 f9aa 	bl	8001774 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001420:	20a1      	movs	r0, #161	; 0xa1
 8001422:	f7ff ffa9 	bl	8001378 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001426:	20a6      	movs	r0, #166	; 0xa6
 8001428:	f7ff ffa6 	bl	8001378 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800142c:	20a8      	movs	r0, #168	; 0xa8
 800142e:	f7ff ffa3 	bl	8001378 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001432:	201f      	movs	r0, #31
 8001434:	f7ff ffa0 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001438:	20a4      	movs	r0, #164	; 0xa4
 800143a:	f7ff ff9d 	bl	8001378 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800143e:	20d3      	movs	r0, #211	; 0xd3
 8001440:	f7ff ff9a 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff ff97 	bl	8001378 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800144a:	20d5      	movs	r0, #213	; 0xd5
 800144c:	f7ff ff94 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001450:	20f0      	movs	r0, #240	; 0xf0
 8001452:	f7ff ff91 	bl	8001378 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001456:	20d9      	movs	r0, #217	; 0xd9
 8001458:	f7ff ff8e 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800145c:	2022      	movs	r0, #34	; 0x22
 800145e:	f7ff ff8b 	bl	8001378 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001462:	20da      	movs	r0, #218	; 0xda
 8001464:	f7ff ff88 	bl	8001378 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001468:	2002      	movs	r0, #2
 800146a:	f7ff ff85 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800146e:	20db      	movs	r0, #219	; 0xdb
 8001470:	f7ff ff82 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001474:	2020      	movs	r0, #32
 8001476:	f7ff ff7f 	bl	8001378 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800147a:	208d      	movs	r0, #141	; 0x8d
 800147c:	f7ff ff7c 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001480:	2014      	movs	r0, #20
 8001482:	f7ff ff79 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001486:	2001      	movs	r0, #1
 8001488:	f000 f988 	bl	800179c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800148c:	2000      	movs	r0, #0
 800148e:	f000 f80f 	bl	80014b0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001492:	f000 f82f 	bl	80014f4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <ssd1306_Init+0xd0>)
 8001498:	2200      	movs	r2, #0
 800149a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <ssd1306_Init+0xd0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80014a2:	4b02      	ldr	r3, [pc, #8]	; (80014ac <ssd1306_Init+0xd0>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	711a      	strb	r2, [r3, #4]
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000041c 	.word	0x2000041c

080014b0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	e00d      	b.n	80014dc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <ssd1306_Fill+0x1a>
 80014c6:	2100      	movs	r1, #0
 80014c8:	e000      	b.n	80014cc <ssd1306_Fill+0x1c>
 80014ca:	21ff      	movs	r1, #255	; 0xff
 80014cc:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <ssd1306_Fill+0x40>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	460a      	mov	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3301      	adds	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e2:	d3ed      	bcc.n	80014c0 <ssd1306_Fill+0x10>
    }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	2000021c 	.word	0x2000021c

080014f4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	e016      	b.n	800152e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	3b50      	subs	r3, #80	; 0x50
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff36 	bl	8001378 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff ff33 	bl	8001378 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001512:	2010      	movs	r0, #16
 8001514:	f7ff ff30 	bl	8001378 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	01db      	lsls	r3, r3, #7
 800151c:	4a08      	ldr	r2, [pc, #32]	; (8001540 <ssd1306_UpdateScreen+0x4c>)
 800151e:	4413      	add	r3, r2
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff40 	bl	80013a8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	3301      	adds	r3, #1
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d9e5      	bls.n	8001500 <ssd1306_UpdateScreen+0xc>
    }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000021c 	.word	0x2000021c

08001544 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
 800154e:	460b      	mov	r3, r1
 8001550:	71bb      	strb	r3, [r7, #6]
 8001552:	4613      	mov	r3, r2
 8001554:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db3d      	blt.n	80015da <ssd1306_DrawPixel+0x96>
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	2b1f      	cmp	r3, #31
 8001562:	d83a      	bhi.n	80015da <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001564:	797b      	ldrb	r3, [r7, #5]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d11a      	bne.n	80015a0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	08db      	lsrs	r3, r3, #3
 8001570:	b2d8      	uxtb	r0, r3
 8001572:	4603      	mov	r3, r0
 8001574:	01db      	lsls	r3, r3, #7
 8001576:	4413      	add	r3, r2
 8001578:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <ssd1306_DrawPixel+0xa0>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	b25a      	sxtb	r2, r3
 800157e:	79bb      	ldrb	r3, [r7, #6]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	b25b      	sxtb	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b259      	sxtb	r1, r3
 8001590:	79fa      	ldrb	r2, [r7, #7]
 8001592:	4603      	mov	r3, r0
 8001594:	01db      	lsls	r3, r3, #7
 8001596:	4413      	add	r3, r2
 8001598:	b2c9      	uxtb	r1, r1
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <ssd1306_DrawPixel+0xa0>)
 800159c:	54d1      	strb	r1, [r2, r3]
 800159e:	e01d      	b.n	80015dc <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015a0:	79fa      	ldrb	r2, [r7, #7]
 80015a2:	79bb      	ldrb	r3, [r7, #6]
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	b2d8      	uxtb	r0, r3
 80015a8:	4603      	mov	r3, r0
 80015aa:	01db      	lsls	r3, r3, #7
 80015ac:	4413      	add	r3, r2
 80015ae:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <ssd1306_DrawPixel+0xa0>)
 80015b0:	5cd3      	ldrb	r3, [r2, r3]
 80015b2:	b25a      	sxtb	r2, r3
 80015b4:	79bb      	ldrb	r3, [r7, #6]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	4013      	ands	r3, r2
 80015c8:	b259      	sxtb	r1, r3
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	4603      	mov	r3, r0
 80015ce:	01db      	lsls	r3, r3, #7
 80015d0:	4413      	add	r3, r2
 80015d2:	b2c9      	uxtb	r1, r1
 80015d4:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <ssd1306_DrawPixel+0xa0>)
 80015d6:	54d1      	strb	r1, [r2, r3]
 80015d8:	e000      	b.n	80015dc <ssd1306_DrawPixel+0x98>
        return;
 80015da:	bf00      	nop
    }
}
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	2000021c 	.word	0x2000021c

080015e8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4604      	mov	r4, r0
 80015f0:	1d38      	adds	r0, r7, #4
 80015f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80015f6:	461a      	mov	r2, r3
 80015f8:	4623      	mov	r3, r4
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	4613      	mov	r3, r2
 80015fe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b1f      	cmp	r3, #31
 8001604:	d902      	bls.n	800160c <ssd1306_WriteChar+0x24>
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	2b7e      	cmp	r3, #126	; 0x7e
 800160a:	d901      	bls.n	8001610 <ssd1306_WriteChar+0x28>
        return 0;
 800160c:	2300      	movs	r3, #0
 800160e:	e06d      	b.n	80016ec <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001610:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <ssd1306_WriteChar+0x10c>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	793b      	ldrb	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	2b80      	cmp	r3, #128	; 0x80
 800161c:	dc06      	bgt.n	800162c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800161e:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <ssd1306_WriteChar+0x10c>)
 8001620:	885b      	ldrh	r3, [r3, #2]
 8001622:	461a      	mov	r2, r3
 8001624:	797b      	ldrb	r3, [r7, #5]
 8001626:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001628:	2b20      	cmp	r3, #32
 800162a:	dd01      	ble.n	8001630 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800162c:	2300      	movs	r3, #0
 800162e:	e05d      	b.n	80016ec <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	e04c      	b.n	80016d0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	3b20      	subs	r3, #32
 800163c:	7979      	ldrb	r1, [r7, #5]
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4619      	mov	r1, r3
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	440b      	add	r3, r1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	e034      	b.n	80016c0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d012      	beq.n	800168c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001666:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <ssd1306_WriteChar+0x10c>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4413      	add	r3, r2
 8001672:	b2d8      	uxtb	r0, r3
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <ssd1306_WriteChar+0x10c>)
 8001676:	885b      	ldrh	r3, [r3, #2]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	4413      	add	r3, r2
 8001680:	b2db      	uxtb	r3, r3
 8001682:	7bba      	ldrb	r2, [r7, #14]
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff ff5d 	bl	8001544 <ssd1306_DrawPixel>
 800168a:	e016      	b.n	80016ba <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <ssd1306_WriteChar+0x10c>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4413      	add	r3, r2
 8001698:	b2d8      	uxtb	r0, r3
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <ssd1306_WriteChar+0x10c>)
 800169c:	885b      	ldrh	r3, [r3, #2]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	b2d9      	uxtb	r1, r3
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf0c      	ite	eq
 80016ae:	2301      	moveq	r3, #1
 80016b0:	2300      	movne	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	f7ff ff45 	bl	8001544 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	3301      	adds	r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	793b      	ldrb	r3, [r7, #4]
 80016c2:	461a      	mov	r2, r3
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d3c5      	bcc.n	8001656 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3301      	adds	r3, #1
 80016ce:	61fb      	str	r3, [r7, #28]
 80016d0:	797b      	ldrb	r3, [r7, #5]
 80016d2:	461a      	mov	r2, r3
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d3ad      	bcc.n	8001636 <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <ssd1306_WriteChar+0x10c>)
 80016dc:	881a      	ldrh	r2, [r3, #0]
 80016de:	793b      	ldrb	r3, [r7, #4]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <ssd1306_WriteChar+0x10c>)
 80016e8:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3724      	adds	r7, #36	; 0x24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	2000041c 	.word	0x2000041c

080016f8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	1d38      	adds	r0, r7, #4
 8001702:	e880 0006 	stmia.w	r0, {r1, r2}
 8001706:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001708:	e012      	b.n	8001730 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	7818      	ldrb	r0, [r3, #0]
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	1d3a      	adds	r2, r7, #4
 8001712:	ca06      	ldmia	r2, {r1, r2}
 8001714:	f7ff ff68 	bl	80015e8 <ssd1306_WriteChar>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d002      	beq.n	800172a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	e008      	b.n	800173c <ssd1306_WriteString+0x44>
        }
        str++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e8      	bne.n	800170a <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	781b      	ldrb	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <ssd1306_SetCursor+0x2c>)
 800175a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800175c:	79bb      	ldrb	r3, [r7, #6]
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <ssd1306_SetCursor+0x2c>)
 8001762:	805a      	strh	r2, [r3, #2]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	2000041c 	.word	0x2000041c

08001774 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800177e:	2381      	movs	r3, #129	; 0x81
 8001780:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fdf7 	bl	8001378 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fdf3 	bl	8001378 <ssd1306_WriteCommand>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80017ac:	23af      	movs	r3, #175	; 0xaf
 80017ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <ssd1306_SetDisplayOn+0x38>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	715a      	strb	r2, [r3, #5]
 80017b6:	e004      	b.n	80017c2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80017b8:	23ae      	movs	r3, #174	; 0xae
 80017ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <ssd1306_SetDisplayOn+0x38>)
 80017be:	2200      	movs	r2, #0
 80017c0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fdd7 	bl	8001378 <ssd1306_WriteCommand>
}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000041c 	.word	0x2000041c

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b0a5      	sub	sp, #148	; 0x94
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017de:	f000 fbe7 	bl	8001fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e2:	f000 f909 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e6:	f000 f9a7 	bl	8001b38 <MX_GPIO_Init>
  MX_I2C2_Init();
 80017ea:	f000 f941 	bl	8001a70 <MX_I2C2_Init>
  MX_SPI1_Init();
 80017ee:	f000 f96d 	bl	8001acc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_Init();
 80017f2:	f7ff fdf3 	bl	80013dc <ssd1306_Init>
	Am2320_ = am2320_Init(&hi2c2, AM2320_ADDRESS);
 80017f6:	4c75      	ldr	r4, [pc, #468]	; (80019cc <main+0x1f4>)
 80017f8:	463b      	mov	r3, r7
 80017fa:	22b8      	movs	r2, #184	; 0xb8
 80017fc:	4974      	ldr	r1, [pc, #464]	; (80019d0 <main+0x1f8>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fa76 	bl	8000cf0 <am2320_Init>
 8001804:	463b      	mov	r3, r7
 8001806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001808:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	BMP180_Init(&hi2c2);
 800180c:	4870      	ldr	r0, [pc, #448]	; (80019d0 <main+0x1f8>)
 800180e:	f7ff fb0b 	bl	8000e28 <BMP180_Init>
	BMP180_SetOversampling(BMP180_ULTRA);
 8001812:	2003      	movs	r0, #3
 8001814:	f7ff fb16 	bl	8000e44 <BMP180_SetOversampling>
	BMP180_UpdateCalibrationData();
 8001818:	f7ff fb24 	bl	8000e64 <BMP180_UpdateCalibrationData>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001822:	486c      	ldr	r0, [pc, #432]	; (80019d4 <main+0x1fc>)
 8001824:	f000 fec9 	bl	80025ba <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 8001828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800182c:	f000 fc22 	bl	8002074 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(Btn1_GPIO_Port, Btn1_Pin)){
 8001830:	2120      	movs	r1, #32
 8001832:	4868      	ldr	r0, [pc, #416]	; (80019d4 <main+0x1fc>)
 8001834:	f000 feaa 	bl	800258c <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <main+0x6e>
		  ssd1306_Fill(Black);
 800183e:	2000      	movs	r0, #0
 8001840:	f7ff fe36 	bl	80014b0 <ssd1306_Fill>
 8001844:	e0be      	b.n	80019c4 <main+0x1ec>
	  }else{
		ssd1306_SetCursor(2,0);
 8001846:	2100      	movs	r1, #0
 8001848:	2002      	movs	r0, #2
 800184a:	f7ff ff7b 	bl	8001744 <ssd1306_SetCursor>

		int32_t temperature = BMP180_GetRawTemperature();
 800184e:	f7ff fc0d 	bl	800106c <BMP180_GetRawTemperature>
 8001852:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		int32_t pressure = BMP180_GetPressure();
 8001856:	f7ff fc4d 	bl	80010f4 <BMP180_GetPressure>
 800185a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		char buffer[100];
		sprintf(buffer, "T1: %d.%d", (int) temperature / 10, (int)( temperature % 10));
 800185e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001862:	4a5d      	ldr	r2, [pc, #372]	; (80019d8 <main+0x200>)
 8001864:	fb82 1203 	smull	r1, r2, r2, r3
 8001868:	1092      	asrs	r2, r2, #2
 800186a:	17db      	asrs	r3, r3, #31
 800186c:	1ad4      	subs	r4, r2, r3
 800186e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001872:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <main+0x200>)
 8001874:	fb83 1302 	smull	r1, r3, r3, r2
 8001878:	1099      	asrs	r1, r3, #2
 800187a:	17d3      	asrs	r3, r2, #31
 800187c:	1ac9      	subs	r1, r1, r3
 800187e:	460b      	mov	r3, r1
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	1ad1      	subs	r1, r2, r3
 8001888:	f107 0010 	add.w	r0, r7, #16
 800188c:	460b      	mov	r3, r1
 800188e:	4622      	mov	r2, r4
 8001890:	4952      	ldr	r1, [pc, #328]	; (80019dc <main+0x204>)
 8001892:	f003 f933 	bl	8004afc <siprintf>
		ssd1306_WriteString(buffer,Font_7x10,White);
 8001896:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <main+0x208>)
 8001898:	f107 0010 	add.w	r0, r7, #16
 800189c:	2301      	movs	r3, #1
 800189e:	ca06      	ldmia	r2, {r1, r2}
 80018a0:	f7ff ff2a 	bl	80016f8 <ssd1306_WriteString>

		ssd1306_SetCursor(66,0);
 80018a4:	2100      	movs	r1, #0
 80018a6:	2042      	movs	r0, #66	; 0x42
 80018a8:	f7ff ff4c 	bl	8001744 <ssd1306_SetCursor>
		sprintf(buffer, "P: %d",  (int) pressure);
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80018b4:	494b      	ldr	r1, [pc, #300]	; (80019e4 <main+0x20c>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 f920 	bl	8004afc <siprintf>
		ssd1306_WriteString(buffer,Font_7x10,White);
 80018bc:	4a48      	ldr	r2, [pc, #288]	; (80019e0 <main+0x208>)
 80018be:	f107 0010 	add.w	r0, r7, #16
 80018c2:	2301      	movs	r3, #1
 80018c4:	ca06      	ldmia	r2, {r1, r2}
 80018c6:	f7ff ff17 	bl	80016f8 <ssd1306_WriteString>
		float t2 = 0;
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	67bb      	str	r3, [r7, #120]	; 0x78
		float h = 200;
 80018d0:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <main+0x210>)
 80018d2:	677b      	str	r3, [r7, #116]	; 0x74
		uint8_t err = am2320_GetTemperatureAndHumidity2(&Am2320_, &t2, &h);
 80018d4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80018d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018dc:	4619      	mov	r1, r3
 80018de:	483b      	ldr	r0, [pc, #236]	; (80019cc <main+0x1f4>)
 80018e0:	f7ff fa6a 	bl	8000db8 <am2320_GetTemperatureAndHumidity2>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		int32_t t2_d = (int32_t)(t2);
 80018ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f9d9 	bl	8000ca4 <__aeabi_f2iz>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		int32_t h_d = (int32_t)(h);
 80018f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f9d2 	bl	8000ca4 <__aeabi_f2iz>
 8001900:	4603      	mov	r3, r0
 8001902:	67fb      	str	r3, [r7, #124]	; 0x7c
		ssd1306_SetCursor(2,15);
 8001904:	210f      	movs	r1, #15
 8001906:	2002      	movs	r0, #2
 8001908:	f7ff ff1c 	bl	8001744 <ssd1306_SetCursor>
		if(err!=0){
 800190c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00f      	beq.n	8001934 <main+0x15c>
			sprintf(buffer,"ERROR: %d", err);
 8001914:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4933      	ldr	r1, [pc, #204]	; (80019ec <main+0x214>)
 800191e:	4618      	mov	r0, r3
 8001920:	f003 f8ec 	bl	8004afc <siprintf>
			ssd1306_WriteString(buffer,Font_7x10,White);
 8001924:	4a2e      	ldr	r2, [pc, #184]	; (80019e0 <main+0x208>)
 8001926:	f107 0010 	add.w	r0, r7, #16
 800192a:	2301      	movs	r3, #1
 800192c:	ca06      	ldmia	r2, {r1, r2}
 800192e:	f7ff fee3 	bl	80016f8 <ssd1306_WriteString>
 8001932:	e047      	b.n	80019c4 <main+0x1ec>
		}else{
			sprintf(buffer,"T2: %d.%d", (int) t2_d / 10, (int)( t2_d % 10));
 8001934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001938:	4a27      	ldr	r2, [pc, #156]	; (80019d8 <main+0x200>)
 800193a:	fb82 1203 	smull	r1, r2, r2, r3
 800193e:	1092      	asrs	r2, r2, #2
 8001940:	17db      	asrs	r3, r3, #31
 8001942:	1ad4      	subs	r4, r2, r3
 8001944:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <main+0x200>)
 800194a:	fb83 1302 	smull	r1, r3, r3, r2
 800194e:	1099      	asrs	r1, r3, #2
 8001950:	17d3      	asrs	r3, r2, #31
 8001952:	1ac9      	subs	r1, r1, r3
 8001954:	460b      	mov	r3, r1
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	1ad1      	subs	r1, r2, r3
 800195e:	f107 0010 	add.w	r0, r7, #16
 8001962:	460b      	mov	r3, r1
 8001964:	4622      	mov	r2, r4
 8001966:	4922      	ldr	r1, [pc, #136]	; (80019f0 <main+0x218>)
 8001968:	f003 f8c8 	bl	8004afc <siprintf>
			ssd1306_WriteString(buffer,Font_7x10,White);
 800196c:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <main+0x208>)
 800196e:	f107 0010 	add.w	r0, r7, #16
 8001972:	2301      	movs	r3, #1
 8001974:	ca06      	ldmia	r2, {r1, r2}
 8001976:	f7ff febf 	bl	80016f8 <ssd1306_WriteString>
			ssd1306_SetCursor(66,15);
 800197a:	210f      	movs	r1, #15
 800197c:	2042      	movs	r0, #66	; 0x42
 800197e:	f7ff fee1 	bl	8001744 <ssd1306_SetCursor>
			sprintf(buffer,"H: %d.%d", (int) h_d / 10, (int)( h_d % 10));
 8001982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <main+0x200>)
 8001986:	fb82 1203 	smull	r1, r2, r2, r3
 800198a:	1092      	asrs	r2, r2, #2
 800198c:	17db      	asrs	r3, r3, #31
 800198e:	1ad4      	subs	r4, r2, r3
 8001990:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <main+0x200>)
 8001994:	fb83 1302 	smull	r1, r3, r3, r2
 8001998:	1099      	asrs	r1, r3, #2
 800199a:	17d3      	asrs	r3, r2, #31
 800199c:	1ac9      	subs	r1, r1, r3
 800199e:	460b      	mov	r3, r1
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	1ad1      	subs	r1, r2, r3
 80019a8:	f107 0010 	add.w	r0, r7, #16
 80019ac:	460b      	mov	r3, r1
 80019ae:	4622      	mov	r2, r4
 80019b0:	4910      	ldr	r1, [pc, #64]	; (80019f4 <main+0x21c>)
 80019b2:	f003 f8a3 	bl	8004afc <siprintf>
			ssd1306_WriteString(buffer,Font_7x10,White);
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <main+0x208>)
 80019b8:	f107 0010 	add.w	r0, r7, #16
 80019bc:	2301      	movs	r3, #1
 80019be:	ca06      	ldmia	r2, {r1, r2}
 80019c0:	f7ff fe9a 	bl	80016f8 <ssd1306_WriteString>
		}
	  }
	ssd1306_UpdateScreen();
 80019c4:	f7ff fd96 	bl	80014f4 <ssd1306_UpdateScreen>
	  HAL_Delay(1000);
 80019c8:	e72e      	b.n	8001828 <main+0x50>
 80019ca:	bf00      	nop
 80019cc:	200004d0 	.word	0x200004d0
 80019d0:	20000424 	.word	0x20000424
 80019d4:	40010c00 	.word	0x40010c00
 80019d8:	66666667 	.word	0x66666667
 80019dc:	08006ff0 	.word	0x08006ff0
 80019e0:	20000000 	.word	0x20000000
 80019e4:	08006ffc 	.word	0x08006ffc
 80019e8:	43480000 	.word	0x43480000
 80019ec:	08007004 	.word	0x08007004
 80019f0:	08007010 	.word	0x08007010
 80019f4:	0800701c 	.word	0x0800701c

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b090      	sub	sp, #64	; 0x40
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	2228      	movs	r2, #40	; 0x28
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fc10 	bl	800422c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a22:	2310      	movs	r3, #16
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 ff3a 	bl	80038a8 <HAL_RCC_OscConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001a3a:	f000 f8e3 	bl	8001c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3e:	230f      	movs	r3, #15
 8001a40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 f9a7 	bl	8003dac <HAL_RCC_ClockConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001a64:	f000 f8ce 	bl	8001c04 <Error_Handler>
  }
}
 8001a68:	bf00      	nop
 8001a6a:	3740      	adds	r7, #64	; 0x40
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_I2C2_Init+0x54>)
 8001a76:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <MX_I2C2_Init+0x58>)
 8001a78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 50000;
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_I2C2_Init+0x54>)
 8001a7c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001a80:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_I2C2_Init+0x54>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_I2C2_Init+0x54>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <MX_I2C2_Init+0x54>)
 8001a90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a94:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_I2C2_Init+0x54>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_I2C2_Init+0x54>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_I2C2_Init+0x54>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_I2C2_Init+0x54>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_I2C2_Init+0x54>)
 8001ab0:	f000 fd9c 	bl	80025ec <HAL_I2C_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8001aba:	f000 f8a3 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000424 	.word	0x20000424
 8001ac8:	40005800 	.word	0x40005800

08001acc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001ad2:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <MX_SPI1_Init+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b00:	2218      	movs	r2, #24
 8001b02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b18:	220a      	movs	r2, #10
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b1e:	f002 fac9 	bl	80040b4 <HAL_SPI_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b28:	f000 f86c 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000478 	.word	0x20000478
 8001b34:	40013000 	.word	0x40013000

08001b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4c:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <MX_GPIO_Init+0xbc>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a28      	ldr	r2, [pc, #160]	; (8001bf4 <MX_GPIO_Init+0xbc>)
 8001b52:	f043 0320 	orr.w	r3, r3, #32
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <MX_GPIO_Init+0xbc>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <MX_GPIO_Init+0xbc>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a22      	ldr	r2, [pc, #136]	; (8001bf4 <MX_GPIO_Init+0xbc>)
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b20      	ldr	r3, [pc, #128]	; (8001bf4 <MX_GPIO_Init+0xbc>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <MX_GPIO_Init+0xbc>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <MX_GPIO_Init+0xbc>)
 8001b82:	f043 0308 	orr.w	r3, r3, #8
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <MX_GPIO_Init+0xbc>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPI_CE_GPIO_Port, CPI_CE_Pin, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2110      	movs	r1, #16
 8001b98:	4817      	ldr	r0, [pc, #92]	; (8001bf8 <MX_GPIO_Init+0xc0>)
 8001b9a:	f000 fd0e 	bl	80025ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CPI_CE_Pin */
  GPIO_InitStruct.Pin = CPI_CE_Pin;
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CPI_CE_GPIO_Port, &GPIO_InitStruct);
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <MX_GPIO_Init+0xc0>)
 8001bb6:	f000 fb65 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <MX_GPIO_Init+0xc4>)
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480c      	ldr	r0, [pc, #48]	; (8001c00 <MX_GPIO_Init+0xc8>)
 8001bd0:	f000 fb58 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn3_Pin Btn2_Pin Btn1_Pin */
  GPIO_InitStruct.Pin = Btn3_Pin|Btn2_Pin|Btn1_Pin;
 8001bd4:	2338      	movs	r3, #56	; 0x38
 8001bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <MX_GPIO_Init+0xc8>)
 8001be8:	f000 fb4c 	bl	8002284 <HAL_GPIO_Init>

}
 8001bec:	bf00      	nop
 8001bee:	3720      	adds	r7, #32
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	10110000 	.word	0x10110000
 8001c00:	40010c00 	.word	0x40010c00

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <Error_Handler+0x8>
	...

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6193      	str	r3, [r2, #24]
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_MspInit+0x5c>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_MspInit+0x60>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_MspInit+0x60>)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000

08001c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <HAL_I2C_MspInit+0x74>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d124      	bne.n	8001cde <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_I2C_MspInit+0x78>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_I2C_MspInit+0x78>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_I2C_MspInit+0x78>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb2:	2312      	movs	r3, #18
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 0310 	add.w	r3, r7, #16
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <HAL_I2C_MspInit+0x7c>)
 8001cc2:	f000 fadf 	bl	8002284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_I2C_MspInit+0x78>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_I2C_MspInit+0x78>)
 8001ccc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cd0:	61d3      	str	r3, [r2, #28]
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_I2C_MspInit+0x78>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40005800 	.word	0x40005800
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010c00 	.word	0x40010c00

08001cf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1b      	ldr	r2, [pc, #108]	; (8001d7c <HAL_SPI_MspInit+0x88>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d12f      	bne.n	8001d74 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_SPI_MspInit+0x8c>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a19      	ldr	r2, [pc, #100]	; (8001d80 <HAL_SPI_MspInit+0x8c>)
 8001d1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_SPI_MspInit+0x8c>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_SPI_MspInit+0x8c>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <HAL_SPI_MspInit+0x8c>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_SPI_MspInit+0x8c>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d44:	23a0      	movs	r3, #160	; 0xa0
 8001d46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	4619      	mov	r1, r3
 8001d56:	480b      	ldr	r0, [pc, #44]	; (8001d84 <HAL_SPI_MspInit+0x90>)
 8001d58:	f000 fa94 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d5c:	2340      	movs	r3, #64	; 0x40
 8001d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <HAL_SPI_MspInit+0x90>)
 8001d70:	f000 fa88 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d74:	bf00      	nop
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40013000 	.word	0x40013000
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40010800 	.word	0x40010800

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <NMI_Handler+0x4>

08001d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <HardFault_Handler+0x4>

08001d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <MemManage_Handler+0x4>

08001d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dce:	f000 f935 	bl	800203c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  return 1;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <_kill>:

int _kill(int pid, int sig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dee:	f002 f9e5 	bl	80041bc <__errno>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2216      	movs	r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
  return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_exit>:

void _exit (int status)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ffe7 	bl	8001de4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e16:	e7fe      	b.n	8001e16 <_exit+0x12>

08001e18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e00a      	b.n	8001e40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e2a:	f3af 8000 	nop.w
 8001e2e:	4601      	mov	r1, r0
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	b2ca      	uxtb	r2, r1
 8001e38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbf0      	blt.n	8001e2a <_read+0x12>
  }

  return len;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e009      	b.n	8001e78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	60ba      	str	r2, [r7, #8]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbf1      	blt.n	8001e64 <_write+0x12>
  }
  return len;
 8001e80:	687b      	ldr	r3, [r7, #4]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_close>:

int _close(int file)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb0:	605a      	str	r2, [r3, #4]
  return 0;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <_isatty>:

int _isatty(int file)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
	...

08001eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef4:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <_sbrk+0x5c>)
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <_sbrk+0x60>)
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d102      	bne.n	8001f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <_sbrk+0x64>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <_sbrk+0x68>)
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d207      	bcs.n	8001f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f1c:	f002 f94e 	bl	80041bc <__errno>
 8001f20:	4603      	mov	r3, r0
 8001f22:	220c      	movs	r2, #12
 8001f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	e009      	b.n	8001f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <_sbrk+0x64>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f32:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a05      	ldr	r2, [pc, #20]	; (8001f50 <_sbrk+0x64>)
 8001f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20005000 	.word	0x20005000
 8001f4c:	00000400 	.word	0x00000400
 8001f50:	200004e0 	.word	0x200004e0
 8001f54:	200004f8 	.word	0x200004f8

08001f58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f66:	490d      	ldr	r1, [pc, #52]	; (8001f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f6c:	e002      	b.n	8001f74 <LoopCopyDataInit>

08001f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f72:	3304      	adds	r3, #4

08001f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f78:	d3f9      	bcc.n	8001f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f7c:	4c0a      	ldr	r4, [pc, #40]	; (8001fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f80:	e001      	b.n	8001f86 <LoopFillZerobss>

08001f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f84:	3204      	adds	r2, #4

08001f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f88:	d3fb      	bcc.n	8001f82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f8a:	f7ff ffe5 	bl	8001f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f002 f91b 	bl	80041c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f92:	f7ff fc21 	bl	80017d8 <main>
  bx lr
 8001f96:	4770      	bx	lr
  ldr r0, =_sdata
 8001f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f9c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001fa0:	08007ba4 	.word	0x08007ba4
  ldr r2, =_sbss
 8001fa4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001fa8:	200004f8 	.word	0x200004f8

08001fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fac:	e7fe      	b.n	8001fac <ADC1_2_IRQHandler>
	...

08001fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_Init+0x28>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_Init+0x28>)
 8001fba:	f043 0310 	orr.w	r3, r3, #16
 8001fbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f000 f92b 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc6:	200f      	movs	r0, #15
 8001fc8:	f000 f808 	bl	8001fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fcc:	f7ff fe20 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x54>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <HAL_InitTick+0x58>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f935 	bl	800226a <HAL_SYSTICK_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00e      	b.n	8002028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0f      	cmp	r3, #15
 800200e:	d80a      	bhi.n	8002026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002010:	2200      	movs	r2, #0
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	f04f 30ff 	mov.w	r0, #4294967295
 8002018:	f000 f90b 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800201c:	4a06      	ldr	r2, [pc, #24]	; (8002038 <HAL_InitTick+0x5c>)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e000      	b.n	8002028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20000008 	.word	0x20000008
 8002034:	20000010 	.word	0x20000010
 8002038:	2000000c 	.word	0x2000000c

0800203c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_IncTick+0x1c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_IncTick+0x20>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4413      	add	r3, r2
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <HAL_IncTick+0x20>)
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr
 8002058:	20000010 	.word	0x20000010
 800205c:	200004e4 	.word	0x200004e4

08002060 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <HAL_GetTick+0x10>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	200004e4 	.word	0x200004e4

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff fff0 	bl	8002060 <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_Delay+0x44>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffe0 	bl	8002060 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000010 	.word	0x20000010

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	; (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	; (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff90 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff49 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff5e 	bl	8002104 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff90 	bl	8002174 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5f 	bl	8002120 <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffb0 	bl	80021d8 <SysTick_Config>
 8002278:	4603      	mov	r3, r0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002284:	b480      	push	{r7}
 8002286:	b08b      	sub	sp, #44	; 0x2c
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002296:	e169      	b.n	800256c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002298:	2201      	movs	r2, #1
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	f040 8158 	bne.w	8002566 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a9a      	ldr	r2, [pc, #616]	; (8002524 <HAL_GPIO_Init+0x2a0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d05e      	beq.n	800237e <HAL_GPIO_Init+0xfa>
 80022c0:	4a98      	ldr	r2, [pc, #608]	; (8002524 <HAL_GPIO_Init+0x2a0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d875      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022c6:	4a98      	ldr	r2, [pc, #608]	; (8002528 <HAL_GPIO_Init+0x2a4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d058      	beq.n	800237e <HAL_GPIO_Init+0xfa>
 80022cc:	4a96      	ldr	r2, [pc, #600]	; (8002528 <HAL_GPIO_Init+0x2a4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d86f      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022d2:	4a96      	ldr	r2, [pc, #600]	; (800252c <HAL_GPIO_Init+0x2a8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d052      	beq.n	800237e <HAL_GPIO_Init+0xfa>
 80022d8:	4a94      	ldr	r2, [pc, #592]	; (800252c <HAL_GPIO_Init+0x2a8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d869      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022de:	4a94      	ldr	r2, [pc, #592]	; (8002530 <HAL_GPIO_Init+0x2ac>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d04c      	beq.n	800237e <HAL_GPIO_Init+0xfa>
 80022e4:	4a92      	ldr	r2, [pc, #584]	; (8002530 <HAL_GPIO_Init+0x2ac>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d863      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022ea:	4a92      	ldr	r2, [pc, #584]	; (8002534 <HAL_GPIO_Init+0x2b0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d046      	beq.n	800237e <HAL_GPIO_Init+0xfa>
 80022f0:	4a90      	ldr	r2, [pc, #576]	; (8002534 <HAL_GPIO_Init+0x2b0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d85d      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d82a      	bhi.n	8002350 <HAL_GPIO_Init+0xcc>
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	d859      	bhi.n	80023b2 <HAL_GPIO_Init+0x12e>
 80022fe:	a201      	add	r2, pc, #4	; (adr r2, 8002304 <HAL_GPIO_Init+0x80>)
 8002300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002304:	0800237f 	.word	0x0800237f
 8002308:	08002359 	.word	0x08002359
 800230c:	0800236b 	.word	0x0800236b
 8002310:	080023ad 	.word	0x080023ad
 8002314:	080023b3 	.word	0x080023b3
 8002318:	080023b3 	.word	0x080023b3
 800231c:	080023b3 	.word	0x080023b3
 8002320:	080023b3 	.word	0x080023b3
 8002324:	080023b3 	.word	0x080023b3
 8002328:	080023b3 	.word	0x080023b3
 800232c:	080023b3 	.word	0x080023b3
 8002330:	080023b3 	.word	0x080023b3
 8002334:	080023b3 	.word	0x080023b3
 8002338:	080023b3 	.word	0x080023b3
 800233c:	080023b3 	.word	0x080023b3
 8002340:	080023b3 	.word	0x080023b3
 8002344:	080023b3 	.word	0x080023b3
 8002348:	08002361 	.word	0x08002361
 800234c:	08002375 	.word	0x08002375
 8002350:	4a79      	ldr	r2, [pc, #484]	; (8002538 <HAL_GPIO_Init+0x2b4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002356:	e02c      	b.n	80023b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	623b      	str	r3, [r7, #32]
          break;
 800235e:	e029      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	3304      	adds	r3, #4
 8002366:	623b      	str	r3, [r7, #32]
          break;
 8002368:	e024      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	3308      	adds	r3, #8
 8002370:	623b      	str	r3, [r7, #32]
          break;
 8002372:	e01f      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	330c      	adds	r3, #12
 800237a:	623b      	str	r3, [r7, #32]
          break;
 800237c:	e01a      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002386:	2304      	movs	r3, #4
 8002388:	623b      	str	r3, [r7, #32]
          break;
 800238a:	e013      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002394:	2308      	movs	r3, #8
 8002396:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	611a      	str	r2, [r3, #16]
          break;
 800239e:	e009      	b.n	80023b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a0:	2308      	movs	r3, #8
 80023a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	615a      	str	r2, [r3, #20]
          break;
 80023aa:	e003      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
          break;
 80023b0:	e000      	b.n	80023b4 <HAL_GPIO_Init+0x130>
          break;
 80023b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2bff      	cmp	r3, #255	; 0xff
 80023b8:	d801      	bhi.n	80023be <HAL_GPIO_Init+0x13a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	e001      	b.n	80023c2 <HAL_GPIO_Init+0x13e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3304      	adds	r3, #4
 80023c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2bff      	cmp	r3, #255	; 0xff
 80023c8:	d802      	bhi.n	80023d0 <HAL_GPIO_Init+0x14c>
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	e002      	b.n	80023d6 <HAL_GPIO_Init+0x152>
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	3b08      	subs	r3, #8
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	210f      	movs	r1, #15
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	6a39      	ldr	r1, [r7, #32]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	431a      	orrs	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80b1 	beq.w	8002566 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002404:	4b4d      	ldr	r3, [pc, #308]	; (800253c <HAL_GPIO_Init+0x2b8>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a4c      	ldr	r2, [pc, #304]	; (800253c <HAL_GPIO_Init+0x2b8>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b4a      	ldr	r3, [pc, #296]	; (800253c <HAL_GPIO_Init+0x2b8>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800241c:	4a48      	ldr	r2, [pc, #288]	; (8002540 <HAL_GPIO_Init+0x2bc>)
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002428:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a40      	ldr	r2, [pc, #256]	; (8002544 <HAL_GPIO_Init+0x2c0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <HAL_GPIO_Init+0x1ec>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a3f      	ldr	r2, [pc, #252]	; (8002548 <HAL_GPIO_Init+0x2c4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00d      	beq.n	800246c <HAL_GPIO_Init+0x1e8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a3e      	ldr	r2, [pc, #248]	; (800254c <HAL_GPIO_Init+0x2c8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d007      	beq.n	8002468 <HAL_GPIO_Init+0x1e4>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3d      	ldr	r2, [pc, #244]	; (8002550 <HAL_GPIO_Init+0x2cc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d101      	bne.n	8002464 <HAL_GPIO_Init+0x1e0>
 8002460:	2303      	movs	r3, #3
 8002462:	e006      	b.n	8002472 <HAL_GPIO_Init+0x1ee>
 8002464:	2304      	movs	r3, #4
 8002466:	e004      	b.n	8002472 <HAL_GPIO_Init+0x1ee>
 8002468:	2302      	movs	r3, #2
 800246a:	e002      	b.n	8002472 <HAL_GPIO_Init+0x1ee>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_GPIO_Init+0x1ee>
 8002470:	2300      	movs	r3, #0
 8002472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002474:	f002 0203 	and.w	r2, r2, #3
 8002478:	0092      	lsls	r2, r2, #2
 800247a:	4093      	lsls	r3, r2
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002482:	492f      	ldr	r1, [pc, #188]	; (8002540 <HAL_GPIO_Init+0x2bc>)
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800249c:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	492c      	ldr	r1, [pc, #176]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024aa:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	4928      	ldr	r1, [pc, #160]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024c4:	4b23      	ldr	r3, [pc, #140]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4922      	ldr	r1, [pc, #136]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	43db      	mvns	r3, r3
 80024da:	491e      	ldr	r1, [pc, #120]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024dc:	4013      	ands	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4918      	ldr	r1, [pc, #96]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	43db      	mvns	r3, r3
 8002502:	4914      	ldr	r1, [pc, #80]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 8002504:	4013      	ands	r3, r2
 8002506:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d021      	beq.n	8002558 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	490e      	ldr	r1, [pc, #56]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	60cb      	str	r3, [r1, #12]
 8002520:	e021      	b.n	8002566 <HAL_GPIO_Init+0x2e2>
 8002522:	bf00      	nop
 8002524:	10320000 	.word	0x10320000
 8002528:	10310000 	.word	0x10310000
 800252c:	10220000 	.word	0x10220000
 8002530:	10210000 	.word	0x10210000
 8002534:	10120000 	.word	0x10120000
 8002538:	10110000 	.word	0x10110000
 800253c:	40021000 	.word	0x40021000
 8002540:	40010000 	.word	0x40010000
 8002544:	40010800 	.word	0x40010800
 8002548:	40010c00 	.word	0x40010c00
 800254c:	40011000 	.word	0x40011000
 8002550:	40011400 	.word	0x40011400
 8002554:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_GPIO_Init+0x304>)
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	43db      	mvns	r3, r3
 8002560:	4909      	ldr	r1, [pc, #36]	; (8002588 <HAL_GPIO_Init+0x304>)
 8002562:	4013      	ands	r3, r2
 8002564:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	3301      	adds	r3, #1
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	f47f ae8e 	bne.w	8002298 <HAL_GPIO_Init+0x14>
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	372c      	adds	r7, #44	; 0x2c
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	40010400 	.word	0x40010400

0800258c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e001      	b.n	80025ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	807b      	strh	r3, [r7, #2]
 80025c6:	4613      	mov	r3, r2
 80025c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025ca:	787b      	ldrb	r3, [r7, #1]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d0:	887a      	ldrh	r2, [r7, #2]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025d6:	e003      	b.n	80025e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	041a      	lsls	r2, r3, #16
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	611a      	str	r2, [r3, #16]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e12b      	b.n	8002856 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff fb2e 	bl	8001c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800263e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800264e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002650:	f001 fcfe 	bl	8004050 <HAL_RCC_GetPCLK1Freq>
 8002654:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a81      	ldr	r2, [pc, #516]	; (8002860 <HAL_I2C_Init+0x274>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d807      	bhi.n	8002670 <HAL_I2C_Init+0x84>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a80      	ldr	r2, [pc, #512]	; (8002864 <HAL_I2C_Init+0x278>)
 8002664:	4293      	cmp	r3, r2
 8002666:	bf94      	ite	ls
 8002668:	2301      	movls	r3, #1
 800266a:	2300      	movhi	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e006      	b.n	800267e <HAL_I2C_Init+0x92>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a7d      	ldr	r2, [pc, #500]	; (8002868 <HAL_I2C_Init+0x27c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0e7      	b.n	8002856 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4a78      	ldr	r2, [pc, #480]	; (800286c <HAL_I2C_Init+0x280>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9b      	lsrs	r3, r3, #18
 8002690:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a6a      	ldr	r2, [pc, #424]	; (8002860 <HAL_I2C_Init+0x274>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d802      	bhi.n	80026c0 <HAL_I2C_Init+0xd4>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3301      	adds	r3, #1
 80026be:	e009      	b.n	80026d4 <HAL_I2C_Init+0xe8>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	4a69      	ldr	r2, [pc, #420]	; (8002870 <HAL_I2C_Init+0x284>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	3301      	adds	r3, #1
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	430b      	orrs	r3, r1
 80026da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	495c      	ldr	r1, [pc, #368]	; (8002860 <HAL_I2C_Init+0x274>)
 80026f0:	428b      	cmp	r3, r1
 80026f2:	d819      	bhi.n	8002728 <HAL_I2C_Init+0x13c>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e59      	subs	r1, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002702:	1c59      	adds	r1, r3, #1
 8002704:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002708:	400b      	ands	r3, r1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_I2C_Init+0x138>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e59      	subs	r1, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fbb1 f3f3 	udiv	r3, r1, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002722:	e051      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002724:	2304      	movs	r3, #4
 8002726:	e04f      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d111      	bne.n	8002754 <HAL_I2C_Init+0x168>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	440b      	add	r3, r1
 800273e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002742:	3301      	adds	r3, #1
 8002744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e012      	b.n	800277a <HAL_I2C_Init+0x18e>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e58      	subs	r0, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	0099      	lsls	r1, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	fbb0 f3f3 	udiv	r3, r0, r3
 800276a:	3301      	adds	r3, #1
 800276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Init+0x196>
 800277e:	2301      	movs	r3, #1
 8002780:	e022      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10e      	bne.n	80027a8 <HAL_I2C_Init+0x1bc>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e58      	subs	r0, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	440b      	add	r3, r1
 8002798:	fbb0 f3f3 	udiv	r3, r0, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a6:	e00f      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	6809      	ldr	r1, [r1, #0]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6911      	ldr	r1, [r2, #16]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68d2      	ldr	r2, [r2, #12]
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	000186a0 	.word	0x000186a0
 8002864:	001e847f 	.word	0x001e847f
 8002868:	003d08ff 	.word	0x003d08ff
 800286c:	431bde83 	.word	0x431bde83
 8002870:	10624dd3 	.word	0x10624dd3

08002874 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	461a      	mov	r2, r3
 8002880:	460b      	mov	r3, r1
 8002882:	817b      	strh	r3, [r7, #10]
 8002884:	4613      	mov	r3, r2
 8002886:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff fbea 	bl	8002060 <HAL_GetTick>
 800288c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	f040 80e0 	bne.w	8002a5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2319      	movs	r3, #25
 80028a2:	2201      	movs	r2, #1
 80028a4:	4970      	ldr	r1, [pc, #448]	; (8002a68 <HAL_I2C_Master_Transmit+0x1f4>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fe22 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
 80028b4:	e0d3      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_I2C_Master_Transmit+0x50>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e0cc      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d007      	beq.n	80028ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2221      	movs	r2, #33	; 0x21
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2210      	movs	r2, #16
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	893a      	ldrh	r2, [r7, #8]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_I2C_Master_Transmit+0x1f8>)
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800292c:	8979      	ldrh	r1, [r7, #10]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fbf6 	bl	8003124 <I2C_MasterRequestWrite>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e08d      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002958:	e066      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	6a39      	ldr	r1, [r7, #32]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fe9c 	bl	800369c <I2C_WaitOnTXEFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2b04      	cmp	r3, #4
 8002970:	d107      	bne.n	8002982 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002980:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06b      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11b      	bne.n	80029fc <HAL_I2C_Master_Transmit+0x188>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	6a39      	ldr	r1, [r7, #32]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 fe8c 	bl	800371e <I2C_WaitOnBTFFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e01a      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d194      	bne.n	800295a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	00100002 	.word	0x00100002
 8002a6c:	ffff0000 	.word	0xffff0000

08002a70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	817b      	strh	r3, [r7, #10]
 8002a80:	4613      	mov	r3, r2
 8002a82:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a88:	f7ff faea 	bl	8002060 <HAL_GetTick>
 8002a8c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	f040 823f 	bne.w	8002f1a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2319      	movs	r3, #25
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	497f      	ldr	r1, [pc, #508]	; (8002ca4 <HAL_I2C_Master_Receive+0x234>)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fd22 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e232      	b.n	8002f1c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_I2C_Master_Receive+0x54>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e22b      	b.n	8002f1c <HAL_I2C_Master_Receive+0x4ac>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d007      	beq.n	8002aea <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2222      	movs	r2, #34	; 0x22
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2210      	movs	r2, #16
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	893a      	ldrh	r2, [r7, #8]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a5f      	ldr	r2, [pc, #380]	; (8002ca8 <HAL_I2C_Master_Receive+0x238>)
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b2c:	8979      	ldrh	r1, [r7, #10]
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fb78 	bl	8003228 <I2C_MasterRequestRead>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e1ec      	b.n	8002f1c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d113      	bne.n	8002b72 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e1c0      	b.n	8002ef4 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d11e      	bne.n	8002bb8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b8a:	b672      	cpsid	i
}
 8002b8c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bb4:	b662      	cpsie	i
}
 8002bb6:	e035      	b.n	8002c24 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d11e      	bne.n	8002bfe <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd0:	b672      	cpsid	i
}
 8002bd2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfa:	b662      	cpsie	i
}
 8002bfc:	e012      	b.n	8002c24 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c24:	e166      	b.n	8002ef4 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	f200 811f 	bhi.w	8002e6e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d123      	bne.n	8002c80 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fdaf 	bl	80037a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e167      	b.n	8002f1c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c7e:	e139      	b.n	8002ef4 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d152      	bne.n	8002d2e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4906      	ldr	r1, [pc, #24]	; (8002cac <HAL_I2C_Master_Receive+0x23c>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fc2c 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e13c      	b.n	8002f1c <HAL_I2C_Master_Receive+0x4ac>
 8002ca2:	bf00      	nop
 8002ca4:	00100002 	.word	0x00100002
 8002ca8:	ffff0000 	.word	0xffff0000
 8002cac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb0:	b672      	cpsid	i
}
 8002cb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cf6:	b662      	cpsie	i
}
 8002cf8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d2c:	e0e2      	b.n	8002ef4 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	2200      	movs	r2, #0
 8002d36:	497b      	ldr	r1, [pc, #492]	; (8002f24 <HAL_I2C_Master_Receive+0x4b4>)
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fbd9 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0e9      	b.n	8002f1c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d58:	b672      	cpsid	i
}
 8002d5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d8e:	4b66      	ldr	r3, [pc, #408]	; (8002f28 <HAL_I2C_Master_Receive+0x4b8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	08db      	lsrs	r3, r3, #3
 8002d94:	4a65      	ldr	r2, [pc, #404]	; (8002f2c <HAL_I2C_Master_Receive+0x4bc>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0a1a      	lsrs	r2, r3, #8
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00da      	lsls	r2, r3, #3
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d118      	bne.n	8002de6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002dd6:	b662      	cpsie	i
}
 8002dd8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e09a      	b.n	8002f1c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d1d9      	bne.n	8002da8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e36:	b662      	cpsie	i
}
 8002e38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e6c:	e042      	b.n	8002ef4 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fc94 	bl	80037a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e04c      	b.n	8002f1c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d118      	bne.n	8002ef4 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f47f ae94 	bne.w	8002c26 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3728      	adds	r7, #40	; 0x28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	00010004 	.word	0x00010004
 8002f28:	20000008 	.word	0x20000008
 8002f2c:	14f8b589 	.word	0x14f8b589

08002f30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	817b      	strh	r3, [r7, #10]
 8002f42:	460b      	mov	r3, r1
 8002f44:	813b      	strh	r3, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f4a:	f7ff f889 	bl	8002060 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	f040 80d9 	bne.w	8003110 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	2319      	movs	r3, #25
 8002f64:	2201      	movs	r2, #1
 8002f66:	496d      	ldr	r1, [pc, #436]	; (800311c <HAL_I2C_Mem_Write+0x1ec>)
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fac1 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0cc      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_I2C_Mem_Write+0x56>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e0c5      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d007      	beq.n	8002fac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2221      	movs	r2, #33	; 0x21
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2240      	movs	r2, #64	; 0x40
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4a4d      	ldr	r2, [pc, #308]	; (8003120 <HAL_I2C_Mem_Write+0x1f0>)
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fee:	88f8      	ldrh	r0, [r7, #6]
 8002ff0:	893a      	ldrh	r2, [r7, #8]
 8002ff2:	8979      	ldrh	r1, [r7, #10]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f9e0 	bl	80033c4 <I2C_RequestMemoryWrite>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d052      	beq.n	80030b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e081      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fb42 	bl	800369c <I2C_WaitOnTXEFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00d      	beq.n	800303a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b04      	cmp	r3, #4
 8003024:	d107      	bne.n	8003036 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003034:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06b      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b04      	cmp	r3, #4
 8003076:	d11b      	bne.n	80030b0 <HAL_I2C_Mem_Write+0x180>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1aa      	bne.n	800300e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fb2e 	bl	800371e <I2C_WaitOnBTFFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00d      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d107      	bne.n	80030e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e016      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	00100002 	.word	0x00100002
 8003120:	ffff0000 	.word	0xffff0000

08003124 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af02      	add	r7, sp, #8
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	460b      	mov	r3, r1
 8003132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d006      	beq.n	800314e <I2C_MasterRequestWrite+0x2a>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d003      	beq.n	800314e <I2C_MasterRequestWrite+0x2a>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800314c:	d108      	bne.n	8003160 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e00b      	b.n	8003178 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	2b12      	cmp	r3, #18
 8003166:	d107      	bne.n	8003178 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f9b3 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d103      	bne.n	80031a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e035      	b.n	8003218 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b4:	d108      	bne.n	80031c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031b6:	897b      	ldrh	r3, [r7, #10]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031c4:	611a      	str	r2, [r3, #16]
 80031c6:	e01b      	b.n	8003200 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031c8:	897b      	ldrh	r3, [r7, #10]
 80031ca:	11db      	asrs	r3, r3, #7
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f003 0306 	and.w	r3, r3, #6
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f063 030f 	orn	r3, r3, #15
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	490e      	ldr	r1, [pc, #56]	; (8003220 <I2C_MasterRequestWrite+0xfc>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f9d9 	bl	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e010      	b.n	8003218 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4907      	ldr	r1, [pc, #28]	; (8003224 <I2C_MasterRequestWrite+0x100>)
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f9c9 	bl	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	00010008 	.word	0x00010008
 8003224:	00010002 	.word	0x00010002

08003228 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	460b      	mov	r3, r1
 8003236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800324c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d006      	beq.n	8003262 <I2C_MasterRequestRead+0x3a>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d003      	beq.n	8003262 <I2C_MasterRequestRead+0x3a>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003260:	d108      	bne.n	8003274 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e00b      	b.n	800328c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	2b11      	cmp	r3, #17
 800327a:	d107      	bne.n	800328c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f929 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b2:	d103      	bne.n	80032bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e079      	b.n	80033b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c8:	d108      	bne.n	80032dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	611a      	str	r2, [r3, #16]
 80032da:	e05f      	b.n	800339c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032dc:	897b      	ldrh	r3, [r7, #10]
 80032de:	11db      	asrs	r3, r3, #7
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 0306 	and.w	r3, r3, #6
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f063 030f 	orn	r3, r3, #15
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4930      	ldr	r1, [pc, #192]	; (80033bc <I2C_MasterRequestRead+0x194>)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f94f 	bl	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e054      	b.n	80033b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4929      	ldr	r1, [pc, #164]	; (80033c0 <I2C_MasterRequestRead+0x198>)
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f93f 	bl	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e044      	b.n	80033b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f8c7 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003376:	d103      	bne.n	8003380 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e017      	b.n	80033b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003384:	897b      	ldrh	r3, [r7, #10]
 8003386:	11db      	asrs	r3, r3, #7
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f003 0306 	and.w	r3, r3, #6
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f063 030e 	orn	r3, r3, #14
 8003394:	b2da      	uxtb	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <I2C_MasterRequestRead+0x198>)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f8fb 	bl	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	00010008 	.word	0x00010008
 80033c0:	00010002 	.word	0x00010002

080033c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	4608      	mov	r0, r1
 80033ce:	4611      	mov	r1, r2
 80033d0:	461a      	mov	r2, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	817b      	strh	r3, [r7, #10]
 80033d6:	460b      	mov	r3, r1
 80033d8:	813b      	strh	r3, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f878 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00d      	beq.n	8003422 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003414:	d103      	bne.n	800341e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e05f      	b.n	80034e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003430:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	6a3a      	ldr	r2, [r7, #32]
 8003436:	492d      	ldr	r1, [pc, #180]	; (80034ec <I2C_RequestMemoryWrite+0x128>)
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f8b0 	bl	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e04c      	b.n	80034e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003460:	6a39      	ldr	r1, [r7, #32]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f91a 	bl	800369c <I2C_WaitOnTXEFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00d      	beq.n	800348a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	2b04      	cmp	r3, #4
 8003474:	d107      	bne.n	8003486 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003484:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e02b      	b.n	80034e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003490:	893b      	ldrh	r3, [r7, #8]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	611a      	str	r2, [r3, #16]
 800349a:	e021      	b.n	80034e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800349c:	893b      	ldrh	r3, [r7, #8]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ac:	6a39      	ldr	r1, [r7, #32]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f8f4 	bl	800369c <I2C_WaitOnTXEFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00d      	beq.n	80034d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d107      	bne.n	80034d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e005      	b.n	80034e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034d6:	893b      	ldrh	r3, [r7, #8]
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	00010002 	.word	0x00010002

080034f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	4613      	mov	r3, r2
 80034fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003500:	e025      	b.n	800354e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d021      	beq.n	800354e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350a:	f7fe fda9 	bl	8002060 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d116      	bne.n	800354e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e023      	b.n	8003596 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10d      	bne.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	43da      	mvns	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	4013      	ands	r3, r2
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	bf0c      	ite	eq
 800356a:	2301      	moveq	r3, #1
 800356c:	2300      	movne	r3, #0
 800356e:	b2db      	uxtb	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	e00c      	b.n	800358e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	429a      	cmp	r2, r3
 8003592:	d0b6      	beq.n	8003502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035ac:	e051      	b.n	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035bc:	d123      	bne.n	8003606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f043 0204 	orr.w	r2, r3, #4
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e046      	b.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d021      	beq.n	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe fd27 	bl	8002060 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d116      	bne.n	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f043 0220 	orr.w	r2, r3, #32
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e020      	b.n	8003694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d10c      	bne.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	43da      	mvns	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	b29b      	uxth	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	bf14      	ite	ne
 800366e:	2301      	movne	r3, #1
 8003670:	2300      	moveq	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	e00b      	b.n	800368e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf14      	ite	ne
 8003688:	2301      	movne	r3, #1
 800368a:	2300      	moveq	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d18d      	bne.n	80035ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a8:	e02d      	b.n	8003706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f8ce 	bl	800384c <I2C_IsAcknowledgeFailed>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e02d      	b.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d021      	beq.n	8003706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fe fccd 	bl	8002060 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d116      	bne.n	8003706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e007      	b.n	8003716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b80      	cmp	r3, #128	; 0x80
 8003712:	d1ca      	bne.n	80036aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800372a:	e02d      	b.n	8003788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f88d 	bl	800384c <I2C_IsAcknowledgeFailed>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e02d      	b.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d021      	beq.n	8003788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003744:	f7fe fc8c 	bl	8002060 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	d302      	bcc.n	800375a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d116      	bne.n	8003788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e007      	b.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b04      	cmp	r3, #4
 8003794:	d1ca      	bne.n	800372c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037ac:	e042      	b.n	8003834 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d119      	bne.n	80037f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0210 	mvn.w	r2, #16
 80037c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e029      	b.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f0:	f7fe fc36 	bl	8002060 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d302      	bcc.n	8003806 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d116      	bne.n	8003834 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e007      	b.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383e:	2b40      	cmp	r3, #64	; 0x40
 8003840:	d1b5      	bne.n	80037ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003862:	d11b      	bne.n	800389c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800386c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	f043 0204 	orr.w	r2, r3, #4
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e272      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8087 	beq.w	80039d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038c8:	4b92      	ldr	r3, [pc, #584]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d00c      	beq.n	80038ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038d4:	4b8f      	ldr	r3, [pc, #572]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d112      	bne.n	8003906 <HAL_RCC_OscConfig+0x5e>
 80038e0:	4b8c      	ldr	r3, [pc, #560]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ec:	d10b      	bne.n	8003906 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ee:	4b89      	ldr	r3, [pc, #548]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d06c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x12c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d168      	bne.n	80039d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e24c      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x76>
 8003910:	4b80      	ldr	r3, [pc, #512]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a7f      	ldr	r2, [pc, #508]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e02e      	b.n	800397c <HAL_RCC_OscConfig+0xd4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x98>
 8003926:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a7a      	ldr	r2, [pc, #488]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800392c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b78      	ldr	r3, [pc, #480]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a77      	ldr	r2, [pc, #476]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e01d      	b.n	800397c <HAL_RCC_OscConfig+0xd4>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0xbc>
 800394a:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a71      	ldr	r2, [pc, #452]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6e      	ldr	r2, [pc, #440]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0xd4>
 8003964:	4b6b      	ldr	r3, [pc, #428]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6a      	ldr	r2, [pc, #424]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b68      	ldr	r3, [pc, #416]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a67      	ldr	r2, [pc, #412]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe fb6c 	bl	8002060 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7fe fb68 	bl	8002060 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e200      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b5d      	ldr	r3, [pc, #372]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0xe4>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fb58 	bl	8002060 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fe fb54 	bl	8002060 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1ec      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x10c>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039e2:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039ee:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d11c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x18c>
 80039fa:	4b46      	ldr	r3, [pc, #280]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x176>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1c0      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4939      	ldr	r1, [pc, #228]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e03a      	b.n	8003aaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a42:	f7fe fb0d 	bl	8002060 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7fe fb09 	bl	8002060 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e1a1      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4927      	ldr	r1, [pc, #156]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe faec 	bl	8002060 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fe fae8 	bl	8002060 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e180      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d03a      	beq.n	8003b2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d019      	beq.n	8003af2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <HAL_RCC_OscConfig+0x274>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac4:	f7fe facc 	bl	8002060 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003acc:	f7fe fac8 	bl	8002060 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e160      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003aea:	2001      	movs	r0, #1
 8003aec:	f000 fac4 	bl	8004078 <RCC_Delay>
 8003af0:	e01c      	b.n	8003b2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RCC_OscConfig+0x274>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af8:	f7fe fab2 	bl	8002060 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afe:	e00f      	b.n	8003b20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fe faae 	bl	8002060 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d908      	bls.n	8003b20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e146      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	42420000 	.word	0x42420000
 8003b1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	4b92      	ldr	r3, [pc, #584]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e9      	bne.n	8003b00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80a6 	beq.w	8003c86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3e:	4b8b      	ldr	r3, [pc, #556]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10d      	bne.n	8003b66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	4b88      	ldr	r3, [pc, #544]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4a87      	ldr	r2, [pc, #540]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b54:	61d3      	str	r3, [r2, #28]
 8003b56:	4b85      	ldr	r3, [pc, #532]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b66:	4b82      	ldr	r3, [pc, #520]	; (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d118      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b72:	4b7f      	ldr	r3, [pc, #508]	; (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7e      	ldr	r2, [pc, #504]	; (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7e:	f7fe fa6f 	bl	8002060 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b86:	f7fe fa6b 	bl	8002060 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b64      	cmp	r3, #100	; 0x64
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e103      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	4b75      	ldr	r3, [pc, #468]	; (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d106      	bne.n	8003bba <HAL_RCC_OscConfig+0x312>
 8003bac:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4a6e      	ldr	r2, [pc, #440]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6213      	str	r3, [r2, #32]
 8003bb8:	e02d      	b.n	8003c16 <HAL_RCC_OscConfig+0x36e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x334>
 8003bc2:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4a69      	ldr	r2, [pc, #420]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6213      	str	r3, [r2, #32]
 8003bce:	4b67      	ldr	r3, [pc, #412]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	4a66      	ldr	r2, [pc, #408]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	6213      	str	r3, [r2, #32]
 8003bda:	e01c      	b.n	8003c16 <HAL_RCC_OscConfig+0x36e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b05      	cmp	r3, #5
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCC_OscConfig+0x356>
 8003be4:	4b61      	ldr	r3, [pc, #388]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4a60      	ldr	r2, [pc, #384]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	f043 0304 	orr.w	r3, r3, #4
 8003bee:	6213      	str	r3, [r2, #32]
 8003bf0:	4b5e      	ldr	r3, [pc, #376]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4a5d      	ldr	r2, [pc, #372]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6213      	str	r3, [r2, #32]
 8003bfc:	e00b      	b.n	8003c16 <HAL_RCC_OscConfig+0x36e>
 8003bfe:	4b5b      	ldr	r3, [pc, #364]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4a5a      	ldr	r2, [pc, #360]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	6213      	str	r3, [r2, #32]
 8003c0a:	4b58      	ldr	r3, [pc, #352]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4a57      	ldr	r2, [pc, #348]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	f023 0304 	bic.w	r3, r3, #4
 8003c14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d015      	beq.n	8003c4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fa1f 	bl	8002060 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7fe fa1b 	bl	8002060 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e0b1      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ee      	beq.n	8003c26 <HAL_RCC_OscConfig+0x37e>
 8003c48:	e014      	b.n	8003c74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fa09 	bl	8002060 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fe fa05 	bl	8002060 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e09b      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c68:	4b40      	ldr	r3, [pc, #256]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ee      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d105      	bne.n	8003c86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7a:	4b3c      	ldr	r3, [pc, #240]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	4a3b      	ldr	r2, [pc, #236]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8087 	beq.w	8003d9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c90:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d061      	beq.n	8003d60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d146      	bne.n	8003d32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca4:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <HAL_RCC_OscConfig+0x4cc>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003caa:	f7fe f9d9 	bl	8002060 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb2:	f7fe f9d5 	bl	8002060 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e06d      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc4:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd8:	d108      	bne.n	8003cec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	4921      	ldr	r1, [pc, #132]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cec:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a19      	ldr	r1, [r3, #32]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	491b      	ldr	r1, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7fe f9a9 	bl	8002060 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fe f9a5 	bl	8002060 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e03d      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x46a>
 8003d30:	e035      	b.n	8003d9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <HAL_RCC_OscConfig+0x4cc>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe f992 	bl	8002060 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fe f98e 	bl	8002060 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e026      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x498>
 8003d5e:	e01e      	b.n	8003d9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d107      	bne.n	8003d78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e019      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40007000 	.word	0x40007000
 8003d74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_OscConfig+0x500>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d106      	bne.n	8003d9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000

08003dac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0d0      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d910      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b67      	ldr	r3, [pc, #412]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 0207 	bic.w	r2, r3, #7
 8003dd6:	4965      	ldr	r1, [pc, #404]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b63      	ldr	r3, [pc, #396]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0b8      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e08:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e20:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a52      	ldr	r2, [pc, #328]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	494d      	ldr	r1, [pc, #308]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d040      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d115      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e07f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e073      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b3d      	ldr	r3, [pc, #244]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e06b      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4936      	ldr	r1, [pc, #216]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e9c:	f7fe f8e0 	bl	8002060 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7fe f8dc 	bl	8002060 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e053      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d210      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 0207 	bic.w	r2, r3, #7
 8003ee2:	4922      	ldr	r1, [pc, #136]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4916      	ldr	r1, [pc, #88]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	490e      	ldr	r1, [pc, #56]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f3a:	f000 f821 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	490a      	ldr	r1, [pc, #40]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1cc>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1d0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe f83e 	bl	8001fdc <HAL_InitTick>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40022000 	.word	0x40022000
 8003f70:	40021000 	.word	0x40021000
 8003f74:	080077ac 	.word	0x080077ac
 8003f78:	20000008 	.word	0x20000008
 8003f7c:	2000000c 	.word	0x2000000c

08003f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	b490      	push	{r4, r7}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f86:	4b29      	ldr	r3, [pc, #164]	; (800402c <HAL_RCC_GetSysClockFreq+0xac>)
 8003f88:	1d3c      	adds	r4, r7, #4
 8003f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f90:	f240 2301 	movw	r3, #513	; 0x201
 8003f94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003faa:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d002      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fba:	2b08      	cmp	r3, #8
 8003fbc:	d003      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x46>
 8003fbe:	e02b      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fc0:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fc2:	623b      	str	r3, [r7, #32]
      break;
 8003fc4:	e02b      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	0c9b      	lsrs	r3, r3, #18
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	3328      	adds	r3, #40	; 0x28
 8003fd0:	443b      	add	r3, r7
 8003fd2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fd6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d012      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	0c5b      	lsrs	r3, r3, #17
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	3328      	adds	r3, #40	; 0x28
 8003fee:	443b      	add	r3, r7
 8003ff0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ff4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	4a0e      	ldr	r2, [pc, #56]	; (8004034 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ffa:	fb03 f202 	mul.w	r2, r3, r2
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
 8004006:	e004      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4a0b      	ldr	r2, [pc, #44]	; (8004038 <HAL_RCC_GetSysClockFreq+0xb8>)
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	623b      	str	r3, [r7, #32]
      break;
 8004016:	e002      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <HAL_RCC_GetSysClockFreq+0xb4>)
 800401a:	623b      	str	r3, [r7, #32]
      break;
 800401c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800401e:	6a3b      	ldr	r3, [r7, #32]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3728      	adds	r7, #40	; 0x28
 8004024:	46bd      	mov	sp, r7
 8004026:	bc90      	pop	{r4, r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	08007028 	.word	0x08007028
 8004030:	40021000 	.word	0x40021000
 8004034:	007a1200 	.word	0x007a1200
 8004038:	003d0900 	.word	0x003d0900

0800403c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004040:	4b02      	ldr	r3, [pc, #8]	; (800404c <HAL_RCC_GetHCLKFreq+0x10>)
 8004042:	681b      	ldr	r3, [r3, #0]
}
 8004044:	4618      	mov	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr
 800404c:	20000008 	.word	0x20000008

08004050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004054:	f7ff fff2 	bl	800403c <HAL_RCC_GetHCLKFreq>
 8004058:	4602      	mov	r2, r0
 800405a:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	4903      	ldr	r1, [pc, #12]	; (8004074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004066:	5ccb      	ldrb	r3, [r1, r3]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800406c:	4618      	mov	r0, r3
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40021000 	.word	0x40021000
 8004074:	080077bc 	.word	0x080077bc

08004078 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <RCC_Delay+0x34>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <RCC_Delay+0x38>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	0a5b      	lsrs	r3, r3, #9
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004094:	bf00      	nop
  }
  while (Delay --);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	1e5a      	subs	r2, r3, #1
 800409a:	60fa      	str	r2, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f9      	bne.n	8004094 <RCC_Delay+0x1c>
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	20000008 	.word	0x20000008
 80040b0:	10624dd3 	.word	0x10624dd3

080040b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e076      	b.n	80041b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d108      	bne.n	80040e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d6:	d009      	beq.n	80040ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	61da      	str	r2, [r3, #28]
 80040de:	e005      	b.n	80040ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd fdf4 	bl	8001cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004122:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	ea42 0103 	orr.w	r1, r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	0c1a      	lsrs	r2, r3, #16
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f002 0204 	and.w	r2, r2, #4
 8004192:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <__errno>:
 80041bc:	4b01      	ldr	r3, [pc, #4]	; (80041c4 <__errno+0x8>)
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000014 	.word	0x20000014

080041c8 <__libc_init_array>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	2600      	movs	r6, #0
 80041cc:	4d0c      	ldr	r5, [pc, #48]	; (8004200 <__libc_init_array+0x38>)
 80041ce:	4c0d      	ldr	r4, [pc, #52]	; (8004204 <__libc_init_array+0x3c>)
 80041d0:	1b64      	subs	r4, r4, r5
 80041d2:	10a4      	asrs	r4, r4, #2
 80041d4:	42a6      	cmp	r6, r4
 80041d6:	d109      	bne.n	80041ec <__libc_init_array+0x24>
 80041d8:	f002 fefc 	bl	8006fd4 <_init>
 80041dc:	2600      	movs	r6, #0
 80041de:	4d0a      	ldr	r5, [pc, #40]	; (8004208 <__libc_init_array+0x40>)
 80041e0:	4c0a      	ldr	r4, [pc, #40]	; (800420c <__libc_init_array+0x44>)
 80041e2:	1b64      	subs	r4, r4, r5
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	42a6      	cmp	r6, r4
 80041e8:	d105      	bne.n	80041f6 <__libc_init_array+0x2e>
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f0:	4798      	blx	r3
 80041f2:	3601      	adds	r6, #1
 80041f4:	e7ee      	b.n	80041d4 <__libc_init_array+0xc>
 80041f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fa:	4798      	blx	r3
 80041fc:	3601      	adds	r6, #1
 80041fe:	e7f2      	b.n	80041e6 <__libc_init_array+0x1e>
 8004200:	08007b9c 	.word	0x08007b9c
 8004204:	08007b9c 	.word	0x08007b9c
 8004208:	08007b9c 	.word	0x08007b9c
 800420c:	08007ba0 	.word	0x08007ba0

08004210 <memcpy>:
 8004210:	440a      	add	r2, r1
 8004212:	4291      	cmp	r1, r2
 8004214:	f100 33ff 	add.w	r3, r0, #4294967295
 8004218:	d100      	bne.n	800421c <memcpy+0xc>
 800421a:	4770      	bx	lr
 800421c:	b510      	push	{r4, lr}
 800421e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004222:	4291      	cmp	r1, r2
 8004224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004228:	d1f9      	bne.n	800421e <memcpy+0xe>
 800422a:	bd10      	pop	{r4, pc}

0800422c <memset>:
 800422c:	4603      	mov	r3, r0
 800422e:	4402      	add	r2, r0
 8004230:	4293      	cmp	r3, r2
 8004232:	d100      	bne.n	8004236 <memset+0xa>
 8004234:	4770      	bx	lr
 8004236:	f803 1b01 	strb.w	r1, [r3], #1
 800423a:	e7f9      	b.n	8004230 <memset+0x4>

0800423c <__cvt>:
 800423c:	2b00      	cmp	r3, #0
 800423e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004242:	461f      	mov	r7, r3
 8004244:	bfbb      	ittet	lt
 8004246:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800424a:	461f      	movlt	r7, r3
 800424c:	2300      	movge	r3, #0
 800424e:	232d      	movlt	r3, #45	; 0x2d
 8004250:	b088      	sub	sp, #32
 8004252:	4614      	mov	r4, r2
 8004254:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004256:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004258:	7013      	strb	r3, [r2, #0]
 800425a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800425c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004260:	f023 0820 	bic.w	r8, r3, #32
 8004264:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004268:	d005      	beq.n	8004276 <__cvt+0x3a>
 800426a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800426e:	d100      	bne.n	8004272 <__cvt+0x36>
 8004270:	3501      	adds	r5, #1
 8004272:	2302      	movs	r3, #2
 8004274:	e000      	b.n	8004278 <__cvt+0x3c>
 8004276:	2303      	movs	r3, #3
 8004278:	aa07      	add	r2, sp, #28
 800427a:	9204      	str	r2, [sp, #16]
 800427c:	aa06      	add	r2, sp, #24
 800427e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004282:	e9cd 3500 	strd	r3, r5, [sp]
 8004286:	4622      	mov	r2, r4
 8004288:	463b      	mov	r3, r7
 800428a:	f000 fce5 	bl	8004c58 <_dtoa_r>
 800428e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004292:	4606      	mov	r6, r0
 8004294:	d102      	bne.n	800429c <__cvt+0x60>
 8004296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004298:	07db      	lsls	r3, r3, #31
 800429a:	d522      	bpl.n	80042e2 <__cvt+0xa6>
 800429c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042a0:	eb06 0905 	add.w	r9, r6, r5
 80042a4:	d110      	bne.n	80042c8 <__cvt+0x8c>
 80042a6:	7833      	ldrb	r3, [r6, #0]
 80042a8:	2b30      	cmp	r3, #48	; 0x30
 80042aa:	d10a      	bne.n	80042c2 <__cvt+0x86>
 80042ac:	2200      	movs	r2, #0
 80042ae:	2300      	movs	r3, #0
 80042b0:	4620      	mov	r0, r4
 80042b2:	4639      	mov	r1, r7
 80042b4:	f7fc fb78 	bl	80009a8 <__aeabi_dcmpeq>
 80042b8:	b918      	cbnz	r0, 80042c2 <__cvt+0x86>
 80042ba:	f1c5 0501 	rsb	r5, r5, #1
 80042be:	f8ca 5000 	str.w	r5, [sl]
 80042c2:	f8da 3000 	ldr.w	r3, [sl]
 80042c6:	4499      	add	r9, r3
 80042c8:	2200      	movs	r2, #0
 80042ca:	2300      	movs	r3, #0
 80042cc:	4620      	mov	r0, r4
 80042ce:	4639      	mov	r1, r7
 80042d0:	f7fc fb6a 	bl	80009a8 <__aeabi_dcmpeq>
 80042d4:	b108      	cbz	r0, 80042da <__cvt+0x9e>
 80042d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80042da:	2230      	movs	r2, #48	; 0x30
 80042dc:	9b07      	ldr	r3, [sp, #28]
 80042de:	454b      	cmp	r3, r9
 80042e0:	d307      	bcc.n	80042f2 <__cvt+0xb6>
 80042e2:	4630      	mov	r0, r6
 80042e4:	9b07      	ldr	r3, [sp, #28]
 80042e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042e8:	1b9b      	subs	r3, r3, r6
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	b008      	add	sp, #32
 80042ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f2:	1c59      	adds	r1, r3, #1
 80042f4:	9107      	str	r1, [sp, #28]
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e7f0      	b.n	80042dc <__cvt+0xa0>

080042fa <__exponent>:
 80042fa:	4603      	mov	r3, r0
 80042fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042fe:	2900      	cmp	r1, #0
 8004300:	f803 2b02 	strb.w	r2, [r3], #2
 8004304:	bfb6      	itet	lt
 8004306:	222d      	movlt	r2, #45	; 0x2d
 8004308:	222b      	movge	r2, #43	; 0x2b
 800430a:	4249      	neglt	r1, r1
 800430c:	2909      	cmp	r1, #9
 800430e:	7042      	strb	r2, [r0, #1]
 8004310:	dd2b      	ble.n	800436a <__exponent+0x70>
 8004312:	f10d 0407 	add.w	r4, sp, #7
 8004316:	46a4      	mov	ip, r4
 8004318:	270a      	movs	r7, #10
 800431a:	fb91 f6f7 	sdiv	r6, r1, r7
 800431e:	460a      	mov	r2, r1
 8004320:	46a6      	mov	lr, r4
 8004322:	fb07 1516 	mls	r5, r7, r6, r1
 8004326:	2a63      	cmp	r2, #99	; 0x63
 8004328:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800432c:	4631      	mov	r1, r6
 800432e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004332:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004336:	dcf0      	bgt.n	800431a <__exponent+0x20>
 8004338:	3130      	adds	r1, #48	; 0x30
 800433a:	f1ae 0502 	sub.w	r5, lr, #2
 800433e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004342:	4629      	mov	r1, r5
 8004344:	1c44      	adds	r4, r0, #1
 8004346:	4561      	cmp	r1, ip
 8004348:	d30a      	bcc.n	8004360 <__exponent+0x66>
 800434a:	f10d 0209 	add.w	r2, sp, #9
 800434e:	eba2 020e 	sub.w	r2, r2, lr
 8004352:	4565      	cmp	r5, ip
 8004354:	bf88      	it	hi
 8004356:	2200      	movhi	r2, #0
 8004358:	4413      	add	r3, r2
 800435a:	1a18      	subs	r0, r3, r0
 800435c:	b003      	add	sp, #12
 800435e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004360:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004364:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004368:	e7ed      	b.n	8004346 <__exponent+0x4c>
 800436a:	2330      	movs	r3, #48	; 0x30
 800436c:	3130      	adds	r1, #48	; 0x30
 800436e:	7083      	strb	r3, [r0, #2]
 8004370:	70c1      	strb	r1, [r0, #3]
 8004372:	1d03      	adds	r3, r0, #4
 8004374:	e7f1      	b.n	800435a <__exponent+0x60>
	...

08004378 <_printf_float>:
 8004378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437c:	b091      	sub	sp, #68	; 0x44
 800437e:	460c      	mov	r4, r1
 8004380:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004384:	4616      	mov	r6, r2
 8004386:	461f      	mov	r7, r3
 8004388:	4605      	mov	r5, r0
 800438a:	f001 fa53 	bl	8005834 <_localeconv_r>
 800438e:	6803      	ldr	r3, [r0, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	9309      	str	r3, [sp, #36]	; 0x24
 8004394:	f7fb fedc 	bl	8000150 <strlen>
 8004398:	2300      	movs	r3, #0
 800439a:	930e      	str	r3, [sp, #56]	; 0x38
 800439c:	f8d8 3000 	ldr.w	r3, [r8]
 80043a0:	900a      	str	r0, [sp, #40]	; 0x28
 80043a2:	3307      	adds	r3, #7
 80043a4:	f023 0307 	bic.w	r3, r3, #7
 80043a8:	f103 0208 	add.w	r2, r3, #8
 80043ac:	f894 9018 	ldrb.w	r9, [r4, #24]
 80043b0:	f8d4 b000 	ldr.w	fp, [r4]
 80043b4:	f8c8 2000 	str.w	r2, [r8]
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043c0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80043c4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80043c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80043ca:	f04f 32ff 	mov.w	r2, #4294967295
 80043ce:	4640      	mov	r0, r8
 80043d0:	4b9c      	ldr	r3, [pc, #624]	; (8004644 <_printf_float+0x2cc>)
 80043d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043d4:	f7fc fb1a 	bl	8000a0c <__aeabi_dcmpun>
 80043d8:	bb70      	cbnz	r0, 8004438 <_printf_float+0xc0>
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
 80043de:	4640      	mov	r0, r8
 80043e0:	4b98      	ldr	r3, [pc, #608]	; (8004644 <_printf_float+0x2cc>)
 80043e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043e4:	f7fc faf4 	bl	80009d0 <__aeabi_dcmple>
 80043e8:	bb30      	cbnz	r0, 8004438 <_printf_float+0xc0>
 80043ea:	2200      	movs	r2, #0
 80043ec:	2300      	movs	r3, #0
 80043ee:	4640      	mov	r0, r8
 80043f0:	4651      	mov	r1, sl
 80043f2:	f7fc fae3 	bl	80009bc <__aeabi_dcmplt>
 80043f6:	b110      	cbz	r0, 80043fe <_printf_float+0x86>
 80043f8:	232d      	movs	r3, #45	; 0x2d
 80043fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043fe:	4b92      	ldr	r3, [pc, #584]	; (8004648 <_printf_float+0x2d0>)
 8004400:	4892      	ldr	r0, [pc, #584]	; (800464c <_printf_float+0x2d4>)
 8004402:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004406:	bf94      	ite	ls
 8004408:	4698      	movls	r8, r3
 800440a:	4680      	movhi	r8, r0
 800440c:	2303      	movs	r3, #3
 800440e:	f04f 0a00 	mov.w	sl, #0
 8004412:	6123      	str	r3, [r4, #16]
 8004414:	f02b 0304 	bic.w	r3, fp, #4
 8004418:	6023      	str	r3, [r4, #0]
 800441a:	4633      	mov	r3, r6
 800441c:	4621      	mov	r1, r4
 800441e:	4628      	mov	r0, r5
 8004420:	9700      	str	r7, [sp, #0]
 8004422:	aa0f      	add	r2, sp, #60	; 0x3c
 8004424:	f000 f9d4 	bl	80047d0 <_printf_common>
 8004428:	3001      	adds	r0, #1
 800442a:	f040 8090 	bne.w	800454e <_printf_float+0x1d6>
 800442e:	f04f 30ff 	mov.w	r0, #4294967295
 8004432:	b011      	add	sp, #68	; 0x44
 8004434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004438:	4642      	mov	r2, r8
 800443a:	4653      	mov	r3, sl
 800443c:	4640      	mov	r0, r8
 800443e:	4651      	mov	r1, sl
 8004440:	f7fc fae4 	bl	8000a0c <__aeabi_dcmpun>
 8004444:	b148      	cbz	r0, 800445a <_printf_float+0xe2>
 8004446:	f1ba 0f00 	cmp.w	sl, #0
 800444a:	bfb8      	it	lt
 800444c:	232d      	movlt	r3, #45	; 0x2d
 800444e:	4880      	ldr	r0, [pc, #512]	; (8004650 <_printf_float+0x2d8>)
 8004450:	bfb8      	it	lt
 8004452:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004456:	4b7f      	ldr	r3, [pc, #508]	; (8004654 <_printf_float+0x2dc>)
 8004458:	e7d3      	b.n	8004402 <_printf_float+0x8a>
 800445a:	6863      	ldr	r3, [r4, #4]
 800445c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	d142      	bne.n	80044ea <_printf_float+0x172>
 8004464:	2306      	movs	r3, #6
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	9206      	str	r2, [sp, #24]
 800446c:	aa0e      	add	r2, sp, #56	; 0x38
 800446e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004472:	aa0d      	add	r2, sp, #52	; 0x34
 8004474:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004478:	9203      	str	r2, [sp, #12]
 800447a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800447e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	6863      	ldr	r3, [r4, #4]
 8004486:	4642      	mov	r2, r8
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	4628      	mov	r0, r5
 800448c:	4653      	mov	r3, sl
 800448e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004490:	f7ff fed4 	bl	800423c <__cvt>
 8004494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004496:	4680      	mov	r8, r0
 8004498:	2947      	cmp	r1, #71	; 0x47
 800449a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800449c:	d108      	bne.n	80044b0 <_printf_float+0x138>
 800449e:	1cc8      	adds	r0, r1, #3
 80044a0:	db02      	blt.n	80044a8 <_printf_float+0x130>
 80044a2:	6863      	ldr	r3, [r4, #4]
 80044a4:	4299      	cmp	r1, r3
 80044a6:	dd40      	ble.n	800452a <_printf_float+0x1b2>
 80044a8:	f1a9 0902 	sub.w	r9, r9, #2
 80044ac:	fa5f f989 	uxtb.w	r9, r9
 80044b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044b4:	d81f      	bhi.n	80044f6 <_printf_float+0x17e>
 80044b6:	464a      	mov	r2, r9
 80044b8:	3901      	subs	r1, #1
 80044ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044be:	910d      	str	r1, [sp, #52]	; 0x34
 80044c0:	f7ff ff1b 	bl	80042fa <__exponent>
 80044c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044c6:	4682      	mov	sl, r0
 80044c8:	1813      	adds	r3, r2, r0
 80044ca:	2a01      	cmp	r2, #1
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	dc02      	bgt.n	80044d6 <_printf_float+0x15e>
 80044d0:	6822      	ldr	r2, [r4, #0]
 80044d2:	07d2      	lsls	r2, r2, #31
 80044d4:	d501      	bpl.n	80044da <_printf_float+0x162>
 80044d6:	3301      	adds	r3, #1
 80044d8:	6123      	str	r3, [r4, #16]
 80044da:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d09b      	beq.n	800441a <_printf_float+0xa2>
 80044e2:	232d      	movs	r3, #45	; 0x2d
 80044e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e8:	e797      	b.n	800441a <_printf_float+0xa2>
 80044ea:	2947      	cmp	r1, #71	; 0x47
 80044ec:	d1bc      	bne.n	8004468 <_printf_float+0xf0>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1ba      	bne.n	8004468 <_printf_float+0xf0>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e7b7      	b.n	8004466 <_printf_float+0xee>
 80044f6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80044fa:	d118      	bne.n	800452e <_printf_float+0x1b6>
 80044fc:	2900      	cmp	r1, #0
 80044fe:	6863      	ldr	r3, [r4, #4]
 8004500:	dd0b      	ble.n	800451a <_printf_float+0x1a2>
 8004502:	6121      	str	r1, [r4, #16]
 8004504:	b913      	cbnz	r3, 800450c <_printf_float+0x194>
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	07d0      	lsls	r0, r2, #31
 800450a:	d502      	bpl.n	8004512 <_printf_float+0x19a>
 800450c:	3301      	adds	r3, #1
 800450e:	440b      	add	r3, r1
 8004510:	6123      	str	r3, [r4, #16]
 8004512:	f04f 0a00 	mov.w	sl, #0
 8004516:	65a1      	str	r1, [r4, #88]	; 0x58
 8004518:	e7df      	b.n	80044da <_printf_float+0x162>
 800451a:	b913      	cbnz	r3, 8004522 <_printf_float+0x1aa>
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	07d2      	lsls	r2, r2, #31
 8004520:	d501      	bpl.n	8004526 <_printf_float+0x1ae>
 8004522:	3302      	adds	r3, #2
 8004524:	e7f4      	b.n	8004510 <_printf_float+0x198>
 8004526:	2301      	movs	r3, #1
 8004528:	e7f2      	b.n	8004510 <_printf_float+0x198>
 800452a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800452e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004530:	4299      	cmp	r1, r3
 8004532:	db05      	blt.n	8004540 <_printf_float+0x1c8>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	6121      	str	r1, [r4, #16]
 8004538:	07d8      	lsls	r0, r3, #31
 800453a:	d5ea      	bpl.n	8004512 <_printf_float+0x19a>
 800453c:	1c4b      	adds	r3, r1, #1
 800453e:	e7e7      	b.n	8004510 <_printf_float+0x198>
 8004540:	2900      	cmp	r1, #0
 8004542:	bfcc      	ite	gt
 8004544:	2201      	movgt	r2, #1
 8004546:	f1c1 0202 	rsble	r2, r1, #2
 800454a:	4413      	add	r3, r2
 800454c:	e7e0      	b.n	8004510 <_printf_float+0x198>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	055a      	lsls	r2, r3, #21
 8004552:	d407      	bmi.n	8004564 <_printf_float+0x1ec>
 8004554:	6923      	ldr	r3, [r4, #16]
 8004556:	4642      	mov	r2, r8
 8004558:	4631      	mov	r1, r6
 800455a:	4628      	mov	r0, r5
 800455c:	47b8      	blx	r7
 800455e:	3001      	adds	r0, #1
 8004560:	d12b      	bne.n	80045ba <_printf_float+0x242>
 8004562:	e764      	b.n	800442e <_printf_float+0xb6>
 8004564:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004568:	f240 80dd 	bls.w	8004726 <_printf_float+0x3ae>
 800456c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004570:	2200      	movs	r2, #0
 8004572:	2300      	movs	r3, #0
 8004574:	f7fc fa18 	bl	80009a8 <__aeabi_dcmpeq>
 8004578:	2800      	cmp	r0, #0
 800457a:	d033      	beq.n	80045e4 <_printf_float+0x26c>
 800457c:	2301      	movs	r3, #1
 800457e:	4631      	mov	r1, r6
 8004580:	4628      	mov	r0, r5
 8004582:	4a35      	ldr	r2, [pc, #212]	; (8004658 <_printf_float+0x2e0>)
 8004584:	47b8      	blx	r7
 8004586:	3001      	adds	r0, #1
 8004588:	f43f af51 	beq.w	800442e <_printf_float+0xb6>
 800458c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004590:	429a      	cmp	r2, r3
 8004592:	db02      	blt.n	800459a <_printf_float+0x222>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	07d8      	lsls	r0, r3, #31
 8004598:	d50f      	bpl.n	80045ba <_printf_float+0x242>
 800459a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800459e:	4631      	mov	r1, r6
 80045a0:	4628      	mov	r0, r5
 80045a2:	47b8      	blx	r7
 80045a4:	3001      	adds	r0, #1
 80045a6:	f43f af42 	beq.w	800442e <_printf_float+0xb6>
 80045aa:	f04f 0800 	mov.w	r8, #0
 80045ae:	f104 091a 	add.w	r9, r4, #26
 80045b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045b4:	3b01      	subs	r3, #1
 80045b6:	4543      	cmp	r3, r8
 80045b8:	dc09      	bgt.n	80045ce <_printf_float+0x256>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	079b      	lsls	r3, r3, #30
 80045be:	f100 8102 	bmi.w	80047c6 <_printf_float+0x44e>
 80045c2:	68e0      	ldr	r0, [r4, #12]
 80045c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045c6:	4298      	cmp	r0, r3
 80045c8:	bfb8      	it	lt
 80045ca:	4618      	movlt	r0, r3
 80045cc:	e731      	b.n	8004432 <_printf_float+0xba>
 80045ce:	2301      	movs	r3, #1
 80045d0:	464a      	mov	r2, r9
 80045d2:	4631      	mov	r1, r6
 80045d4:	4628      	mov	r0, r5
 80045d6:	47b8      	blx	r7
 80045d8:	3001      	adds	r0, #1
 80045da:	f43f af28 	beq.w	800442e <_printf_float+0xb6>
 80045de:	f108 0801 	add.w	r8, r8, #1
 80045e2:	e7e6      	b.n	80045b2 <_printf_float+0x23a>
 80045e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	dc38      	bgt.n	800465c <_printf_float+0x2e4>
 80045ea:	2301      	movs	r3, #1
 80045ec:	4631      	mov	r1, r6
 80045ee:	4628      	mov	r0, r5
 80045f0:	4a19      	ldr	r2, [pc, #100]	; (8004658 <_printf_float+0x2e0>)
 80045f2:	47b8      	blx	r7
 80045f4:	3001      	adds	r0, #1
 80045f6:	f43f af1a 	beq.w	800442e <_printf_float+0xb6>
 80045fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045fe:	4313      	orrs	r3, r2
 8004600:	d102      	bne.n	8004608 <_printf_float+0x290>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	07d9      	lsls	r1, r3, #31
 8004606:	d5d8      	bpl.n	80045ba <_printf_float+0x242>
 8004608:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800460c:	4631      	mov	r1, r6
 800460e:	4628      	mov	r0, r5
 8004610:	47b8      	blx	r7
 8004612:	3001      	adds	r0, #1
 8004614:	f43f af0b 	beq.w	800442e <_printf_float+0xb6>
 8004618:	f04f 0900 	mov.w	r9, #0
 800461c:	f104 0a1a 	add.w	sl, r4, #26
 8004620:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004622:	425b      	negs	r3, r3
 8004624:	454b      	cmp	r3, r9
 8004626:	dc01      	bgt.n	800462c <_printf_float+0x2b4>
 8004628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800462a:	e794      	b.n	8004556 <_printf_float+0x1de>
 800462c:	2301      	movs	r3, #1
 800462e:	4652      	mov	r2, sl
 8004630:	4631      	mov	r1, r6
 8004632:	4628      	mov	r0, r5
 8004634:	47b8      	blx	r7
 8004636:	3001      	adds	r0, #1
 8004638:	f43f aef9 	beq.w	800442e <_printf_float+0xb6>
 800463c:	f109 0901 	add.w	r9, r9, #1
 8004640:	e7ee      	b.n	8004620 <_printf_float+0x2a8>
 8004642:	bf00      	nop
 8004644:	7fefffff 	.word	0x7fefffff
 8004648:	080077c8 	.word	0x080077c8
 800464c:	080077cc 	.word	0x080077cc
 8004650:	080077d4 	.word	0x080077d4
 8004654:	080077d0 	.word	0x080077d0
 8004658:	080077d8 	.word	0x080077d8
 800465c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800465e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004660:	429a      	cmp	r2, r3
 8004662:	bfa8      	it	ge
 8004664:	461a      	movge	r2, r3
 8004666:	2a00      	cmp	r2, #0
 8004668:	4691      	mov	r9, r2
 800466a:	dc37      	bgt.n	80046dc <_printf_float+0x364>
 800466c:	f04f 0b00 	mov.w	fp, #0
 8004670:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004674:	f104 021a 	add.w	r2, r4, #26
 8004678:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800467c:	ebaa 0309 	sub.w	r3, sl, r9
 8004680:	455b      	cmp	r3, fp
 8004682:	dc33      	bgt.n	80046ec <_printf_float+0x374>
 8004684:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004688:	429a      	cmp	r2, r3
 800468a:	db3b      	blt.n	8004704 <_printf_float+0x38c>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	07da      	lsls	r2, r3, #31
 8004690:	d438      	bmi.n	8004704 <_printf_float+0x38c>
 8004692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004694:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004696:	eba3 020a 	sub.w	r2, r3, sl
 800469a:	eba3 0901 	sub.w	r9, r3, r1
 800469e:	4591      	cmp	r9, r2
 80046a0:	bfa8      	it	ge
 80046a2:	4691      	movge	r9, r2
 80046a4:	f1b9 0f00 	cmp.w	r9, #0
 80046a8:	dc34      	bgt.n	8004714 <_printf_float+0x39c>
 80046aa:	f04f 0800 	mov.w	r8, #0
 80046ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046b2:	f104 0a1a 	add.w	sl, r4, #26
 80046b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	eba3 0309 	sub.w	r3, r3, r9
 80046c0:	4543      	cmp	r3, r8
 80046c2:	f77f af7a 	ble.w	80045ba <_printf_float+0x242>
 80046c6:	2301      	movs	r3, #1
 80046c8:	4652      	mov	r2, sl
 80046ca:	4631      	mov	r1, r6
 80046cc:	4628      	mov	r0, r5
 80046ce:	47b8      	blx	r7
 80046d0:	3001      	adds	r0, #1
 80046d2:	f43f aeac 	beq.w	800442e <_printf_float+0xb6>
 80046d6:	f108 0801 	add.w	r8, r8, #1
 80046da:	e7ec      	b.n	80046b6 <_printf_float+0x33e>
 80046dc:	4613      	mov	r3, r2
 80046de:	4631      	mov	r1, r6
 80046e0:	4642      	mov	r2, r8
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	d1c0      	bne.n	800466c <_printf_float+0x2f4>
 80046ea:	e6a0      	b.n	800442e <_printf_float+0xb6>
 80046ec:	2301      	movs	r3, #1
 80046ee:	4631      	mov	r1, r6
 80046f0:	4628      	mov	r0, r5
 80046f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80046f4:	47b8      	blx	r7
 80046f6:	3001      	adds	r0, #1
 80046f8:	f43f ae99 	beq.w	800442e <_printf_float+0xb6>
 80046fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046fe:	f10b 0b01 	add.w	fp, fp, #1
 8004702:	e7b9      	b.n	8004678 <_printf_float+0x300>
 8004704:	4631      	mov	r1, r6
 8004706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800470a:	4628      	mov	r0, r5
 800470c:	47b8      	blx	r7
 800470e:	3001      	adds	r0, #1
 8004710:	d1bf      	bne.n	8004692 <_printf_float+0x31a>
 8004712:	e68c      	b.n	800442e <_printf_float+0xb6>
 8004714:	464b      	mov	r3, r9
 8004716:	4631      	mov	r1, r6
 8004718:	4628      	mov	r0, r5
 800471a:	eb08 020a 	add.w	r2, r8, sl
 800471e:	47b8      	blx	r7
 8004720:	3001      	adds	r0, #1
 8004722:	d1c2      	bne.n	80046aa <_printf_float+0x332>
 8004724:	e683      	b.n	800442e <_printf_float+0xb6>
 8004726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004728:	2a01      	cmp	r2, #1
 800472a:	dc01      	bgt.n	8004730 <_printf_float+0x3b8>
 800472c:	07db      	lsls	r3, r3, #31
 800472e:	d537      	bpl.n	80047a0 <_printf_float+0x428>
 8004730:	2301      	movs	r3, #1
 8004732:	4642      	mov	r2, r8
 8004734:	4631      	mov	r1, r6
 8004736:	4628      	mov	r0, r5
 8004738:	47b8      	blx	r7
 800473a:	3001      	adds	r0, #1
 800473c:	f43f ae77 	beq.w	800442e <_printf_float+0xb6>
 8004740:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004744:	4631      	mov	r1, r6
 8004746:	4628      	mov	r0, r5
 8004748:	47b8      	blx	r7
 800474a:	3001      	adds	r0, #1
 800474c:	f43f ae6f 	beq.w	800442e <_printf_float+0xb6>
 8004750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004754:	2200      	movs	r2, #0
 8004756:	2300      	movs	r3, #0
 8004758:	f7fc f926 	bl	80009a8 <__aeabi_dcmpeq>
 800475c:	b9d8      	cbnz	r0, 8004796 <_printf_float+0x41e>
 800475e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004760:	f108 0201 	add.w	r2, r8, #1
 8004764:	3b01      	subs	r3, #1
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	d10e      	bne.n	800478e <_printf_float+0x416>
 8004770:	e65d      	b.n	800442e <_printf_float+0xb6>
 8004772:	2301      	movs	r3, #1
 8004774:	464a      	mov	r2, r9
 8004776:	4631      	mov	r1, r6
 8004778:	4628      	mov	r0, r5
 800477a:	47b8      	blx	r7
 800477c:	3001      	adds	r0, #1
 800477e:	f43f ae56 	beq.w	800442e <_printf_float+0xb6>
 8004782:	f108 0801 	add.w	r8, r8, #1
 8004786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004788:	3b01      	subs	r3, #1
 800478a:	4543      	cmp	r3, r8
 800478c:	dcf1      	bgt.n	8004772 <_printf_float+0x3fa>
 800478e:	4653      	mov	r3, sl
 8004790:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004794:	e6e0      	b.n	8004558 <_printf_float+0x1e0>
 8004796:	f04f 0800 	mov.w	r8, #0
 800479a:	f104 091a 	add.w	r9, r4, #26
 800479e:	e7f2      	b.n	8004786 <_printf_float+0x40e>
 80047a0:	2301      	movs	r3, #1
 80047a2:	4642      	mov	r2, r8
 80047a4:	e7df      	b.n	8004766 <_printf_float+0x3ee>
 80047a6:	2301      	movs	r3, #1
 80047a8:	464a      	mov	r2, r9
 80047aa:	4631      	mov	r1, r6
 80047ac:	4628      	mov	r0, r5
 80047ae:	47b8      	blx	r7
 80047b0:	3001      	adds	r0, #1
 80047b2:	f43f ae3c 	beq.w	800442e <_printf_float+0xb6>
 80047b6:	f108 0801 	add.w	r8, r8, #1
 80047ba:	68e3      	ldr	r3, [r4, #12]
 80047bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80047be:	1a5b      	subs	r3, r3, r1
 80047c0:	4543      	cmp	r3, r8
 80047c2:	dcf0      	bgt.n	80047a6 <_printf_float+0x42e>
 80047c4:	e6fd      	b.n	80045c2 <_printf_float+0x24a>
 80047c6:	f04f 0800 	mov.w	r8, #0
 80047ca:	f104 0919 	add.w	r9, r4, #25
 80047ce:	e7f4      	b.n	80047ba <_printf_float+0x442>

080047d0 <_printf_common>:
 80047d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	4616      	mov	r6, r2
 80047d6:	4699      	mov	r9, r3
 80047d8:	688a      	ldr	r2, [r1, #8]
 80047da:	690b      	ldr	r3, [r1, #16]
 80047dc:	4607      	mov	r7, r0
 80047de:	4293      	cmp	r3, r2
 80047e0:	bfb8      	it	lt
 80047e2:	4613      	movlt	r3, r2
 80047e4:	6033      	str	r3, [r6, #0]
 80047e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ea:	460c      	mov	r4, r1
 80047ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f0:	b10a      	cbz	r2, 80047f6 <_printf_common+0x26>
 80047f2:	3301      	adds	r3, #1
 80047f4:	6033      	str	r3, [r6, #0]
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	0699      	lsls	r1, r3, #26
 80047fa:	bf42      	ittt	mi
 80047fc:	6833      	ldrmi	r3, [r6, #0]
 80047fe:	3302      	addmi	r3, #2
 8004800:	6033      	strmi	r3, [r6, #0]
 8004802:	6825      	ldr	r5, [r4, #0]
 8004804:	f015 0506 	ands.w	r5, r5, #6
 8004808:	d106      	bne.n	8004818 <_printf_common+0x48>
 800480a:	f104 0a19 	add.w	sl, r4, #25
 800480e:	68e3      	ldr	r3, [r4, #12]
 8004810:	6832      	ldr	r2, [r6, #0]
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	42ab      	cmp	r3, r5
 8004816:	dc28      	bgt.n	800486a <_printf_common+0x9a>
 8004818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800481c:	1e13      	subs	r3, r2, #0
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	bf18      	it	ne
 8004822:	2301      	movne	r3, #1
 8004824:	0692      	lsls	r2, r2, #26
 8004826:	d42d      	bmi.n	8004884 <_printf_common+0xb4>
 8004828:	4649      	mov	r1, r9
 800482a:	4638      	mov	r0, r7
 800482c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004830:	47c0      	blx	r8
 8004832:	3001      	adds	r0, #1
 8004834:	d020      	beq.n	8004878 <_printf_common+0xa8>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	68e5      	ldr	r5, [r4, #12]
 800483a:	f003 0306 	and.w	r3, r3, #6
 800483e:	2b04      	cmp	r3, #4
 8004840:	bf18      	it	ne
 8004842:	2500      	movne	r5, #0
 8004844:	6832      	ldr	r2, [r6, #0]
 8004846:	f04f 0600 	mov.w	r6, #0
 800484a:	68a3      	ldr	r3, [r4, #8]
 800484c:	bf08      	it	eq
 800484e:	1aad      	subeq	r5, r5, r2
 8004850:	6922      	ldr	r2, [r4, #16]
 8004852:	bf08      	it	eq
 8004854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004858:	4293      	cmp	r3, r2
 800485a:	bfc4      	itt	gt
 800485c:	1a9b      	subgt	r3, r3, r2
 800485e:	18ed      	addgt	r5, r5, r3
 8004860:	341a      	adds	r4, #26
 8004862:	42b5      	cmp	r5, r6
 8004864:	d11a      	bne.n	800489c <_printf_common+0xcc>
 8004866:	2000      	movs	r0, #0
 8004868:	e008      	b.n	800487c <_printf_common+0xac>
 800486a:	2301      	movs	r3, #1
 800486c:	4652      	mov	r2, sl
 800486e:	4649      	mov	r1, r9
 8004870:	4638      	mov	r0, r7
 8004872:	47c0      	blx	r8
 8004874:	3001      	adds	r0, #1
 8004876:	d103      	bne.n	8004880 <_printf_common+0xb0>
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004880:	3501      	adds	r5, #1
 8004882:	e7c4      	b.n	800480e <_printf_common+0x3e>
 8004884:	2030      	movs	r0, #48	; 0x30
 8004886:	18e1      	adds	r1, r4, r3
 8004888:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004892:	4422      	add	r2, r4
 8004894:	3302      	adds	r3, #2
 8004896:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800489a:	e7c5      	b.n	8004828 <_printf_common+0x58>
 800489c:	2301      	movs	r3, #1
 800489e:	4622      	mov	r2, r4
 80048a0:	4649      	mov	r1, r9
 80048a2:	4638      	mov	r0, r7
 80048a4:	47c0      	blx	r8
 80048a6:	3001      	adds	r0, #1
 80048a8:	d0e6      	beq.n	8004878 <_printf_common+0xa8>
 80048aa:	3601      	adds	r6, #1
 80048ac:	e7d9      	b.n	8004862 <_printf_common+0x92>
	...

080048b0 <_printf_i>:
 80048b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b4:	7e0f      	ldrb	r7, [r1, #24]
 80048b6:	4691      	mov	r9, r2
 80048b8:	2f78      	cmp	r7, #120	; 0x78
 80048ba:	4680      	mov	r8, r0
 80048bc:	460c      	mov	r4, r1
 80048be:	469a      	mov	sl, r3
 80048c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048c6:	d807      	bhi.n	80048d8 <_printf_i+0x28>
 80048c8:	2f62      	cmp	r7, #98	; 0x62
 80048ca:	d80a      	bhi.n	80048e2 <_printf_i+0x32>
 80048cc:	2f00      	cmp	r7, #0
 80048ce:	f000 80d9 	beq.w	8004a84 <_printf_i+0x1d4>
 80048d2:	2f58      	cmp	r7, #88	; 0x58
 80048d4:	f000 80a4 	beq.w	8004a20 <_printf_i+0x170>
 80048d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048e0:	e03a      	b.n	8004958 <_printf_i+0xa8>
 80048e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048e6:	2b15      	cmp	r3, #21
 80048e8:	d8f6      	bhi.n	80048d8 <_printf_i+0x28>
 80048ea:	a101      	add	r1, pc, #4	; (adr r1, 80048f0 <_printf_i+0x40>)
 80048ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048f0:	08004949 	.word	0x08004949
 80048f4:	0800495d 	.word	0x0800495d
 80048f8:	080048d9 	.word	0x080048d9
 80048fc:	080048d9 	.word	0x080048d9
 8004900:	080048d9 	.word	0x080048d9
 8004904:	080048d9 	.word	0x080048d9
 8004908:	0800495d 	.word	0x0800495d
 800490c:	080048d9 	.word	0x080048d9
 8004910:	080048d9 	.word	0x080048d9
 8004914:	080048d9 	.word	0x080048d9
 8004918:	080048d9 	.word	0x080048d9
 800491c:	08004a6b 	.word	0x08004a6b
 8004920:	0800498d 	.word	0x0800498d
 8004924:	08004a4d 	.word	0x08004a4d
 8004928:	080048d9 	.word	0x080048d9
 800492c:	080048d9 	.word	0x080048d9
 8004930:	08004a8d 	.word	0x08004a8d
 8004934:	080048d9 	.word	0x080048d9
 8004938:	0800498d 	.word	0x0800498d
 800493c:	080048d9 	.word	0x080048d9
 8004940:	080048d9 	.word	0x080048d9
 8004944:	08004a55 	.word	0x08004a55
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	1d1a      	adds	r2, r3, #4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	602a      	str	r2, [r5, #0]
 8004950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004958:	2301      	movs	r3, #1
 800495a:	e0a4      	b.n	8004aa6 <_printf_i+0x1f6>
 800495c:	6820      	ldr	r0, [r4, #0]
 800495e:	6829      	ldr	r1, [r5, #0]
 8004960:	0606      	lsls	r6, r0, #24
 8004962:	f101 0304 	add.w	r3, r1, #4
 8004966:	d50a      	bpl.n	800497e <_printf_i+0xce>
 8004968:	680e      	ldr	r6, [r1, #0]
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	2e00      	cmp	r6, #0
 800496e:	da03      	bge.n	8004978 <_printf_i+0xc8>
 8004970:	232d      	movs	r3, #45	; 0x2d
 8004972:	4276      	negs	r6, r6
 8004974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004978:	230a      	movs	r3, #10
 800497a:	485e      	ldr	r0, [pc, #376]	; (8004af4 <_printf_i+0x244>)
 800497c:	e019      	b.n	80049b2 <_printf_i+0x102>
 800497e:	680e      	ldr	r6, [r1, #0]
 8004980:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004984:	602b      	str	r3, [r5, #0]
 8004986:	bf18      	it	ne
 8004988:	b236      	sxthne	r6, r6
 800498a:	e7ef      	b.n	800496c <_printf_i+0xbc>
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	6820      	ldr	r0, [r4, #0]
 8004990:	1d19      	adds	r1, r3, #4
 8004992:	6029      	str	r1, [r5, #0]
 8004994:	0601      	lsls	r1, r0, #24
 8004996:	d501      	bpl.n	800499c <_printf_i+0xec>
 8004998:	681e      	ldr	r6, [r3, #0]
 800499a:	e002      	b.n	80049a2 <_printf_i+0xf2>
 800499c:	0646      	lsls	r6, r0, #25
 800499e:	d5fb      	bpl.n	8004998 <_printf_i+0xe8>
 80049a0:	881e      	ldrh	r6, [r3, #0]
 80049a2:	2f6f      	cmp	r7, #111	; 0x6f
 80049a4:	bf0c      	ite	eq
 80049a6:	2308      	moveq	r3, #8
 80049a8:	230a      	movne	r3, #10
 80049aa:	4852      	ldr	r0, [pc, #328]	; (8004af4 <_printf_i+0x244>)
 80049ac:	2100      	movs	r1, #0
 80049ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049b2:	6865      	ldr	r5, [r4, #4]
 80049b4:	2d00      	cmp	r5, #0
 80049b6:	bfa8      	it	ge
 80049b8:	6821      	ldrge	r1, [r4, #0]
 80049ba:	60a5      	str	r5, [r4, #8]
 80049bc:	bfa4      	itt	ge
 80049be:	f021 0104 	bicge.w	r1, r1, #4
 80049c2:	6021      	strge	r1, [r4, #0]
 80049c4:	b90e      	cbnz	r6, 80049ca <_printf_i+0x11a>
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	d04d      	beq.n	8004a66 <_printf_i+0x1b6>
 80049ca:	4615      	mov	r5, r2
 80049cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80049d0:	fb03 6711 	mls	r7, r3, r1, r6
 80049d4:	5dc7      	ldrb	r7, [r0, r7]
 80049d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049da:	4637      	mov	r7, r6
 80049dc:	42bb      	cmp	r3, r7
 80049de:	460e      	mov	r6, r1
 80049e0:	d9f4      	bls.n	80049cc <_printf_i+0x11c>
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d10b      	bne.n	80049fe <_printf_i+0x14e>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	07de      	lsls	r6, r3, #31
 80049ea:	d508      	bpl.n	80049fe <_printf_i+0x14e>
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	6861      	ldr	r1, [r4, #4]
 80049f0:	4299      	cmp	r1, r3
 80049f2:	bfde      	ittt	le
 80049f4:	2330      	movle	r3, #48	; 0x30
 80049f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049fe:	1b52      	subs	r2, r2, r5
 8004a00:	6122      	str	r2, [r4, #16]
 8004a02:	464b      	mov	r3, r9
 8004a04:	4621      	mov	r1, r4
 8004a06:	4640      	mov	r0, r8
 8004a08:	f8cd a000 	str.w	sl, [sp]
 8004a0c:	aa03      	add	r2, sp, #12
 8004a0e:	f7ff fedf 	bl	80047d0 <_printf_common>
 8004a12:	3001      	adds	r0, #1
 8004a14:	d14c      	bne.n	8004ab0 <_printf_i+0x200>
 8004a16:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1a:	b004      	add	sp, #16
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	4834      	ldr	r0, [pc, #208]	; (8004af4 <_printf_i+0x244>)
 8004a22:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a26:	6829      	ldr	r1, [r5, #0]
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a2e:	6029      	str	r1, [r5, #0]
 8004a30:	061d      	lsls	r5, r3, #24
 8004a32:	d514      	bpl.n	8004a5e <_printf_i+0x1ae>
 8004a34:	07df      	lsls	r7, r3, #31
 8004a36:	bf44      	itt	mi
 8004a38:	f043 0320 	orrmi.w	r3, r3, #32
 8004a3c:	6023      	strmi	r3, [r4, #0]
 8004a3e:	b91e      	cbnz	r6, 8004a48 <_printf_i+0x198>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	f023 0320 	bic.w	r3, r3, #32
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	2310      	movs	r3, #16
 8004a4a:	e7af      	b.n	80049ac <_printf_i+0xfc>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	f043 0320 	orr.w	r3, r3, #32
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	2378      	movs	r3, #120	; 0x78
 8004a56:	4828      	ldr	r0, [pc, #160]	; (8004af8 <_printf_i+0x248>)
 8004a58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a5c:	e7e3      	b.n	8004a26 <_printf_i+0x176>
 8004a5e:	0659      	lsls	r1, r3, #25
 8004a60:	bf48      	it	mi
 8004a62:	b2b6      	uxthmi	r6, r6
 8004a64:	e7e6      	b.n	8004a34 <_printf_i+0x184>
 8004a66:	4615      	mov	r5, r2
 8004a68:	e7bb      	b.n	80049e2 <_printf_i+0x132>
 8004a6a:	682b      	ldr	r3, [r5, #0]
 8004a6c:	6826      	ldr	r6, [r4, #0]
 8004a6e:	1d18      	adds	r0, r3, #4
 8004a70:	6961      	ldr	r1, [r4, #20]
 8004a72:	6028      	str	r0, [r5, #0]
 8004a74:	0635      	lsls	r5, r6, #24
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	d501      	bpl.n	8004a7e <_printf_i+0x1ce>
 8004a7a:	6019      	str	r1, [r3, #0]
 8004a7c:	e002      	b.n	8004a84 <_printf_i+0x1d4>
 8004a7e:	0670      	lsls	r0, r6, #25
 8004a80:	d5fb      	bpl.n	8004a7a <_printf_i+0x1ca>
 8004a82:	8019      	strh	r1, [r3, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	4615      	mov	r5, r2
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	e7ba      	b.n	8004a02 <_printf_i+0x152>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	2100      	movs	r1, #0
 8004a90:	1d1a      	adds	r2, r3, #4
 8004a92:	602a      	str	r2, [r5, #0]
 8004a94:	681d      	ldr	r5, [r3, #0]
 8004a96:	6862      	ldr	r2, [r4, #4]
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 fed7 	bl	800584c <memchr>
 8004a9e:	b108      	cbz	r0, 8004aa4 <_printf_i+0x1f4>
 8004aa0:	1b40      	subs	r0, r0, r5
 8004aa2:	6060      	str	r0, [r4, #4]
 8004aa4:	6863      	ldr	r3, [r4, #4]
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aae:	e7a8      	b.n	8004a02 <_printf_i+0x152>
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	47d0      	blx	sl
 8004aba:	3001      	adds	r0, #1
 8004abc:	d0ab      	beq.n	8004a16 <_printf_i+0x166>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	079b      	lsls	r3, r3, #30
 8004ac2:	d413      	bmi.n	8004aec <_printf_i+0x23c>
 8004ac4:	68e0      	ldr	r0, [r4, #12]
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	4298      	cmp	r0, r3
 8004aca:	bfb8      	it	lt
 8004acc:	4618      	movlt	r0, r3
 8004ace:	e7a4      	b.n	8004a1a <_printf_i+0x16a>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	47d0      	blx	sl
 8004ada:	3001      	adds	r0, #1
 8004adc:	d09b      	beq.n	8004a16 <_printf_i+0x166>
 8004ade:	3501      	adds	r5, #1
 8004ae0:	68e3      	ldr	r3, [r4, #12]
 8004ae2:	9903      	ldr	r1, [sp, #12]
 8004ae4:	1a5b      	subs	r3, r3, r1
 8004ae6:	42ab      	cmp	r3, r5
 8004ae8:	dcf2      	bgt.n	8004ad0 <_printf_i+0x220>
 8004aea:	e7eb      	b.n	8004ac4 <_printf_i+0x214>
 8004aec:	2500      	movs	r5, #0
 8004aee:	f104 0619 	add.w	r6, r4, #25
 8004af2:	e7f5      	b.n	8004ae0 <_printf_i+0x230>
 8004af4:	080077da 	.word	0x080077da
 8004af8:	080077eb 	.word	0x080077eb

08004afc <siprintf>:
 8004afc:	b40e      	push	{r1, r2, r3}
 8004afe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b02:	b500      	push	{lr}
 8004b04:	b09c      	sub	sp, #112	; 0x70
 8004b06:	ab1d      	add	r3, sp, #116	; 0x74
 8004b08:	9002      	str	r0, [sp, #8]
 8004b0a:	9006      	str	r0, [sp, #24]
 8004b0c:	9107      	str	r1, [sp, #28]
 8004b0e:	9104      	str	r1, [sp, #16]
 8004b10:	4808      	ldr	r0, [pc, #32]	; (8004b34 <siprintf+0x38>)
 8004b12:	4909      	ldr	r1, [pc, #36]	; (8004b38 <siprintf+0x3c>)
 8004b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b18:	9105      	str	r1, [sp, #20]
 8004b1a:	6800      	ldr	r0, [r0, #0]
 8004b1c:	a902      	add	r1, sp, #8
 8004b1e:	9301      	str	r3, [sp, #4]
 8004b20:	f001 fb70 	bl	8006204 <_svfiprintf_r>
 8004b24:	2200      	movs	r2, #0
 8004b26:	9b02      	ldr	r3, [sp, #8]
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	b01c      	add	sp, #112	; 0x70
 8004b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b30:	b003      	add	sp, #12
 8004b32:	4770      	bx	lr
 8004b34:	20000014 	.word	0x20000014
 8004b38:	ffff0208 	.word	0xffff0208

08004b3c <quorem>:
 8004b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b40:	6903      	ldr	r3, [r0, #16]
 8004b42:	690c      	ldr	r4, [r1, #16]
 8004b44:	4607      	mov	r7, r0
 8004b46:	42a3      	cmp	r3, r4
 8004b48:	f2c0 8082 	blt.w	8004c50 <quorem+0x114>
 8004b4c:	3c01      	subs	r4, #1
 8004b4e:	f100 0514 	add.w	r5, r0, #20
 8004b52:	f101 0814 	add.w	r8, r1, #20
 8004b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b64:	3301      	adds	r3, #1
 8004b66:	429a      	cmp	r2, r3
 8004b68:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b74:	d331      	bcc.n	8004bda <quorem+0x9e>
 8004b76:	f04f 0e00 	mov.w	lr, #0
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	46ac      	mov	ip, r5
 8004b7e:	46f2      	mov	sl, lr
 8004b80:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b84:	b293      	uxth	r3, r2
 8004b86:	fb06 e303 	mla	r3, r6, r3, lr
 8004b8a:	0c12      	lsrs	r2, r2, #16
 8004b8c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	fb06 e202 	mla	r2, r6, r2, lr
 8004b96:	ebaa 0303 	sub.w	r3, sl, r3
 8004b9a:	f8dc a000 	ldr.w	sl, [ip]
 8004b9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ba2:	fa1f fa8a 	uxth.w	sl, sl
 8004ba6:	4453      	add	r3, sl
 8004ba8:	f8dc a000 	ldr.w	sl, [ip]
 8004bac:	b292      	uxth	r2, r2
 8004bae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004bb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bbc:	4581      	cmp	r9, r0
 8004bbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bc2:	f84c 3b04 	str.w	r3, [ip], #4
 8004bc6:	d2db      	bcs.n	8004b80 <quorem+0x44>
 8004bc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bcc:	b92b      	cbnz	r3, 8004bda <quorem+0x9e>
 8004bce:	9b01      	ldr	r3, [sp, #4]
 8004bd0:	3b04      	subs	r3, #4
 8004bd2:	429d      	cmp	r5, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	d32f      	bcc.n	8004c38 <quorem+0xfc>
 8004bd8:	613c      	str	r4, [r7, #16]
 8004bda:	4638      	mov	r0, r7
 8004bdc:	f001 f8c2 	bl	8005d64 <__mcmp>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	db25      	blt.n	8004c30 <quorem+0xf4>
 8004be4:	4628      	mov	r0, r5
 8004be6:	f04f 0c00 	mov.w	ip, #0
 8004bea:	3601      	adds	r6, #1
 8004bec:	f858 1b04 	ldr.w	r1, [r8], #4
 8004bf0:	f8d0 e000 	ldr.w	lr, [r0]
 8004bf4:	b28b      	uxth	r3, r1
 8004bf6:	ebac 0303 	sub.w	r3, ip, r3
 8004bfa:	fa1f f28e 	uxth.w	r2, lr
 8004bfe:	4413      	add	r3, r2
 8004c00:	0c0a      	lsrs	r2, r1, #16
 8004c02:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c10:	45c1      	cmp	r9, r8
 8004c12:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c16:	f840 3b04 	str.w	r3, [r0], #4
 8004c1a:	d2e7      	bcs.n	8004bec <quorem+0xb0>
 8004c1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c24:	b922      	cbnz	r2, 8004c30 <quorem+0xf4>
 8004c26:	3b04      	subs	r3, #4
 8004c28:	429d      	cmp	r5, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	d30a      	bcc.n	8004c44 <quorem+0x108>
 8004c2e:	613c      	str	r4, [r7, #16]
 8004c30:	4630      	mov	r0, r6
 8004c32:	b003      	add	sp, #12
 8004c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	3b04      	subs	r3, #4
 8004c3c:	2a00      	cmp	r2, #0
 8004c3e:	d1cb      	bne.n	8004bd8 <quorem+0x9c>
 8004c40:	3c01      	subs	r4, #1
 8004c42:	e7c6      	b.n	8004bd2 <quorem+0x96>
 8004c44:	6812      	ldr	r2, [r2, #0]
 8004c46:	3b04      	subs	r3, #4
 8004c48:	2a00      	cmp	r2, #0
 8004c4a:	d1f0      	bne.n	8004c2e <quorem+0xf2>
 8004c4c:	3c01      	subs	r4, #1
 8004c4e:	e7eb      	b.n	8004c28 <quorem+0xec>
 8004c50:	2000      	movs	r0, #0
 8004c52:	e7ee      	b.n	8004c32 <quorem+0xf6>
 8004c54:	0000      	movs	r0, r0
	...

08004c58 <_dtoa_r>:
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	4616      	mov	r6, r2
 8004c5e:	461f      	mov	r7, r3
 8004c60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c62:	b099      	sub	sp, #100	; 0x64
 8004c64:	4605      	mov	r5, r0
 8004c66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c6a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c6e:	b974      	cbnz	r4, 8004c8e <_dtoa_r+0x36>
 8004c70:	2010      	movs	r0, #16
 8004c72:	f000 fde3 	bl	800583c <malloc>
 8004c76:	4602      	mov	r2, r0
 8004c78:	6268      	str	r0, [r5, #36]	; 0x24
 8004c7a:	b920      	cbnz	r0, 8004c86 <_dtoa_r+0x2e>
 8004c7c:	21ea      	movs	r1, #234	; 0xea
 8004c7e:	4ba8      	ldr	r3, [pc, #672]	; (8004f20 <_dtoa_r+0x2c8>)
 8004c80:	48a8      	ldr	r0, [pc, #672]	; (8004f24 <_dtoa_r+0x2cc>)
 8004c82:	f001 fbcf 	bl	8006424 <__assert_func>
 8004c86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c8a:	6004      	str	r4, [r0, #0]
 8004c8c:	60c4      	str	r4, [r0, #12]
 8004c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	b151      	cbz	r1, 8004caa <_dtoa_r+0x52>
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	2301      	movs	r3, #1
 8004c98:	4093      	lsls	r3, r2
 8004c9a:	604a      	str	r2, [r1, #4]
 8004c9c:	608b      	str	r3, [r1, #8]
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 fe22 	bl	80058e8 <_Bfree>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	1e3b      	subs	r3, r7, #0
 8004cac:	bfaf      	iteee	ge
 8004cae:	2300      	movge	r3, #0
 8004cb0:	2201      	movlt	r2, #1
 8004cb2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cb6:	9305      	strlt	r3, [sp, #20]
 8004cb8:	bfa8      	it	ge
 8004cba:	f8c8 3000 	strge.w	r3, [r8]
 8004cbe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004cc2:	4b99      	ldr	r3, [pc, #612]	; (8004f28 <_dtoa_r+0x2d0>)
 8004cc4:	bfb8      	it	lt
 8004cc6:	f8c8 2000 	strlt.w	r2, [r8]
 8004cca:	ea33 0309 	bics.w	r3, r3, r9
 8004cce:	d119      	bne.n	8004d04 <_dtoa_r+0xac>
 8004cd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cdc:	4333      	orrs	r3, r6
 8004cde:	f000 857f 	beq.w	80057e0 <_dtoa_r+0xb88>
 8004ce2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ce4:	b953      	cbnz	r3, 8004cfc <_dtoa_r+0xa4>
 8004ce6:	4b91      	ldr	r3, [pc, #580]	; (8004f2c <_dtoa_r+0x2d4>)
 8004ce8:	e022      	b.n	8004d30 <_dtoa_r+0xd8>
 8004cea:	4b91      	ldr	r3, [pc, #580]	; (8004f30 <_dtoa_r+0x2d8>)
 8004cec:	9303      	str	r3, [sp, #12]
 8004cee:	3308      	adds	r3, #8
 8004cf0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	9803      	ldr	r0, [sp, #12]
 8004cf6:	b019      	add	sp, #100	; 0x64
 8004cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfc:	4b8b      	ldr	r3, [pc, #556]	; (8004f2c <_dtoa_r+0x2d4>)
 8004cfe:	9303      	str	r3, [sp, #12]
 8004d00:	3303      	adds	r3, #3
 8004d02:	e7f5      	b.n	8004cf0 <_dtoa_r+0x98>
 8004d04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d10:	2200      	movs	r2, #0
 8004d12:	2300      	movs	r3, #0
 8004d14:	f7fb fe48 	bl	80009a8 <__aeabi_dcmpeq>
 8004d18:	4680      	mov	r8, r0
 8004d1a:	b158      	cbz	r0, 8004d34 <_dtoa_r+0xdc>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8558 	beq.w	80057da <_dtoa_r+0xb82>
 8004d2a:	4882      	ldr	r0, [pc, #520]	; (8004f34 <_dtoa_r+0x2dc>)
 8004d2c:	6018      	str	r0, [r3, #0]
 8004d2e:	1e43      	subs	r3, r0, #1
 8004d30:	9303      	str	r3, [sp, #12]
 8004d32:	e7df      	b.n	8004cf4 <_dtoa_r+0x9c>
 8004d34:	ab16      	add	r3, sp, #88	; 0x58
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	ab17      	add	r3, sp, #92	; 0x5c
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d42:	f001 f8b7 	bl	8005eb4 <__d2b>
 8004d46:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d4a:	4683      	mov	fp, r0
 8004d4c:	2c00      	cmp	r4, #0
 8004d4e:	d07f      	beq.n	8004e50 <_dtoa_r+0x1f8>
 8004d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d56:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d5e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d62:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d66:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	4b72      	ldr	r3, [pc, #456]	; (8004f38 <_dtoa_r+0x2e0>)
 8004d6e:	f7fb f9fb 	bl	8000168 <__aeabi_dsub>
 8004d72:	a365      	add	r3, pc, #404	; (adr r3, 8004f08 <_dtoa_r+0x2b0>)
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f7fb fbae 	bl	80004d8 <__aeabi_dmul>
 8004d7c:	a364      	add	r3, pc, #400	; (adr r3, 8004f10 <_dtoa_r+0x2b8>)
 8004d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d82:	f7fb f9f3 	bl	800016c <__adddf3>
 8004d86:	4606      	mov	r6, r0
 8004d88:	4620      	mov	r0, r4
 8004d8a:	460f      	mov	r7, r1
 8004d8c:	f7fb fb3a 	bl	8000404 <__aeabi_i2d>
 8004d90:	a361      	add	r3, pc, #388	; (adr r3, 8004f18 <_dtoa_r+0x2c0>)
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d96:	f7fb fb9f 	bl	80004d8 <__aeabi_dmul>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4630      	mov	r0, r6
 8004da0:	4639      	mov	r1, r7
 8004da2:	f7fb f9e3 	bl	800016c <__adddf3>
 8004da6:	4606      	mov	r6, r0
 8004da8:	460f      	mov	r7, r1
 8004daa:	f7fb fe45 	bl	8000a38 <__aeabi_d2iz>
 8004dae:	2200      	movs	r2, #0
 8004db0:	4682      	mov	sl, r0
 8004db2:	2300      	movs	r3, #0
 8004db4:	4630      	mov	r0, r6
 8004db6:	4639      	mov	r1, r7
 8004db8:	f7fb fe00 	bl	80009bc <__aeabi_dcmplt>
 8004dbc:	b148      	cbz	r0, 8004dd2 <_dtoa_r+0x17a>
 8004dbe:	4650      	mov	r0, sl
 8004dc0:	f7fb fb20 	bl	8000404 <__aeabi_i2d>
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	f7fb fdee 	bl	80009a8 <__aeabi_dcmpeq>
 8004dcc:	b908      	cbnz	r0, 8004dd2 <_dtoa_r+0x17a>
 8004dce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dd2:	f1ba 0f16 	cmp.w	sl, #22
 8004dd6:	d858      	bhi.n	8004e8a <_dtoa_r+0x232>
 8004dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ddc:	4b57      	ldr	r3, [pc, #348]	; (8004f3c <_dtoa_r+0x2e4>)
 8004dde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f7fb fde9 	bl	80009bc <__aeabi_dcmplt>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d04f      	beq.n	8004e8e <_dtoa_r+0x236>
 8004dee:	2300      	movs	r3, #0
 8004df0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004df4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004df6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004df8:	1b1c      	subs	r4, r3, r4
 8004dfa:	1e63      	subs	r3, r4, #1
 8004dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfe:	bf49      	itett	mi
 8004e00:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e04:	2300      	movpl	r3, #0
 8004e06:	9306      	strmi	r3, [sp, #24]
 8004e08:	2300      	movmi	r3, #0
 8004e0a:	bf54      	ite	pl
 8004e0c:	9306      	strpl	r3, [sp, #24]
 8004e0e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e10:	f1ba 0f00 	cmp.w	sl, #0
 8004e14:	db3d      	blt.n	8004e92 <_dtoa_r+0x23a>
 8004e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e18:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e1c:	4453      	add	r3, sl
 8004e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e20:	2300      	movs	r3, #0
 8004e22:	930a      	str	r3, [sp, #40]	; 0x28
 8004e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e26:	2b09      	cmp	r3, #9
 8004e28:	f200 808c 	bhi.w	8004f44 <_dtoa_r+0x2ec>
 8004e2c:	2b05      	cmp	r3, #5
 8004e2e:	bfc4      	itt	gt
 8004e30:	3b04      	subgt	r3, #4
 8004e32:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e36:	bfc8      	it	gt
 8004e38:	2400      	movgt	r4, #0
 8004e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8004e3e:	bfd8      	it	le
 8004e40:	2401      	movle	r4, #1
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	f200 808a 	bhi.w	8004f5c <_dtoa_r+0x304>
 8004e48:	e8df f003 	tbb	[pc, r3]
 8004e4c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004e50:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e54:	441c      	add	r4, r3
 8004e56:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	bfc3      	ittte	gt
 8004e5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e62:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e66:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e6a:	f1c3 0320 	rsble	r3, r3, #32
 8004e6e:	bfc6      	itte	gt
 8004e70:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e74:	4318      	orrgt	r0, r3
 8004e76:	fa06 f003 	lslle.w	r0, r6, r3
 8004e7a:	f7fb fab3 	bl	80003e4 <__aeabi_ui2d>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e84:	3c01      	subs	r4, #1
 8004e86:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e88:	e76f      	b.n	8004d6a <_dtoa_r+0x112>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e7b2      	b.n	8004df4 <_dtoa_r+0x19c>
 8004e8e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e90:	e7b1      	b.n	8004df6 <_dtoa_r+0x19e>
 8004e92:	9b06      	ldr	r3, [sp, #24]
 8004e94:	eba3 030a 	sub.w	r3, r3, sl
 8004e98:	9306      	str	r3, [sp, #24]
 8004e9a:	f1ca 0300 	rsb	r3, sl, #0
 8004e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ea4:	e7be      	b.n	8004e24 <_dtoa_r+0x1cc>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	dc58      	bgt.n	8004f62 <_dtoa_r+0x30a>
 8004eb0:	f04f 0901 	mov.w	r9, #1
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	f8cd 9020 	str.w	r9, [sp, #32]
 8004eba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ec2:	6042      	str	r2, [r0, #4]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	f102 0614 	add.w	r6, r2, #20
 8004eca:	429e      	cmp	r6, r3
 8004ecc:	6841      	ldr	r1, [r0, #4]
 8004ece:	d94e      	bls.n	8004f6e <_dtoa_r+0x316>
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 fcc9 	bl	8005868 <_Balloc>
 8004ed6:	9003      	str	r0, [sp, #12]
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d14c      	bne.n	8004f76 <_dtoa_r+0x31e>
 8004edc:	4602      	mov	r2, r0
 8004ede:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ee2:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <_dtoa_r+0x2e8>)
 8004ee4:	e6cc      	b.n	8004c80 <_dtoa_r+0x28>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e7de      	b.n	8004ea8 <_dtoa_r+0x250>
 8004eea:	2300      	movs	r3, #0
 8004eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ef0:	eb0a 0903 	add.w	r9, sl, r3
 8004ef4:	f109 0301 	add.w	r3, r9, #1
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	9308      	str	r3, [sp, #32]
 8004efc:	bfb8      	it	lt
 8004efe:	2301      	movlt	r3, #1
 8004f00:	e7dd      	b.n	8004ebe <_dtoa_r+0x266>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e7f2      	b.n	8004eec <_dtoa_r+0x294>
 8004f06:	bf00      	nop
 8004f08:	636f4361 	.word	0x636f4361
 8004f0c:	3fd287a7 	.word	0x3fd287a7
 8004f10:	8b60c8b3 	.word	0x8b60c8b3
 8004f14:	3fc68a28 	.word	0x3fc68a28
 8004f18:	509f79fb 	.word	0x509f79fb
 8004f1c:	3fd34413 	.word	0x3fd34413
 8004f20:	08007809 	.word	0x08007809
 8004f24:	08007820 	.word	0x08007820
 8004f28:	7ff00000 	.word	0x7ff00000
 8004f2c:	08007805 	.word	0x08007805
 8004f30:	080077fc 	.word	0x080077fc
 8004f34:	080077d9 	.word	0x080077d9
 8004f38:	3ff80000 	.word	0x3ff80000
 8004f3c:	08007910 	.word	0x08007910
 8004f40:	0800787b 	.word	0x0800787b
 8004f44:	2401      	movs	r4, #1
 8004f46:	2300      	movs	r3, #0
 8004f48:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f4a:	9322      	str	r3, [sp, #136]	; 0x88
 8004f4c:	f04f 39ff 	mov.w	r9, #4294967295
 8004f50:	2200      	movs	r2, #0
 8004f52:	2312      	movs	r3, #18
 8004f54:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f58:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f5a:	e7b0      	b.n	8004ebe <_dtoa_r+0x266>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f60:	e7f4      	b.n	8004f4c <_dtoa_r+0x2f4>
 8004f62:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004f66:	464b      	mov	r3, r9
 8004f68:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f6c:	e7a7      	b.n	8004ebe <_dtoa_r+0x266>
 8004f6e:	3101      	adds	r1, #1
 8004f70:	6041      	str	r1, [r0, #4]
 8004f72:	0052      	lsls	r2, r2, #1
 8004f74:	e7a7      	b.n	8004ec6 <_dtoa_r+0x26e>
 8004f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f78:	9a03      	ldr	r2, [sp, #12]
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	9b08      	ldr	r3, [sp, #32]
 8004f7e:	2b0e      	cmp	r3, #14
 8004f80:	f200 80a8 	bhi.w	80050d4 <_dtoa_r+0x47c>
 8004f84:	2c00      	cmp	r4, #0
 8004f86:	f000 80a5 	beq.w	80050d4 <_dtoa_r+0x47c>
 8004f8a:	f1ba 0f00 	cmp.w	sl, #0
 8004f8e:	dd34      	ble.n	8004ffa <_dtoa_r+0x3a2>
 8004f90:	4a9a      	ldr	r2, [pc, #616]	; (80051fc <_dtoa_r+0x5a4>)
 8004f92:	f00a 030f 	and.w	r3, sl, #15
 8004f96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f9a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004f9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fa2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fa6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004faa:	d016      	beq.n	8004fda <_dtoa_r+0x382>
 8004fac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fb0:	4b93      	ldr	r3, [pc, #588]	; (8005200 <_dtoa_r+0x5a8>)
 8004fb2:	2703      	movs	r7, #3
 8004fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fb8:	f7fb fbb8 	bl	800072c <__aeabi_ddiv>
 8004fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fc0:	f004 040f 	and.w	r4, r4, #15
 8004fc4:	4e8e      	ldr	r6, [pc, #568]	; (8005200 <_dtoa_r+0x5a8>)
 8004fc6:	b954      	cbnz	r4, 8004fde <_dtoa_r+0x386>
 8004fc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fd0:	f7fb fbac 	bl	800072c <__aeabi_ddiv>
 8004fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fd8:	e029      	b.n	800502e <_dtoa_r+0x3d6>
 8004fda:	2702      	movs	r7, #2
 8004fdc:	e7f2      	b.n	8004fc4 <_dtoa_r+0x36c>
 8004fde:	07e1      	lsls	r1, r4, #31
 8004fe0:	d508      	bpl.n	8004ff4 <_dtoa_r+0x39c>
 8004fe2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fe6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fea:	f7fb fa75 	bl	80004d8 <__aeabi_dmul>
 8004fee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ff2:	3701      	adds	r7, #1
 8004ff4:	1064      	asrs	r4, r4, #1
 8004ff6:	3608      	adds	r6, #8
 8004ff8:	e7e5      	b.n	8004fc6 <_dtoa_r+0x36e>
 8004ffa:	f000 80a5 	beq.w	8005148 <_dtoa_r+0x4f0>
 8004ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005002:	f1ca 0400 	rsb	r4, sl, #0
 8005006:	4b7d      	ldr	r3, [pc, #500]	; (80051fc <_dtoa_r+0x5a4>)
 8005008:	f004 020f 	and.w	r2, r4, #15
 800500c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb fa60 	bl	80004d8 <__aeabi_dmul>
 8005018:	2702      	movs	r7, #2
 800501a:	2300      	movs	r3, #0
 800501c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005020:	4e77      	ldr	r6, [pc, #476]	; (8005200 <_dtoa_r+0x5a8>)
 8005022:	1124      	asrs	r4, r4, #4
 8005024:	2c00      	cmp	r4, #0
 8005026:	f040 8084 	bne.w	8005132 <_dtoa_r+0x4da>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1d2      	bne.n	8004fd4 <_dtoa_r+0x37c>
 800502e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 808b 	beq.w	800514c <_dtoa_r+0x4f4>
 8005036:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800503a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800503e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005042:	2200      	movs	r2, #0
 8005044:	4b6f      	ldr	r3, [pc, #444]	; (8005204 <_dtoa_r+0x5ac>)
 8005046:	f7fb fcb9 	bl	80009bc <__aeabi_dcmplt>
 800504a:	2800      	cmp	r0, #0
 800504c:	d07e      	beq.n	800514c <_dtoa_r+0x4f4>
 800504e:	9b08      	ldr	r3, [sp, #32]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d07b      	beq.n	800514c <_dtoa_r+0x4f4>
 8005054:	f1b9 0f00 	cmp.w	r9, #0
 8005058:	dd38      	ble.n	80050cc <_dtoa_r+0x474>
 800505a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800505e:	2200      	movs	r2, #0
 8005060:	4b69      	ldr	r3, [pc, #420]	; (8005208 <_dtoa_r+0x5b0>)
 8005062:	f7fb fa39 	bl	80004d8 <__aeabi_dmul>
 8005066:	464c      	mov	r4, r9
 8005068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800506c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005070:	3701      	adds	r7, #1
 8005072:	4638      	mov	r0, r7
 8005074:	f7fb f9c6 	bl	8000404 <__aeabi_i2d>
 8005078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800507c:	f7fb fa2c 	bl	80004d8 <__aeabi_dmul>
 8005080:	2200      	movs	r2, #0
 8005082:	4b62      	ldr	r3, [pc, #392]	; (800520c <_dtoa_r+0x5b4>)
 8005084:	f7fb f872 	bl	800016c <__adddf3>
 8005088:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800508c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005090:	9611      	str	r6, [sp, #68]	; 0x44
 8005092:	2c00      	cmp	r4, #0
 8005094:	d15d      	bne.n	8005152 <_dtoa_r+0x4fa>
 8005096:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800509a:	2200      	movs	r2, #0
 800509c:	4b5c      	ldr	r3, [pc, #368]	; (8005210 <_dtoa_r+0x5b8>)
 800509e:	f7fb f863 	bl	8000168 <__aeabi_dsub>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050aa:	4633      	mov	r3, r6
 80050ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050ae:	f7fb fca3 	bl	80009f8 <__aeabi_dcmpgt>
 80050b2:	2800      	cmp	r0, #0
 80050b4:	f040 829c 	bne.w	80055f0 <_dtoa_r+0x998>
 80050b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050c2:	f7fb fc7b 	bl	80009bc <__aeabi_dcmplt>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	f040 8290 	bne.w	80055ec <_dtoa_r+0x994>
 80050cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80050d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f2c0 8152 	blt.w	8005380 <_dtoa_r+0x728>
 80050dc:	f1ba 0f0e 	cmp.w	sl, #14
 80050e0:	f300 814e 	bgt.w	8005380 <_dtoa_r+0x728>
 80050e4:	4b45      	ldr	r3, [pc, #276]	; (80051fc <_dtoa_r+0x5a4>)
 80050e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80050f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f280 80db 	bge.w	80052b0 <_dtoa_r+0x658>
 80050fa:	9b08      	ldr	r3, [sp, #32]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f300 80d7 	bgt.w	80052b0 <_dtoa_r+0x658>
 8005102:	f040 8272 	bne.w	80055ea <_dtoa_r+0x992>
 8005106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800510a:	2200      	movs	r2, #0
 800510c:	4b40      	ldr	r3, [pc, #256]	; (8005210 <_dtoa_r+0x5b8>)
 800510e:	f7fb f9e3 	bl	80004d8 <__aeabi_dmul>
 8005112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005116:	f7fb fc65 	bl	80009e4 <__aeabi_dcmpge>
 800511a:	9c08      	ldr	r4, [sp, #32]
 800511c:	4626      	mov	r6, r4
 800511e:	2800      	cmp	r0, #0
 8005120:	f040 8248 	bne.w	80055b4 <_dtoa_r+0x95c>
 8005124:	2331      	movs	r3, #49	; 0x31
 8005126:	9f03      	ldr	r7, [sp, #12]
 8005128:	f10a 0a01 	add.w	sl, sl, #1
 800512c:	f807 3b01 	strb.w	r3, [r7], #1
 8005130:	e244      	b.n	80055bc <_dtoa_r+0x964>
 8005132:	07e2      	lsls	r2, r4, #31
 8005134:	d505      	bpl.n	8005142 <_dtoa_r+0x4ea>
 8005136:	e9d6 2300 	ldrd	r2, r3, [r6]
 800513a:	f7fb f9cd 	bl	80004d8 <__aeabi_dmul>
 800513e:	2301      	movs	r3, #1
 8005140:	3701      	adds	r7, #1
 8005142:	1064      	asrs	r4, r4, #1
 8005144:	3608      	adds	r6, #8
 8005146:	e76d      	b.n	8005024 <_dtoa_r+0x3cc>
 8005148:	2702      	movs	r7, #2
 800514a:	e770      	b.n	800502e <_dtoa_r+0x3d6>
 800514c:	46d0      	mov	r8, sl
 800514e:	9c08      	ldr	r4, [sp, #32]
 8005150:	e78f      	b.n	8005072 <_dtoa_r+0x41a>
 8005152:	9903      	ldr	r1, [sp, #12]
 8005154:	4b29      	ldr	r3, [pc, #164]	; (80051fc <_dtoa_r+0x5a4>)
 8005156:	4421      	add	r1, r4
 8005158:	9112      	str	r1, [sp, #72]	; 0x48
 800515a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800515c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005160:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005164:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005168:	2900      	cmp	r1, #0
 800516a:	d055      	beq.n	8005218 <_dtoa_r+0x5c0>
 800516c:	2000      	movs	r0, #0
 800516e:	4929      	ldr	r1, [pc, #164]	; (8005214 <_dtoa_r+0x5bc>)
 8005170:	f7fb fadc 	bl	800072c <__aeabi_ddiv>
 8005174:	463b      	mov	r3, r7
 8005176:	4632      	mov	r2, r6
 8005178:	f7fa fff6 	bl	8000168 <__aeabi_dsub>
 800517c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005180:	9f03      	ldr	r7, [sp, #12]
 8005182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005186:	f7fb fc57 	bl	8000a38 <__aeabi_d2iz>
 800518a:	4604      	mov	r4, r0
 800518c:	f7fb f93a 	bl	8000404 <__aeabi_i2d>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005198:	f7fa ffe6 	bl	8000168 <__aeabi_dsub>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	3430      	adds	r4, #48	; 0x30
 80051a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051aa:	f807 4b01 	strb.w	r4, [r7], #1
 80051ae:	f7fb fc05 	bl	80009bc <__aeabi_dcmplt>
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d174      	bne.n	80052a0 <_dtoa_r+0x648>
 80051b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ba:	2000      	movs	r0, #0
 80051bc:	4911      	ldr	r1, [pc, #68]	; (8005204 <_dtoa_r+0x5ac>)
 80051be:	f7fa ffd3 	bl	8000168 <__aeabi_dsub>
 80051c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051c6:	f7fb fbf9 	bl	80009bc <__aeabi_dcmplt>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	f040 80b7 	bne.w	800533e <_dtoa_r+0x6e6>
 80051d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051d2:	429f      	cmp	r7, r3
 80051d4:	f43f af7a 	beq.w	80050cc <_dtoa_r+0x474>
 80051d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051dc:	2200      	movs	r2, #0
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <_dtoa_r+0x5b0>)
 80051e0:	f7fb f97a 	bl	80004d8 <__aeabi_dmul>
 80051e4:	2200      	movs	r2, #0
 80051e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <_dtoa_r+0x5b0>)
 80051f0:	f7fb f972 	bl	80004d8 <__aeabi_dmul>
 80051f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051f8:	e7c3      	b.n	8005182 <_dtoa_r+0x52a>
 80051fa:	bf00      	nop
 80051fc:	08007910 	.word	0x08007910
 8005200:	080078e8 	.word	0x080078e8
 8005204:	3ff00000 	.word	0x3ff00000
 8005208:	40240000 	.word	0x40240000
 800520c:	401c0000 	.word	0x401c0000
 8005210:	40140000 	.word	0x40140000
 8005214:	3fe00000 	.word	0x3fe00000
 8005218:	4630      	mov	r0, r6
 800521a:	4639      	mov	r1, r7
 800521c:	f7fb f95c 	bl	80004d8 <__aeabi_dmul>
 8005220:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005222:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005226:	9c03      	ldr	r4, [sp, #12]
 8005228:	9314      	str	r3, [sp, #80]	; 0x50
 800522a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800522e:	f7fb fc03 	bl	8000a38 <__aeabi_d2iz>
 8005232:	9015      	str	r0, [sp, #84]	; 0x54
 8005234:	f7fb f8e6 	bl	8000404 <__aeabi_i2d>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005240:	f7fa ff92 	bl	8000168 <__aeabi_dsub>
 8005244:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005246:	4606      	mov	r6, r0
 8005248:	3330      	adds	r3, #48	; 0x30
 800524a:	f804 3b01 	strb.w	r3, [r4], #1
 800524e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005250:	460f      	mov	r7, r1
 8005252:	429c      	cmp	r4, r3
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	d124      	bne.n	80052a4 <_dtoa_r+0x64c>
 800525a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800525e:	4bb0      	ldr	r3, [pc, #704]	; (8005520 <_dtoa_r+0x8c8>)
 8005260:	f7fa ff84 	bl	800016c <__adddf3>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4630      	mov	r0, r6
 800526a:	4639      	mov	r1, r7
 800526c:	f7fb fbc4 	bl	80009f8 <__aeabi_dcmpgt>
 8005270:	2800      	cmp	r0, #0
 8005272:	d163      	bne.n	800533c <_dtoa_r+0x6e4>
 8005274:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005278:	2000      	movs	r0, #0
 800527a:	49a9      	ldr	r1, [pc, #676]	; (8005520 <_dtoa_r+0x8c8>)
 800527c:	f7fa ff74 	bl	8000168 <__aeabi_dsub>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4630      	mov	r0, r6
 8005286:	4639      	mov	r1, r7
 8005288:	f7fb fb98 	bl	80009bc <__aeabi_dcmplt>
 800528c:	2800      	cmp	r0, #0
 800528e:	f43f af1d 	beq.w	80050cc <_dtoa_r+0x474>
 8005292:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005294:	1e7b      	subs	r3, r7, #1
 8005296:	9314      	str	r3, [sp, #80]	; 0x50
 8005298:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800529c:	2b30      	cmp	r3, #48	; 0x30
 800529e:	d0f8      	beq.n	8005292 <_dtoa_r+0x63a>
 80052a0:	46c2      	mov	sl, r8
 80052a2:	e03b      	b.n	800531c <_dtoa_r+0x6c4>
 80052a4:	4b9f      	ldr	r3, [pc, #636]	; (8005524 <_dtoa_r+0x8cc>)
 80052a6:	f7fb f917 	bl	80004d8 <__aeabi_dmul>
 80052aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052ae:	e7bc      	b.n	800522a <_dtoa_r+0x5d2>
 80052b0:	9f03      	ldr	r7, [sp, #12]
 80052b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80052b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052ba:	4640      	mov	r0, r8
 80052bc:	4649      	mov	r1, r9
 80052be:	f7fb fa35 	bl	800072c <__aeabi_ddiv>
 80052c2:	f7fb fbb9 	bl	8000a38 <__aeabi_d2iz>
 80052c6:	4604      	mov	r4, r0
 80052c8:	f7fb f89c 	bl	8000404 <__aeabi_i2d>
 80052cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052d0:	f7fb f902 	bl	80004d8 <__aeabi_dmul>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4640      	mov	r0, r8
 80052da:	4649      	mov	r1, r9
 80052dc:	f7fa ff44 	bl	8000168 <__aeabi_dsub>
 80052e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80052e4:	f807 6b01 	strb.w	r6, [r7], #1
 80052e8:	9e03      	ldr	r6, [sp, #12]
 80052ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80052ee:	1bbe      	subs	r6, r7, r6
 80052f0:	45b4      	cmp	ip, r6
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	d136      	bne.n	8005366 <_dtoa_r+0x70e>
 80052f8:	f7fa ff38 	bl	800016c <__adddf3>
 80052fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005300:	4680      	mov	r8, r0
 8005302:	4689      	mov	r9, r1
 8005304:	f7fb fb78 	bl	80009f8 <__aeabi_dcmpgt>
 8005308:	bb58      	cbnz	r0, 8005362 <_dtoa_r+0x70a>
 800530a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800530e:	4640      	mov	r0, r8
 8005310:	4649      	mov	r1, r9
 8005312:	f7fb fb49 	bl	80009a8 <__aeabi_dcmpeq>
 8005316:	b108      	cbz	r0, 800531c <_dtoa_r+0x6c4>
 8005318:	07e1      	lsls	r1, r4, #31
 800531a:	d422      	bmi.n	8005362 <_dtoa_r+0x70a>
 800531c:	4628      	mov	r0, r5
 800531e:	4659      	mov	r1, fp
 8005320:	f000 fae2 	bl	80058e8 <_Bfree>
 8005324:	2300      	movs	r3, #0
 8005326:	703b      	strb	r3, [r7, #0]
 8005328:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800532a:	f10a 0001 	add.w	r0, sl, #1
 800532e:	6018      	str	r0, [r3, #0]
 8005330:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005332:	2b00      	cmp	r3, #0
 8005334:	f43f acde 	beq.w	8004cf4 <_dtoa_r+0x9c>
 8005338:	601f      	str	r7, [r3, #0]
 800533a:	e4db      	b.n	8004cf4 <_dtoa_r+0x9c>
 800533c:	4627      	mov	r7, r4
 800533e:	463b      	mov	r3, r7
 8005340:	461f      	mov	r7, r3
 8005342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005346:	2a39      	cmp	r2, #57	; 0x39
 8005348:	d107      	bne.n	800535a <_dtoa_r+0x702>
 800534a:	9a03      	ldr	r2, [sp, #12]
 800534c:	429a      	cmp	r2, r3
 800534e:	d1f7      	bne.n	8005340 <_dtoa_r+0x6e8>
 8005350:	2230      	movs	r2, #48	; 0x30
 8005352:	9903      	ldr	r1, [sp, #12]
 8005354:	f108 0801 	add.w	r8, r8, #1
 8005358:	700a      	strb	r2, [r1, #0]
 800535a:	781a      	ldrb	r2, [r3, #0]
 800535c:	3201      	adds	r2, #1
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	e79e      	b.n	80052a0 <_dtoa_r+0x648>
 8005362:	46d0      	mov	r8, sl
 8005364:	e7eb      	b.n	800533e <_dtoa_r+0x6e6>
 8005366:	2200      	movs	r2, #0
 8005368:	4b6e      	ldr	r3, [pc, #440]	; (8005524 <_dtoa_r+0x8cc>)
 800536a:	f7fb f8b5 	bl	80004d8 <__aeabi_dmul>
 800536e:	2200      	movs	r2, #0
 8005370:	2300      	movs	r3, #0
 8005372:	4680      	mov	r8, r0
 8005374:	4689      	mov	r9, r1
 8005376:	f7fb fb17 	bl	80009a8 <__aeabi_dcmpeq>
 800537a:	2800      	cmp	r0, #0
 800537c:	d09b      	beq.n	80052b6 <_dtoa_r+0x65e>
 800537e:	e7cd      	b.n	800531c <_dtoa_r+0x6c4>
 8005380:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005382:	2a00      	cmp	r2, #0
 8005384:	f000 80d0 	beq.w	8005528 <_dtoa_r+0x8d0>
 8005388:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800538a:	2a01      	cmp	r2, #1
 800538c:	f300 80ae 	bgt.w	80054ec <_dtoa_r+0x894>
 8005390:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005392:	2a00      	cmp	r2, #0
 8005394:	f000 80a6 	beq.w	80054e4 <_dtoa_r+0x88c>
 8005398:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800539c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800539e:	9f06      	ldr	r7, [sp, #24]
 80053a0:	9a06      	ldr	r2, [sp, #24]
 80053a2:	2101      	movs	r1, #1
 80053a4:	441a      	add	r2, r3
 80053a6:	9206      	str	r2, [sp, #24]
 80053a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053aa:	4628      	mov	r0, r5
 80053ac:	441a      	add	r2, r3
 80053ae:	9209      	str	r2, [sp, #36]	; 0x24
 80053b0:	f000 fb50 	bl	8005a54 <__i2b>
 80053b4:	4606      	mov	r6, r0
 80053b6:	2f00      	cmp	r7, #0
 80053b8:	dd0c      	ble.n	80053d4 <_dtoa_r+0x77c>
 80053ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053bc:	2b00      	cmp	r3, #0
 80053be:	dd09      	ble.n	80053d4 <_dtoa_r+0x77c>
 80053c0:	42bb      	cmp	r3, r7
 80053c2:	bfa8      	it	ge
 80053c4:	463b      	movge	r3, r7
 80053c6:	9a06      	ldr	r2, [sp, #24]
 80053c8:	1aff      	subs	r7, r7, r3
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	9206      	str	r2, [sp, #24]
 80053ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	9309      	str	r3, [sp, #36]	; 0x24
 80053d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d6:	b1f3      	cbz	r3, 8005416 <_dtoa_r+0x7be>
 80053d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f000 80a8 	beq.w	8005530 <_dtoa_r+0x8d8>
 80053e0:	2c00      	cmp	r4, #0
 80053e2:	dd10      	ble.n	8005406 <_dtoa_r+0x7ae>
 80053e4:	4631      	mov	r1, r6
 80053e6:	4622      	mov	r2, r4
 80053e8:	4628      	mov	r0, r5
 80053ea:	f000 fbf1 	bl	8005bd0 <__pow5mult>
 80053ee:	465a      	mov	r2, fp
 80053f0:	4601      	mov	r1, r0
 80053f2:	4606      	mov	r6, r0
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 fb43 	bl	8005a80 <__multiply>
 80053fa:	4680      	mov	r8, r0
 80053fc:	4659      	mov	r1, fp
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fa72 	bl	80058e8 <_Bfree>
 8005404:	46c3      	mov	fp, r8
 8005406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005408:	1b1a      	subs	r2, r3, r4
 800540a:	d004      	beq.n	8005416 <_dtoa_r+0x7be>
 800540c:	4659      	mov	r1, fp
 800540e:	4628      	mov	r0, r5
 8005410:	f000 fbde 	bl	8005bd0 <__pow5mult>
 8005414:	4683      	mov	fp, r0
 8005416:	2101      	movs	r1, #1
 8005418:	4628      	mov	r0, r5
 800541a:	f000 fb1b 	bl	8005a54 <__i2b>
 800541e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005420:	4604      	mov	r4, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	f340 8086 	ble.w	8005534 <_dtoa_r+0x8dc>
 8005428:	461a      	mov	r2, r3
 800542a:	4601      	mov	r1, r0
 800542c:	4628      	mov	r0, r5
 800542e:	f000 fbcf 	bl	8005bd0 <__pow5mult>
 8005432:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005434:	4604      	mov	r4, r0
 8005436:	2b01      	cmp	r3, #1
 8005438:	dd7f      	ble.n	800553a <_dtoa_r+0x8e2>
 800543a:	f04f 0800 	mov.w	r8, #0
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005444:	6918      	ldr	r0, [r3, #16]
 8005446:	f000 fab7 	bl	80059b8 <__hi0bits>
 800544a:	f1c0 0020 	rsb	r0, r0, #32
 800544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005450:	4418      	add	r0, r3
 8005452:	f010 001f 	ands.w	r0, r0, #31
 8005456:	f000 8092 	beq.w	800557e <_dtoa_r+0x926>
 800545a:	f1c0 0320 	rsb	r3, r0, #32
 800545e:	2b04      	cmp	r3, #4
 8005460:	f340 808a 	ble.w	8005578 <_dtoa_r+0x920>
 8005464:	f1c0 001c 	rsb	r0, r0, #28
 8005468:	9b06      	ldr	r3, [sp, #24]
 800546a:	4407      	add	r7, r0
 800546c:	4403      	add	r3, r0
 800546e:	9306      	str	r3, [sp, #24]
 8005470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005472:	4403      	add	r3, r0
 8005474:	9309      	str	r3, [sp, #36]	; 0x24
 8005476:	9b06      	ldr	r3, [sp, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	dd05      	ble.n	8005488 <_dtoa_r+0x830>
 800547c:	4659      	mov	r1, fp
 800547e:	461a      	mov	r2, r3
 8005480:	4628      	mov	r0, r5
 8005482:	f000 fbff 	bl	8005c84 <__lshift>
 8005486:	4683      	mov	fp, r0
 8005488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800548a:	2b00      	cmp	r3, #0
 800548c:	dd05      	ble.n	800549a <_dtoa_r+0x842>
 800548e:	4621      	mov	r1, r4
 8005490:	461a      	mov	r2, r3
 8005492:	4628      	mov	r0, r5
 8005494:	f000 fbf6 	bl	8005c84 <__lshift>
 8005498:	4604      	mov	r4, r0
 800549a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d070      	beq.n	8005582 <_dtoa_r+0x92a>
 80054a0:	4621      	mov	r1, r4
 80054a2:	4658      	mov	r0, fp
 80054a4:	f000 fc5e 	bl	8005d64 <__mcmp>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	da6a      	bge.n	8005582 <_dtoa_r+0x92a>
 80054ac:	2300      	movs	r3, #0
 80054ae:	4659      	mov	r1, fp
 80054b0:	220a      	movs	r2, #10
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 fa3a 	bl	800592c <__multadd>
 80054b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ba:	4683      	mov	fp, r0
 80054bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8194 	beq.w	80057ee <_dtoa_r+0xb96>
 80054c6:	4631      	mov	r1, r6
 80054c8:	2300      	movs	r3, #0
 80054ca:	220a      	movs	r2, #10
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 fa2d 	bl	800592c <__multadd>
 80054d2:	f1b9 0f00 	cmp.w	r9, #0
 80054d6:	4606      	mov	r6, r0
 80054d8:	f300 8093 	bgt.w	8005602 <_dtoa_r+0x9aa>
 80054dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054de:	2b02      	cmp	r3, #2
 80054e0:	dc57      	bgt.n	8005592 <_dtoa_r+0x93a>
 80054e2:	e08e      	b.n	8005602 <_dtoa_r+0x9aa>
 80054e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054ea:	e757      	b.n	800539c <_dtoa_r+0x744>
 80054ec:	9b08      	ldr	r3, [sp, #32]
 80054ee:	1e5c      	subs	r4, r3, #1
 80054f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f2:	42a3      	cmp	r3, r4
 80054f4:	bfb7      	itett	lt
 80054f6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054f8:	1b1c      	subge	r4, r3, r4
 80054fa:	1ae2      	sublt	r2, r4, r3
 80054fc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80054fe:	bfbe      	ittt	lt
 8005500:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005502:	189b      	addlt	r3, r3, r2
 8005504:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005506:	9b08      	ldr	r3, [sp, #32]
 8005508:	bfb8      	it	lt
 800550a:	2400      	movlt	r4, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	bfbb      	ittet	lt
 8005510:	9b06      	ldrlt	r3, [sp, #24]
 8005512:	9a08      	ldrlt	r2, [sp, #32]
 8005514:	9f06      	ldrge	r7, [sp, #24]
 8005516:	1a9f      	sublt	r7, r3, r2
 8005518:	bfac      	ite	ge
 800551a:	9b08      	ldrge	r3, [sp, #32]
 800551c:	2300      	movlt	r3, #0
 800551e:	e73f      	b.n	80053a0 <_dtoa_r+0x748>
 8005520:	3fe00000 	.word	0x3fe00000
 8005524:	40240000 	.word	0x40240000
 8005528:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800552a:	9f06      	ldr	r7, [sp, #24]
 800552c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800552e:	e742      	b.n	80053b6 <_dtoa_r+0x75e>
 8005530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005532:	e76b      	b.n	800540c <_dtoa_r+0x7b4>
 8005534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005536:	2b01      	cmp	r3, #1
 8005538:	dc19      	bgt.n	800556e <_dtoa_r+0x916>
 800553a:	9b04      	ldr	r3, [sp, #16]
 800553c:	b9bb      	cbnz	r3, 800556e <_dtoa_r+0x916>
 800553e:	9b05      	ldr	r3, [sp, #20]
 8005540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005544:	b99b      	cbnz	r3, 800556e <_dtoa_r+0x916>
 8005546:	9b05      	ldr	r3, [sp, #20]
 8005548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800554c:	0d1b      	lsrs	r3, r3, #20
 800554e:	051b      	lsls	r3, r3, #20
 8005550:	b183      	cbz	r3, 8005574 <_dtoa_r+0x91c>
 8005552:	f04f 0801 	mov.w	r8, #1
 8005556:	9b06      	ldr	r3, [sp, #24]
 8005558:	3301      	adds	r3, #1
 800555a:	9306      	str	r3, [sp, #24]
 800555c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555e:	3301      	adds	r3, #1
 8005560:	9309      	str	r3, [sp, #36]	; 0x24
 8005562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005564:	2b00      	cmp	r3, #0
 8005566:	f47f af6a 	bne.w	800543e <_dtoa_r+0x7e6>
 800556a:	2001      	movs	r0, #1
 800556c:	e76f      	b.n	800544e <_dtoa_r+0x7f6>
 800556e:	f04f 0800 	mov.w	r8, #0
 8005572:	e7f6      	b.n	8005562 <_dtoa_r+0x90a>
 8005574:	4698      	mov	r8, r3
 8005576:	e7f4      	b.n	8005562 <_dtoa_r+0x90a>
 8005578:	f43f af7d 	beq.w	8005476 <_dtoa_r+0x81e>
 800557c:	4618      	mov	r0, r3
 800557e:	301c      	adds	r0, #28
 8005580:	e772      	b.n	8005468 <_dtoa_r+0x810>
 8005582:	9b08      	ldr	r3, [sp, #32]
 8005584:	2b00      	cmp	r3, #0
 8005586:	dc36      	bgt.n	80055f6 <_dtoa_r+0x99e>
 8005588:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800558a:	2b02      	cmp	r3, #2
 800558c:	dd33      	ble.n	80055f6 <_dtoa_r+0x99e>
 800558e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005592:	f1b9 0f00 	cmp.w	r9, #0
 8005596:	d10d      	bne.n	80055b4 <_dtoa_r+0x95c>
 8005598:	4621      	mov	r1, r4
 800559a:	464b      	mov	r3, r9
 800559c:	2205      	movs	r2, #5
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 f9c4 	bl	800592c <__multadd>
 80055a4:	4601      	mov	r1, r0
 80055a6:	4604      	mov	r4, r0
 80055a8:	4658      	mov	r0, fp
 80055aa:	f000 fbdb 	bl	8005d64 <__mcmp>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	f73f adb8 	bgt.w	8005124 <_dtoa_r+0x4cc>
 80055b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055b6:	9f03      	ldr	r7, [sp, #12]
 80055b8:	ea6f 0a03 	mvn.w	sl, r3
 80055bc:	f04f 0800 	mov.w	r8, #0
 80055c0:	4621      	mov	r1, r4
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 f990 	bl	80058e8 <_Bfree>
 80055c8:	2e00      	cmp	r6, #0
 80055ca:	f43f aea7 	beq.w	800531c <_dtoa_r+0x6c4>
 80055ce:	f1b8 0f00 	cmp.w	r8, #0
 80055d2:	d005      	beq.n	80055e0 <_dtoa_r+0x988>
 80055d4:	45b0      	cmp	r8, r6
 80055d6:	d003      	beq.n	80055e0 <_dtoa_r+0x988>
 80055d8:	4641      	mov	r1, r8
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 f984 	bl	80058e8 <_Bfree>
 80055e0:	4631      	mov	r1, r6
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f980 	bl	80058e8 <_Bfree>
 80055e8:	e698      	b.n	800531c <_dtoa_r+0x6c4>
 80055ea:	2400      	movs	r4, #0
 80055ec:	4626      	mov	r6, r4
 80055ee:	e7e1      	b.n	80055b4 <_dtoa_r+0x95c>
 80055f0:	46c2      	mov	sl, r8
 80055f2:	4626      	mov	r6, r4
 80055f4:	e596      	b.n	8005124 <_dtoa_r+0x4cc>
 80055f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80fd 	beq.w	80057fc <_dtoa_r+0xba4>
 8005602:	2f00      	cmp	r7, #0
 8005604:	dd05      	ble.n	8005612 <_dtoa_r+0x9ba>
 8005606:	4631      	mov	r1, r6
 8005608:	463a      	mov	r2, r7
 800560a:	4628      	mov	r0, r5
 800560c:	f000 fb3a 	bl	8005c84 <__lshift>
 8005610:	4606      	mov	r6, r0
 8005612:	f1b8 0f00 	cmp.w	r8, #0
 8005616:	d05c      	beq.n	80056d2 <_dtoa_r+0xa7a>
 8005618:	4628      	mov	r0, r5
 800561a:	6871      	ldr	r1, [r6, #4]
 800561c:	f000 f924 	bl	8005868 <_Balloc>
 8005620:	4607      	mov	r7, r0
 8005622:	b928      	cbnz	r0, 8005630 <_dtoa_r+0x9d8>
 8005624:	4602      	mov	r2, r0
 8005626:	f240 21ea 	movw	r1, #746	; 0x2ea
 800562a:	4b7f      	ldr	r3, [pc, #508]	; (8005828 <_dtoa_r+0xbd0>)
 800562c:	f7ff bb28 	b.w	8004c80 <_dtoa_r+0x28>
 8005630:	6932      	ldr	r2, [r6, #16]
 8005632:	f106 010c 	add.w	r1, r6, #12
 8005636:	3202      	adds	r2, #2
 8005638:	0092      	lsls	r2, r2, #2
 800563a:	300c      	adds	r0, #12
 800563c:	f7fe fde8 	bl	8004210 <memcpy>
 8005640:	2201      	movs	r2, #1
 8005642:	4639      	mov	r1, r7
 8005644:	4628      	mov	r0, r5
 8005646:	f000 fb1d 	bl	8005c84 <__lshift>
 800564a:	46b0      	mov	r8, r6
 800564c:	4606      	mov	r6, r0
 800564e:	9b03      	ldr	r3, [sp, #12]
 8005650:	3301      	adds	r3, #1
 8005652:	9308      	str	r3, [sp, #32]
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	444b      	add	r3, r9
 8005658:	930a      	str	r3, [sp, #40]	; 0x28
 800565a:	9b04      	ldr	r3, [sp, #16]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	9309      	str	r3, [sp, #36]	; 0x24
 8005662:	9b08      	ldr	r3, [sp, #32]
 8005664:	4621      	mov	r1, r4
 8005666:	3b01      	subs	r3, #1
 8005668:	4658      	mov	r0, fp
 800566a:	9304      	str	r3, [sp, #16]
 800566c:	f7ff fa66 	bl	8004b3c <quorem>
 8005670:	4603      	mov	r3, r0
 8005672:	4641      	mov	r1, r8
 8005674:	3330      	adds	r3, #48	; 0x30
 8005676:	9006      	str	r0, [sp, #24]
 8005678:	4658      	mov	r0, fp
 800567a:	930b      	str	r3, [sp, #44]	; 0x2c
 800567c:	f000 fb72 	bl	8005d64 <__mcmp>
 8005680:	4632      	mov	r2, r6
 8005682:	4681      	mov	r9, r0
 8005684:	4621      	mov	r1, r4
 8005686:	4628      	mov	r0, r5
 8005688:	f000 fb88 	bl	8005d9c <__mdiff>
 800568c:	68c2      	ldr	r2, [r0, #12]
 800568e:	4607      	mov	r7, r0
 8005690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005692:	bb02      	cbnz	r2, 80056d6 <_dtoa_r+0xa7e>
 8005694:	4601      	mov	r1, r0
 8005696:	4658      	mov	r0, fp
 8005698:	f000 fb64 	bl	8005d64 <__mcmp>
 800569c:	4602      	mov	r2, r0
 800569e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056a0:	4639      	mov	r1, r7
 80056a2:	4628      	mov	r0, r5
 80056a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80056a8:	f000 f91e 	bl	80058e8 <_Bfree>
 80056ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056b0:	9f08      	ldr	r7, [sp, #32]
 80056b2:	ea43 0102 	orr.w	r1, r3, r2
 80056b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b8:	430b      	orrs	r3, r1
 80056ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056bc:	d10d      	bne.n	80056da <_dtoa_r+0xa82>
 80056be:	2b39      	cmp	r3, #57	; 0x39
 80056c0:	d029      	beq.n	8005716 <_dtoa_r+0xabe>
 80056c2:	f1b9 0f00 	cmp.w	r9, #0
 80056c6:	dd01      	ble.n	80056cc <_dtoa_r+0xa74>
 80056c8:	9b06      	ldr	r3, [sp, #24]
 80056ca:	3331      	adds	r3, #49	; 0x31
 80056cc:	9a04      	ldr	r2, [sp, #16]
 80056ce:	7013      	strb	r3, [r2, #0]
 80056d0:	e776      	b.n	80055c0 <_dtoa_r+0x968>
 80056d2:	4630      	mov	r0, r6
 80056d4:	e7b9      	b.n	800564a <_dtoa_r+0x9f2>
 80056d6:	2201      	movs	r2, #1
 80056d8:	e7e2      	b.n	80056a0 <_dtoa_r+0xa48>
 80056da:	f1b9 0f00 	cmp.w	r9, #0
 80056de:	db06      	blt.n	80056ee <_dtoa_r+0xa96>
 80056e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80056e2:	ea41 0909 	orr.w	r9, r1, r9
 80056e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056e8:	ea59 0101 	orrs.w	r1, r9, r1
 80056ec:	d120      	bne.n	8005730 <_dtoa_r+0xad8>
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	ddec      	ble.n	80056cc <_dtoa_r+0xa74>
 80056f2:	4659      	mov	r1, fp
 80056f4:	2201      	movs	r2, #1
 80056f6:	4628      	mov	r0, r5
 80056f8:	9308      	str	r3, [sp, #32]
 80056fa:	f000 fac3 	bl	8005c84 <__lshift>
 80056fe:	4621      	mov	r1, r4
 8005700:	4683      	mov	fp, r0
 8005702:	f000 fb2f 	bl	8005d64 <__mcmp>
 8005706:	2800      	cmp	r0, #0
 8005708:	9b08      	ldr	r3, [sp, #32]
 800570a:	dc02      	bgt.n	8005712 <_dtoa_r+0xaba>
 800570c:	d1de      	bne.n	80056cc <_dtoa_r+0xa74>
 800570e:	07da      	lsls	r2, r3, #31
 8005710:	d5dc      	bpl.n	80056cc <_dtoa_r+0xa74>
 8005712:	2b39      	cmp	r3, #57	; 0x39
 8005714:	d1d8      	bne.n	80056c8 <_dtoa_r+0xa70>
 8005716:	2339      	movs	r3, #57	; 0x39
 8005718:	9a04      	ldr	r2, [sp, #16]
 800571a:	7013      	strb	r3, [r2, #0]
 800571c:	463b      	mov	r3, r7
 800571e:	461f      	mov	r7, r3
 8005720:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005724:	3b01      	subs	r3, #1
 8005726:	2a39      	cmp	r2, #57	; 0x39
 8005728:	d050      	beq.n	80057cc <_dtoa_r+0xb74>
 800572a:	3201      	adds	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e747      	b.n	80055c0 <_dtoa_r+0x968>
 8005730:	2a00      	cmp	r2, #0
 8005732:	dd03      	ble.n	800573c <_dtoa_r+0xae4>
 8005734:	2b39      	cmp	r3, #57	; 0x39
 8005736:	d0ee      	beq.n	8005716 <_dtoa_r+0xabe>
 8005738:	3301      	adds	r3, #1
 800573a:	e7c7      	b.n	80056cc <_dtoa_r+0xa74>
 800573c:	9a08      	ldr	r2, [sp, #32]
 800573e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005740:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005744:	428a      	cmp	r2, r1
 8005746:	d02a      	beq.n	800579e <_dtoa_r+0xb46>
 8005748:	4659      	mov	r1, fp
 800574a:	2300      	movs	r3, #0
 800574c:	220a      	movs	r2, #10
 800574e:	4628      	mov	r0, r5
 8005750:	f000 f8ec 	bl	800592c <__multadd>
 8005754:	45b0      	cmp	r8, r6
 8005756:	4683      	mov	fp, r0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	f04f 020a 	mov.w	r2, #10
 8005760:	4641      	mov	r1, r8
 8005762:	4628      	mov	r0, r5
 8005764:	d107      	bne.n	8005776 <_dtoa_r+0xb1e>
 8005766:	f000 f8e1 	bl	800592c <__multadd>
 800576a:	4680      	mov	r8, r0
 800576c:	4606      	mov	r6, r0
 800576e:	9b08      	ldr	r3, [sp, #32]
 8005770:	3301      	adds	r3, #1
 8005772:	9308      	str	r3, [sp, #32]
 8005774:	e775      	b.n	8005662 <_dtoa_r+0xa0a>
 8005776:	f000 f8d9 	bl	800592c <__multadd>
 800577a:	4631      	mov	r1, r6
 800577c:	4680      	mov	r8, r0
 800577e:	2300      	movs	r3, #0
 8005780:	220a      	movs	r2, #10
 8005782:	4628      	mov	r0, r5
 8005784:	f000 f8d2 	bl	800592c <__multadd>
 8005788:	4606      	mov	r6, r0
 800578a:	e7f0      	b.n	800576e <_dtoa_r+0xb16>
 800578c:	f1b9 0f00 	cmp.w	r9, #0
 8005790:	bfcc      	ite	gt
 8005792:	464f      	movgt	r7, r9
 8005794:	2701      	movle	r7, #1
 8005796:	f04f 0800 	mov.w	r8, #0
 800579a:	9a03      	ldr	r2, [sp, #12]
 800579c:	4417      	add	r7, r2
 800579e:	4659      	mov	r1, fp
 80057a0:	2201      	movs	r2, #1
 80057a2:	4628      	mov	r0, r5
 80057a4:	9308      	str	r3, [sp, #32]
 80057a6:	f000 fa6d 	bl	8005c84 <__lshift>
 80057aa:	4621      	mov	r1, r4
 80057ac:	4683      	mov	fp, r0
 80057ae:	f000 fad9 	bl	8005d64 <__mcmp>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	dcb2      	bgt.n	800571c <_dtoa_r+0xac4>
 80057b6:	d102      	bne.n	80057be <_dtoa_r+0xb66>
 80057b8:	9b08      	ldr	r3, [sp, #32]
 80057ba:	07db      	lsls	r3, r3, #31
 80057bc:	d4ae      	bmi.n	800571c <_dtoa_r+0xac4>
 80057be:	463b      	mov	r3, r7
 80057c0:	461f      	mov	r7, r3
 80057c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057c6:	2a30      	cmp	r2, #48	; 0x30
 80057c8:	d0fa      	beq.n	80057c0 <_dtoa_r+0xb68>
 80057ca:	e6f9      	b.n	80055c0 <_dtoa_r+0x968>
 80057cc:	9a03      	ldr	r2, [sp, #12]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d1a5      	bne.n	800571e <_dtoa_r+0xac6>
 80057d2:	2331      	movs	r3, #49	; 0x31
 80057d4:	f10a 0a01 	add.w	sl, sl, #1
 80057d8:	e779      	b.n	80056ce <_dtoa_r+0xa76>
 80057da:	4b14      	ldr	r3, [pc, #80]	; (800582c <_dtoa_r+0xbd4>)
 80057dc:	f7ff baa8 	b.w	8004d30 <_dtoa_r+0xd8>
 80057e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f47f aa81 	bne.w	8004cea <_dtoa_r+0x92>
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <_dtoa_r+0xbd8>)
 80057ea:	f7ff baa1 	b.w	8004d30 <_dtoa_r+0xd8>
 80057ee:	f1b9 0f00 	cmp.w	r9, #0
 80057f2:	dc03      	bgt.n	80057fc <_dtoa_r+0xba4>
 80057f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	f73f aecb 	bgt.w	8005592 <_dtoa_r+0x93a>
 80057fc:	9f03      	ldr	r7, [sp, #12]
 80057fe:	4621      	mov	r1, r4
 8005800:	4658      	mov	r0, fp
 8005802:	f7ff f99b 	bl	8004b3c <quorem>
 8005806:	9a03      	ldr	r2, [sp, #12]
 8005808:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800580c:	f807 3b01 	strb.w	r3, [r7], #1
 8005810:	1aba      	subs	r2, r7, r2
 8005812:	4591      	cmp	r9, r2
 8005814:	ddba      	ble.n	800578c <_dtoa_r+0xb34>
 8005816:	4659      	mov	r1, fp
 8005818:	2300      	movs	r3, #0
 800581a:	220a      	movs	r2, #10
 800581c:	4628      	mov	r0, r5
 800581e:	f000 f885 	bl	800592c <__multadd>
 8005822:	4683      	mov	fp, r0
 8005824:	e7eb      	b.n	80057fe <_dtoa_r+0xba6>
 8005826:	bf00      	nop
 8005828:	0800787b 	.word	0x0800787b
 800582c:	080077d8 	.word	0x080077d8
 8005830:	080077fc 	.word	0x080077fc

08005834 <_localeconv_r>:
 8005834:	4800      	ldr	r0, [pc, #0]	; (8005838 <_localeconv_r+0x4>)
 8005836:	4770      	bx	lr
 8005838:	20000168 	.word	0x20000168

0800583c <malloc>:
 800583c:	4b02      	ldr	r3, [pc, #8]	; (8005848 <malloc+0xc>)
 800583e:	4601      	mov	r1, r0
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	f000 bc0f 	b.w	8006064 <_malloc_r>
 8005846:	bf00      	nop
 8005848:	20000014 	.word	0x20000014

0800584c <memchr>:
 800584c:	4603      	mov	r3, r0
 800584e:	b510      	push	{r4, lr}
 8005850:	b2c9      	uxtb	r1, r1
 8005852:	4402      	add	r2, r0
 8005854:	4293      	cmp	r3, r2
 8005856:	4618      	mov	r0, r3
 8005858:	d101      	bne.n	800585e <memchr+0x12>
 800585a:	2000      	movs	r0, #0
 800585c:	e003      	b.n	8005866 <memchr+0x1a>
 800585e:	7804      	ldrb	r4, [r0, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	428c      	cmp	r4, r1
 8005864:	d1f6      	bne.n	8005854 <memchr+0x8>
 8005866:	bd10      	pop	{r4, pc}

08005868 <_Balloc>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800586c:	4604      	mov	r4, r0
 800586e:	460d      	mov	r5, r1
 8005870:	b976      	cbnz	r6, 8005890 <_Balloc+0x28>
 8005872:	2010      	movs	r0, #16
 8005874:	f7ff ffe2 	bl	800583c <malloc>
 8005878:	4602      	mov	r2, r0
 800587a:	6260      	str	r0, [r4, #36]	; 0x24
 800587c:	b920      	cbnz	r0, 8005888 <_Balloc+0x20>
 800587e:	2166      	movs	r1, #102	; 0x66
 8005880:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <_Balloc+0x78>)
 8005882:	4818      	ldr	r0, [pc, #96]	; (80058e4 <_Balloc+0x7c>)
 8005884:	f000 fdce 	bl	8006424 <__assert_func>
 8005888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800588c:	6006      	str	r6, [r0, #0]
 800588e:	60c6      	str	r6, [r0, #12]
 8005890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005892:	68f3      	ldr	r3, [r6, #12]
 8005894:	b183      	cbz	r3, 80058b8 <_Balloc+0x50>
 8005896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800589e:	b9b8      	cbnz	r0, 80058d0 <_Balloc+0x68>
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f605 	lsl.w	r6, r1, r5
 80058a6:	1d72      	adds	r2, r6, #5
 80058a8:	4620      	mov	r0, r4
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	f000 fb5e 	bl	8005f6c <_calloc_r>
 80058b0:	b160      	cbz	r0, 80058cc <_Balloc+0x64>
 80058b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058b6:	e00e      	b.n	80058d6 <_Balloc+0x6e>
 80058b8:	2221      	movs	r2, #33	; 0x21
 80058ba:	2104      	movs	r1, #4
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 fb55 	bl	8005f6c <_calloc_r>
 80058c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c4:	60f0      	str	r0, [r6, #12]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e4      	bne.n	8005896 <_Balloc+0x2e>
 80058cc:	2000      	movs	r0, #0
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	6802      	ldr	r2, [r0, #0]
 80058d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058d6:	2300      	movs	r3, #0
 80058d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058dc:	e7f7      	b.n	80058ce <_Balloc+0x66>
 80058de:	bf00      	nop
 80058e0:	08007809 	.word	0x08007809
 80058e4:	0800788c 	.word	0x0800788c

080058e8 <_Bfree>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058ec:	4605      	mov	r5, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	b976      	cbnz	r6, 8005910 <_Bfree+0x28>
 80058f2:	2010      	movs	r0, #16
 80058f4:	f7ff ffa2 	bl	800583c <malloc>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6268      	str	r0, [r5, #36]	; 0x24
 80058fc:	b920      	cbnz	r0, 8005908 <_Bfree+0x20>
 80058fe:	218a      	movs	r1, #138	; 0x8a
 8005900:	4b08      	ldr	r3, [pc, #32]	; (8005924 <_Bfree+0x3c>)
 8005902:	4809      	ldr	r0, [pc, #36]	; (8005928 <_Bfree+0x40>)
 8005904:	f000 fd8e 	bl	8006424 <__assert_func>
 8005908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800590c:	6006      	str	r6, [r0, #0]
 800590e:	60c6      	str	r6, [r0, #12]
 8005910:	b13c      	cbz	r4, 8005922 <_Bfree+0x3a>
 8005912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005914:	6862      	ldr	r2, [r4, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800591c:	6021      	str	r1, [r4, #0]
 800591e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	08007809 	.word	0x08007809
 8005928:	0800788c 	.word	0x0800788c

0800592c <__multadd>:
 800592c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005930:	4607      	mov	r7, r0
 8005932:	460c      	mov	r4, r1
 8005934:	461e      	mov	r6, r3
 8005936:	2000      	movs	r0, #0
 8005938:	690d      	ldr	r5, [r1, #16]
 800593a:	f101 0c14 	add.w	ip, r1, #20
 800593e:	f8dc 3000 	ldr.w	r3, [ip]
 8005942:	3001      	adds	r0, #1
 8005944:	b299      	uxth	r1, r3
 8005946:	fb02 6101 	mla	r1, r2, r1, r6
 800594a:	0c1e      	lsrs	r6, r3, #16
 800594c:	0c0b      	lsrs	r3, r1, #16
 800594e:	fb02 3306 	mla	r3, r2, r6, r3
 8005952:	b289      	uxth	r1, r1
 8005954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005958:	4285      	cmp	r5, r0
 800595a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800595e:	f84c 1b04 	str.w	r1, [ip], #4
 8005962:	dcec      	bgt.n	800593e <__multadd+0x12>
 8005964:	b30e      	cbz	r6, 80059aa <__multadd+0x7e>
 8005966:	68a3      	ldr	r3, [r4, #8]
 8005968:	42ab      	cmp	r3, r5
 800596a:	dc19      	bgt.n	80059a0 <__multadd+0x74>
 800596c:	6861      	ldr	r1, [r4, #4]
 800596e:	4638      	mov	r0, r7
 8005970:	3101      	adds	r1, #1
 8005972:	f7ff ff79 	bl	8005868 <_Balloc>
 8005976:	4680      	mov	r8, r0
 8005978:	b928      	cbnz	r0, 8005986 <__multadd+0x5a>
 800597a:	4602      	mov	r2, r0
 800597c:	21b5      	movs	r1, #181	; 0xb5
 800597e:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <__multadd+0x84>)
 8005980:	480c      	ldr	r0, [pc, #48]	; (80059b4 <__multadd+0x88>)
 8005982:	f000 fd4f 	bl	8006424 <__assert_func>
 8005986:	6922      	ldr	r2, [r4, #16]
 8005988:	f104 010c 	add.w	r1, r4, #12
 800598c:	3202      	adds	r2, #2
 800598e:	0092      	lsls	r2, r2, #2
 8005990:	300c      	adds	r0, #12
 8005992:	f7fe fc3d 	bl	8004210 <memcpy>
 8005996:	4621      	mov	r1, r4
 8005998:	4638      	mov	r0, r7
 800599a:	f7ff ffa5 	bl	80058e8 <_Bfree>
 800599e:	4644      	mov	r4, r8
 80059a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059a4:	3501      	adds	r5, #1
 80059a6:	615e      	str	r6, [r3, #20]
 80059a8:	6125      	str	r5, [r4, #16]
 80059aa:	4620      	mov	r0, r4
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b0:	0800787b 	.word	0x0800787b
 80059b4:	0800788c 	.word	0x0800788c

080059b8 <__hi0bits>:
 80059b8:	0c02      	lsrs	r2, r0, #16
 80059ba:	0412      	lsls	r2, r2, #16
 80059bc:	4603      	mov	r3, r0
 80059be:	b9ca      	cbnz	r2, 80059f4 <__hi0bits+0x3c>
 80059c0:	0403      	lsls	r3, r0, #16
 80059c2:	2010      	movs	r0, #16
 80059c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059c8:	bf04      	itt	eq
 80059ca:	021b      	lsleq	r3, r3, #8
 80059cc:	3008      	addeq	r0, #8
 80059ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059d2:	bf04      	itt	eq
 80059d4:	011b      	lsleq	r3, r3, #4
 80059d6:	3004      	addeq	r0, #4
 80059d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80059dc:	bf04      	itt	eq
 80059de:	009b      	lsleq	r3, r3, #2
 80059e0:	3002      	addeq	r0, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	db05      	blt.n	80059f2 <__hi0bits+0x3a>
 80059e6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80059ea:	f100 0001 	add.w	r0, r0, #1
 80059ee:	bf08      	it	eq
 80059f0:	2020      	moveq	r0, #32
 80059f2:	4770      	bx	lr
 80059f4:	2000      	movs	r0, #0
 80059f6:	e7e5      	b.n	80059c4 <__hi0bits+0xc>

080059f8 <__lo0bits>:
 80059f8:	6803      	ldr	r3, [r0, #0]
 80059fa:	4602      	mov	r2, r0
 80059fc:	f013 0007 	ands.w	r0, r3, #7
 8005a00:	d00b      	beq.n	8005a1a <__lo0bits+0x22>
 8005a02:	07d9      	lsls	r1, r3, #31
 8005a04:	d421      	bmi.n	8005a4a <__lo0bits+0x52>
 8005a06:	0798      	lsls	r0, r3, #30
 8005a08:	bf49      	itett	mi
 8005a0a:	085b      	lsrmi	r3, r3, #1
 8005a0c:	089b      	lsrpl	r3, r3, #2
 8005a0e:	2001      	movmi	r0, #1
 8005a10:	6013      	strmi	r3, [r2, #0]
 8005a12:	bf5c      	itt	pl
 8005a14:	2002      	movpl	r0, #2
 8005a16:	6013      	strpl	r3, [r2, #0]
 8005a18:	4770      	bx	lr
 8005a1a:	b299      	uxth	r1, r3
 8005a1c:	b909      	cbnz	r1, 8005a22 <__lo0bits+0x2a>
 8005a1e:	2010      	movs	r0, #16
 8005a20:	0c1b      	lsrs	r3, r3, #16
 8005a22:	b2d9      	uxtb	r1, r3
 8005a24:	b909      	cbnz	r1, 8005a2a <__lo0bits+0x32>
 8005a26:	3008      	adds	r0, #8
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	0719      	lsls	r1, r3, #28
 8005a2c:	bf04      	itt	eq
 8005a2e:	091b      	lsreq	r3, r3, #4
 8005a30:	3004      	addeq	r0, #4
 8005a32:	0799      	lsls	r1, r3, #30
 8005a34:	bf04      	itt	eq
 8005a36:	089b      	lsreq	r3, r3, #2
 8005a38:	3002      	addeq	r0, #2
 8005a3a:	07d9      	lsls	r1, r3, #31
 8005a3c:	d403      	bmi.n	8005a46 <__lo0bits+0x4e>
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	f100 0001 	add.w	r0, r0, #1
 8005a44:	d003      	beq.n	8005a4e <__lo0bits+0x56>
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	4770      	bx	lr
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	4770      	bx	lr
 8005a4e:	2020      	movs	r0, #32
 8005a50:	4770      	bx	lr
	...

08005a54 <__i2b>:
 8005a54:	b510      	push	{r4, lr}
 8005a56:	460c      	mov	r4, r1
 8005a58:	2101      	movs	r1, #1
 8005a5a:	f7ff ff05 	bl	8005868 <_Balloc>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	b928      	cbnz	r0, 8005a6e <__i2b+0x1a>
 8005a62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a66:	4b04      	ldr	r3, [pc, #16]	; (8005a78 <__i2b+0x24>)
 8005a68:	4804      	ldr	r0, [pc, #16]	; (8005a7c <__i2b+0x28>)
 8005a6a:	f000 fcdb 	bl	8006424 <__assert_func>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	6144      	str	r4, [r0, #20]
 8005a72:	6103      	str	r3, [r0, #16]
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	bf00      	nop
 8005a78:	0800787b 	.word	0x0800787b
 8005a7c:	0800788c 	.word	0x0800788c

08005a80 <__multiply>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	4691      	mov	r9, r2
 8005a86:	690a      	ldr	r2, [r1, #16]
 8005a88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	bfbe      	ittt	lt
 8005a92:	460b      	movlt	r3, r1
 8005a94:	464c      	movlt	r4, r9
 8005a96:	4699      	movlt	r9, r3
 8005a98:	6927      	ldr	r7, [r4, #16]
 8005a9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a9e:	68a3      	ldr	r3, [r4, #8]
 8005aa0:	6861      	ldr	r1, [r4, #4]
 8005aa2:	eb07 060a 	add.w	r6, r7, sl
 8005aa6:	42b3      	cmp	r3, r6
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	bfb8      	it	lt
 8005aac:	3101      	addlt	r1, #1
 8005aae:	f7ff fedb 	bl	8005868 <_Balloc>
 8005ab2:	b930      	cbnz	r0, 8005ac2 <__multiply+0x42>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	f240 115d 	movw	r1, #349	; 0x15d
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <__multiply+0x148>)
 8005abc:	4843      	ldr	r0, [pc, #268]	; (8005bcc <__multiply+0x14c>)
 8005abe:	f000 fcb1 	bl	8006424 <__assert_func>
 8005ac2:	f100 0514 	add.w	r5, r0, #20
 8005ac6:	462b      	mov	r3, r5
 8005ac8:	2200      	movs	r2, #0
 8005aca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ace:	4543      	cmp	r3, r8
 8005ad0:	d321      	bcc.n	8005b16 <__multiply+0x96>
 8005ad2:	f104 0314 	add.w	r3, r4, #20
 8005ad6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ada:	f109 0314 	add.w	r3, r9, #20
 8005ade:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ae2:	9202      	str	r2, [sp, #8]
 8005ae4:	1b3a      	subs	r2, r7, r4
 8005ae6:	3a15      	subs	r2, #21
 8005ae8:	f022 0203 	bic.w	r2, r2, #3
 8005aec:	3204      	adds	r2, #4
 8005aee:	f104 0115 	add.w	r1, r4, #21
 8005af2:	428f      	cmp	r7, r1
 8005af4:	bf38      	it	cc
 8005af6:	2204      	movcc	r2, #4
 8005af8:	9201      	str	r2, [sp, #4]
 8005afa:	9a02      	ldr	r2, [sp, #8]
 8005afc:	9303      	str	r3, [sp, #12]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d80c      	bhi.n	8005b1c <__multiply+0x9c>
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	dd03      	ble.n	8005b0e <__multiply+0x8e>
 8005b06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d059      	beq.n	8005bc2 <__multiply+0x142>
 8005b0e:	6106      	str	r6, [r0, #16]
 8005b10:	b005      	add	sp, #20
 8005b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b16:	f843 2b04 	str.w	r2, [r3], #4
 8005b1a:	e7d8      	b.n	8005ace <__multiply+0x4e>
 8005b1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b20:	f1ba 0f00 	cmp.w	sl, #0
 8005b24:	d023      	beq.n	8005b6e <__multiply+0xee>
 8005b26:	46a9      	mov	r9, r5
 8005b28:	f04f 0c00 	mov.w	ip, #0
 8005b2c:	f104 0e14 	add.w	lr, r4, #20
 8005b30:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b34:	f8d9 1000 	ldr.w	r1, [r9]
 8005b38:	fa1f fb82 	uxth.w	fp, r2
 8005b3c:	b289      	uxth	r1, r1
 8005b3e:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b42:	4461      	add	r1, ip
 8005b44:	f8d9 c000 	ldr.w	ip, [r9]
 8005b48:	0c12      	lsrs	r2, r2, #16
 8005b4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005b4e:	fb0a c202 	mla	r2, sl, r2, ip
 8005b52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b56:	b289      	uxth	r1, r1
 8005b58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b5c:	4577      	cmp	r7, lr
 8005b5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b62:	f849 1b04 	str.w	r1, [r9], #4
 8005b66:	d8e3      	bhi.n	8005b30 <__multiply+0xb0>
 8005b68:	9a01      	ldr	r2, [sp, #4]
 8005b6a:	f845 c002 	str.w	ip, [r5, r2]
 8005b6e:	9a03      	ldr	r2, [sp, #12]
 8005b70:	3304      	adds	r3, #4
 8005b72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b76:	f1b9 0f00 	cmp.w	r9, #0
 8005b7a:	d020      	beq.n	8005bbe <__multiply+0x13e>
 8005b7c:	46ae      	mov	lr, r5
 8005b7e:	f04f 0a00 	mov.w	sl, #0
 8005b82:	6829      	ldr	r1, [r5, #0]
 8005b84:	f104 0c14 	add.w	ip, r4, #20
 8005b88:	f8bc b000 	ldrh.w	fp, [ip]
 8005b8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b90:	b289      	uxth	r1, r1
 8005b92:	fb09 220b 	mla	r2, r9, fp, r2
 8005b96:	4492      	add	sl, r2
 8005b98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005b9c:	f84e 1b04 	str.w	r1, [lr], #4
 8005ba0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005ba4:	f8be 1000 	ldrh.w	r1, [lr]
 8005ba8:	0c12      	lsrs	r2, r2, #16
 8005baa:	fb09 1102 	mla	r1, r9, r2, r1
 8005bae:	4567      	cmp	r7, ip
 8005bb0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005bb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bb8:	d8e6      	bhi.n	8005b88 <__multiply+0x108>
 8005bba:	9a01      	ldr	r2, [sp, #4]
 8005bbc:	50a9      	str	r1, [r5, r2]
 8005bbe:	3504      	adds	r5, #4
 8005bc0:	e79b      	b.n	8005afa <__multiply+0x7a>
 8005bc2:	3e01      	subs	r6, #1
 8005bc4:	e79d      	b.n	8005b02 <__multiply+0x82>
 8005bc6:	bf00      	nop
 8005bc8:	0800787b 	.word	0x0800787b
 8005bcc:	0800788c 	.word	0x0800788c

08005bd0 <__pow5mult>:
 8005bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	4615      	mov	r5, r2
 8005bd6:	f012 0203 	ands.w	r2, r2, #3
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460f      	mov	r7, r1
 8005bde:	d007      	beq.n	8005bf0 <__pow5mult+0x20>
 8005be0:	4c25      	ldr	r4, [pc, #148]	; (8005c78 <__pow5mult+0xa8>)
 8005be2:	3a01      	subs	r2, #1
 8005be4:	2300      	movs	r3, #0
 8005be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bea:	f7ff fe9f 	bl	800592c <__multadd>
 8005bee:	4607      	mov	r7, r0
 8005bf0:	10ad      	asrs	r5, r5, #2
 8005bf2:	d03d      	beq.n	8005c70 <__pow5mult+0xa0>
 8005bf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bf6:	b97c      	cbnz	r4, 8005c18 <__pow5mult+0x48>
 8005bf8:	2010      	movs	r0, #16
 8005bfa:	f7ff fe1f 	bl	800583c <malloc>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	6270      	str	r0, [r6, #36]	; 0x24
 8005c02:	b928      	cbnz	r0, 8005c10 <__pow5mult+0x40>
 8005c04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c08:	4b1c      	ldr	r3, [pc, #112]	; (8005c7c <__pow5mult+0xac>)
 8005c0a:	481d      	ldr	r0, [pc, #116]	; (8005c80 <__pow5mult+0xb0>)
 8005c0c:	f000 fc0a 	bl	8006424 <__assert_func>
 8005c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c14:	6004      	str	r4, [r0, #0]
 8005c16:	60c4      	str	r4, [r0, #12]
 8005c18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c20:	b94c      	cbnz	r4, 8005c36 <__pow5mult+0x66>
 8005c22:	f240 2171 	movw	r1, #625	; 0x271
 8005c26:	4630      	mov	r0, r6
 8005c28:	f7ff ff14 	bl	8005a54 <__i2b>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4604      	mov	r4, r0
 8005c30:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c34:	6003      	str	r3, [r0, #0]
 8005c36:	f04f 0900 	mov.w	r9, #0
 8005c3a:	07eb      	lsls	r3, r5, #31
 8005c3c:	d50a      	bpl.n	8005c54 <__pow5mult+0x84>
 8005c3e:	4639      	mov	r1, r7
 8005c40:	4622      	mov	r2, r4
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff ff1c 	bl	8005a80 <__multiply>
 8005c48:	4680      	mov	r8, r0
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f7ff fe4b 	bl	80058e8 <_Bfree>
 8005c52:	4647      	mov	r7, r8
 8005c54:	106d      	asrs	r5, r5, #1
 8005c56:	d00b      	beq.n	8005c70 <__pow5mult+0xa0>
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	b938      	cbnz	r0, 8005c6c <__pow5mult+0x9c>
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	4621      	mov	r1, r4
 8005c60:	4630      	mov	r0, r6
 8005c62:	f7ff ff0d 	bl	8005a80 <__multiply>
 8005c66:	6020      	str	r0, [r4, #0]
 8005c68:	f8c0 9000 	str.w	r9, [r0]
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	e7e4      	b.n	8005c3a <__pow5mult+0x6a>
 8005c70:	4638      	mov	r0, r7
 8005c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c76:	bf00      	nop
 8005c78:	080079d8 	.word	0x080079d8
 8005c7c:	08007809 	.word	0x08007809
 8005c80:	0800788c 	.word	0x0800788c

08005c84 <__lshift>:
 8005c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	460c      	mov	r4, r1
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	4691      	mov	r9, r2
 8005c8e:	6923      	ldr	r3, [r4, #16]
 8005c90:	6849      	ldr	r1, [r1, #4]
 8005c92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c96:	68a3      	ldr	r3, [r4, #8]
 8005c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c9c:	f108 0601 	add.w	r6, r8, #1
 8005ca0:	42b3      	cmp	r3, r6
 8005ca2:	db0b      	blt.n	8005cbc <__lshift+0x38>
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f7ff fddf 	bl	8005868 <_Balloc>
 8005caa:	4605      	mov	r5, r0
 8005cac:	b948      	cbnz	r0, 8005cc2 <__lshift+0x3e>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cb4:	4b29      	ldr	r3, [pc, #164]	; (8005d5c <__lshift+0xd8>)
 8005cb6:	482a      	ldr	r0, [pc, #168]	; (8005d60 <__lshift+0xdc>)
 8005cb8:	f000 fbb4 	bl	8006424 <__assert_func>
 8005cbc:	3101      	adds	r1, #1
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__lshift+0x1c>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f100 0114 	add.w	r1, r0, #20
 8005cc8:	f100 0210 	add.w	r2, r0, #16
 8005ccc:	4618      	mov	r0, r3
 8005cce:	4553      	cmp	r3, sl
 8005cd0:	db37      	blt.n	8005d42 <__lshift+0xbe>
 8005cd2:	6920      	ldr	r0, [r4, #16]
 8005cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cd8:	f104 0314 	add.w	r3, r4, #20
 8005cdc:	f019 091f 	ands.w	r9, r9, #31
 8005ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ce4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ce8:	d02f      	beq.n	8005d4a <__lshift+0xc6>
 8005cea:	468a      	mov	sl, r1
 8005cec:	f04f 0c00 	mov.w	ip, #0
 8005cf0:	f1c9 0e20 	rsb	lr, r9, #32
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	fa02 f209 	lsl.w	r2, r2, r9
 8005cfa:	ea42 020c 	orr.w	r2, r2, ip
 8005cfe:	f84a 2b04 	str.w	r2, [sl], #4
 8005d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d06:	4298      	cmp	r0, r3
 8005d08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005d0c:	d8f2      	bhi.n	8005cf4 <__lshift+0x70>
 8005d0e:	1b03      	subs	r3, r0, r4
 8005d10:	3b15      	subs	r3, #21
 8005d12:	f023 0303 	bic.w	r3, r3, #3
 8005d16:	3304      	adds	r3, #4
 8005d18:	f104 0215 	add.w	r2, r4, #21
 8005d1c:	4290      	cmp	r0, r2
 8005d1e:	bf38      	it	cc
 8005d20:	2304      	movcc	r3, #4
 8005d22:	f841 c003 	str.w	ip, [r1, r3]
 8005d26:	f1bc 0f00 	cmp.w	ip, #0
 8005d2a:	d001      	beq.n	8005d30 <__lshift+0xac>
 8005d2c:	f108 0602 	add.w	r6, r8, #2
 8005d30:	3e01      	subs	r6, #1
 8005d32:	4638      	mov	r0, r7
 8005d34:	4621      	mov	r1, r4
 8005d36:	612e      	str	r6, [r5, #16]
 8005d38:	f7ff fdd6 	bl	80058e8 <_Bfree>
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d42:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d46:	3301      	adds	r3, #1
 8005d48:	e7c1      	b.n	8005cce <__lshift+0x4a>
 8005d4a:	3904      	subs	r1, #4
 8005d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d50:	4298      	cmp	r0, r3
 8005d52:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d56:	d8f9      	bhi.n	8005d4c <__lshift+0xc8>
 8005d58:	e7ea      	b.n	8005d30 <__lshift+0xac>
 8005d5a:	bf00      	nop
 8005d5c:	0800787b 	.word	0x0800787b
 8005d60:	0800788c 	.word	0x0800788c

08005d64 <__mcmp>:
 8005d64:	4603      	mov	r3, r0
 8005d66:	690a      	ldr	r2, [r1, #16]
 8005d68:	6900      	ldr	r0, [r0, #16]
 8005d6a:	b530      	push	{r4, r5, lr}
 8005d6c:	1a80      	subs	r0, r0, r2
 8005d6e:	d10d      	bne.n	8005d8c <__mcmp+0x28>
 8005d70:	3314      	adds	r3, #20
 8005d72:	3114      	adds	r1, #20
 8005d74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d84:	4295      	cmp	r5, r2
 8005d86:	d002      	beq.n	8005d8e <__mcmp+0x2a>
 8005d88:	d304      	bcc.n	8005d94 <__mcmp+0x30>
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	bd30      	pop	{r4, r5, pc}
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	d3f4      	bcc.n	8005d7c <__mcmp+0x18>
 8005d92:	e7fb      	b.n	8005d8c <__mcmp+0x28>
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295
 8005d98:	e7f8      	b.n	8005d8c <__mcmp+0x28>
	...

08005d9c <__mdiff>:
 8005d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	460d      	mov	r5, r1
 8005da2:	4607      	mov	r7, r0
 8005da4:	4611      	mov	r1, r2
 8005da6:	4628      	mov	r0, r5
 8005da8:	4614      	mov	r4, r2
 8005daa:	f7ff ffdb 	bl	8005d64 <__mcmp>
 8005dae:	1e06      	subs	r6, r0, #0
 8005db0:	d111      	bne.n	8005dd6 <__mdiff+0x3a>
 8005db2:	4631      	mov	r1, r6
 8005db4:	4638      	mov	r0, r7
 8005db6:	f7ff fd57 	bl	8005868 <_Balloc>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	b928      	cbnz	r0, 8005dca <__mdiff+0x2e>
 8005dbe:	f240 2132 	movw	r1, #562	; 0x232
 8005dc2:	4b3a      	ldr	r3, [pc, #232]	; (8005eac <__mdiff+0x110>)
 8005dc4:	483a      	ldr	r0, [pc, #232]	; (8005eb0 <__mdiff+0x114>)
 8005dc6:	f000 fb2d 	bl	8006424 <__assert_func>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	bfa4      	itt	ge
 8005dd8:	4623      	movge	r3, r4
 8005dda:	462c      	movge	r4, r5
 8005ddc:	4638      	mov	r0, r7
 8005dde:	6861      	ldr	r1, [r4, #4]
 8005de0:	bfa6      	itte	ge
 8005de2:	461d      	movge	r5, r3
 8005de4:	2600      	movge	r6, #0
 8005de6:	2601      	movlt	r6, #1
 8005de8:	f7ff fd3e 	bl	8005868 <_Balloc>
 8005dec:	4602      	mov	r2, r0
 8005dee:	b918      	cbnz	r0, 8005df8 <__mdiff+0x5c>
 8005df0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005df4:	4b2d      	ldr	r3, [pc, #180]	; (8005eac <__mdiff+0x110>)
 8005df6:	e7e5      	b.n	8005dc4 <__mdiff+0x28>
 8005df8:	f102 0814 	add.w	r8, r2, #20
 8005dfc:	46c2      	mov	sl, r8
 8005dfe:	f04f 0c00 	mov.w	ip, #0
 8005e02:	6927      	ldr	r7, [r4, #16]
 8005e04:	60c6      	str	r6, [r0, #12]
 8005e06:	692e      	ldr	r6, [r5, #16]
 8005e08:	f104 0014 	add.w	r0, r4, #20
 8005e0c:	f105 0914 	add.w	r9, r5, #20
 8005e10:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005e14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e18:	3410      	adds	r4, #16
 8005e1a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005e1e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e22:	fa1f f18b 	uxth.w	r1, fp
 8005e26:	448c      	add	ip, r1
 8005e28:	b299      	uxth	r1, r3
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	ebac 0101 	sub.w	r1, ip, r1
 8005e30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e34:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e38:	b289      	uxth	r1, r1
 8005e3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e3e:	454e      	cmp	r6, r9
 8005e40:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005e44:	f84a 3b04 	str.w	r3, [sl], #4
 8005e48:	d8e7      	bhi.n	8005e1a <__mdiff+0x7e>
 8005e4a:	1b73      	subs	r3, r6, r5
 8005e4c:	3b15      	subs	r3, #21
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	3515      	adds	r5, #21
 8005e54:	3304      	adds	r3, #4
 8005e56:	42ae      	cmp	r6, r5
 8005e58:	bf38      	it	cc
 8005e5a:	2304      	movcc	r3, #4
 8005e5c:	4418      	add	r0, r3
 8005e5e:	4443      	add	r3, r8
 8005e60:	461e      	mov	r6, r3
 8005e62:	4605      	mov	r5, r0
 8005e64:	4575      	cmp	r5, lr
 8005e66:	d30e      	bcc.n	8005e86 <__mdiff+0xea>
 8005e68:	f10e 0103 	add.w	r1, lr, #3
 8005e6c:	1a09      	subs	r1, r1, r0
 8005e6e:	f021 0103 	bic.w	r1, r1, #3
 8005e72:	3803      	subs	r0, #3
 8005e74:	4586      	cmp	lr, r0
 8005e76:	bf38      	it	cc
 8005e78:	2100      	movcc	r1, #0
 8005e7a:	4419      	add	r1, r3
 8005e7c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e80:	b18b      	cbz	r3, 8005ea6 <__mdiff+0x10a>
 8005e82:	6117      	str	r7, [r2, #16]
 8005e84:	e7a4      	b.n	8005dd0 <__mdiff+0x34>
 8005e86:	f855 8b04 	ldr.w	r8, [r5], #4
 8005e8a:	fa1f f188 	uxth.w	r1, r8
 8005e8e:	4461      	add	r1, ip
 8005e90:	140c      	asrs	r4, r1, #16
 8005e92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e96:	b289      	uxth	r1, r1
 8005e98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005e9c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005ea0:	f846 1b04 	str.w	r1, [r6], #4
 8005ea4:	e7de      	b.n	8005e64 <__mdiff+0xc8>
 8005ea6:	3f01      	subs	r7, #1
 8005ea8:	e7e8      	b.n	8005e7c <__mdiff+0xe0>
 8005eaa:	bf00      	nop
 8005eac:	0800787b 	.word	0x0800787b
 8005eb0:	0800788c 	.word	0x0800788c

08005eb4 <__d2b>:
 8005eb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005eb8:	2101      	movs	r1, #1
 8005eba:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005ebe:	4690      	mov	r8, r2
 8005ec0:	461d      	mov	r5, r3
 8005ec2:	f7ff fcd1 	bl	8005868 <_Balloc>
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	b930      	cbnz	r0, 8005ed8 <__d2b+0x24>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	f240 310a 	movw	r1, #778	; 0x30a
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <__d2b+0xb0>)
 8005ed2:	4825      	ldr	r0, [pc, #148]	; (8005f68 <__d2b+0xb4>)
 8005ed4:	f000 faa6 	bl	8006424 <__assert_func>
 8005ed8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005edc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005ee0:	bb2d      	cbnz	r5, 8005f2e <__d2b+0x7a>
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	f1b8 0300 	subs.w	r3, r8, #0
 8005ee8:	d026      	beq.n	8005f38 <__d2b+0x84>
 8005eea:	4668      	mov	r0, sp
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	f7ff fd83 	bl	80059f8 <__lo0bits>
 8005ef2:	9900      	ldr	r1, [sp, #0]
 8005ef4:	b1f0      	cbz	r0, 8005f34 <__d2b+0x80>
 8005ef6:	9a01      	ldr	r2, [sp, #4]
 8005ef8:	f1c0 0320 	rsb	r3, r0, #32
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	430b      	orrs	r3, r1
 8005f02:	40c2      	lsrs	r2, r0
 8005f04:	6163      	str	r3, [r4, #20]
 8005f06:	9201      	str	r2, [sp, #4]
 8005f08:	9b01      	ldr	r3, [sp, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bf14      	ite	ne
 8005f0e:	2102      	movne	r1, #2
 8005f10:	2101      	moveq	r1, #1
 8005f12:	61a3      	str	r3, [r4, #24]
 8005f14:	6121      	str	r1, [r4, #16]
 8005f16:	b1c5      	cbz	r5, 8005f4a <__d2b+0x96>
 8005f18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f1c:	4405      	add	r5, r0
 8005f1e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f22:	603d      	str	r5, [r7, #0]
 8005f24:	6030      	str	r0, [r6, #0]
 8005f26:	4620      	mov	r0, r4
 8005f28:	b002      	add	sp, #8
 8005f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f32:	e7d6      	b.n	8005ee2 <__d2b+0x2e>
 8005f34:	6161      	str	r1, [r4, #20]
 8005f36:	e7e7      	b.n	8005f08 <__d2b+0x54>
 8005f38:	a801      	add	r0, sp, #4
 8005f3a:	f7ff fd5d 	bl	80059f8 <__lo0bits>
 8005f3e:	2101      	movs	r1, #1
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	6121      	str	r1, [r4, #16]
 8005f44:	6163      	str	r3, [r4, #20]
 8005f46:	3020      	adds	r0, #32
 8005f48:	e7e5      	b.n	8005f16 <__d2b+0x62>
 8005f4a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005f4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f52:	6038      	str	r0, [r7, #0]
 8005f54:	6918      	ldr	r0, [r3, #16]
 8005f56:	f7ff fd2f 	bl	80059b8 <__hi0bits>
 8005f5a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005f5e:	6031      	str	r1, [r6, #0]
 8005f60:	e7e1      	b.n	8005f26 <__d2b+0x72>
 8005f62:	bf00      	nop
 8005f64:	0800787b 	.word	0x0800787b
 8005f68:	0800788c 	.word	0x0800788c

08005f6c <_calloc_r>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	fba1 5402 	umull	r5, r4, r1, r2
 8005f72:	b934      	cbnz	r4, 8005f82 <_calloc_r+0x16>
 8005f74:	4629      	mov	r1, r5
 8005f76:	f000 f875 	bl	8006064 <_malloc_r>
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	b928      	cbnz	r0, 8005f8a <_calloc_r+0x1e>
 8005f7e:	4630      	mov	r0, r6
 8005f80:	bd70      	pop	{r4, r5, r6, pc}
 8005f82:	220c      	movs	r2, #12
 8005f84:	2600      	movs	r6, #0
 8005f86:	6002      	str	r2, [r0, #0]
 8005f88:	e7f9      	b.n	8005f7e <_calloc_r+0x12>
 8005f8a:	462a      	mov	r2, r5
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	f7fe f94d 	bl	800422c <memset>
 8005f92:	e7f4      	b.n	8005f7e <_calloc_r+0x12>

08005f94 <_free_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4605      	mov	r5, r0
 8005f98:	2900      	cmp	r1, #0
 8005f9a:	d040      	beq.n	800601e <_free_r+0x8a>
 8005f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa0:	1f0c      	subs	r4, r1, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bfb8      	it	lt
 8005fa6:	18e4      	addlt	r4, r4, r3
 8005fa8:	f000 fa98 	bl	80064dc <__malloc_lock>
 8005fac:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <_free_r+0x8c>)
 8005fae:	6813      	ldr	r3, [r2, #0]
 8005fb0:	b933      	cbnz	r3, 8005fc0 <_free_r+0x2c>
 8005fb2:	6063      	str	r3, [r4, #4]
 8005fb4:	6014      	str	r4, [r2, #0]
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fbc:	f000 ba94 	b.w	80064e8 <__malloc_unlock>
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d908      	bls.n	8005fd6 <_free_r+0x42>
 8005fc4:	6820      	ldr	r0, [r4, #0]
 8005fc6:	1821      	adds	r1, r4, r0
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	bf01      	itttt	eq
 8005fcc:	6819      	ldreq	r1, [r3, #0]
 8005fce:	685b      	ldreq	r3, [r3, #4]
 8005fd0:	1809      	addeq	r1, r1, r0
 8005fd2:	6021      	streq	r1, [r4, #0]
 8005fd4:	e7ed      	b.n	8005fb2 <_free_r+0x1e>
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	b10b      	cbz	r3, 8005fe0 <_free_r+0x4c>
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	d9fa      	bls.n	8005fd6 <_free_r+0x42>
 8005fe0:	6811      	ldr	r1, [r2, #0]
 8005fe2:	1850      	adds	r0, r2, r1
 8005fe4:	42a0      	cmp	r0, r4
 8005fe6:	d10b      	bne.n	8006000 <_free_r+0x6c>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	4401      	add	r1, r0
 8005fec:	1850      	adds	r0, r2, r1
 8005fee:	4283      	cmp	r3, r0
 8005ff0:	6011      	str	r1, [r2, #0]
 8005ff2:	d1e0      	bne.n	8005fb6 <_free_r+0x22>
 8005ff4:	6818      	ldr	r0, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	4401      	add	r1, r0
 8005ffa:	6011      	str	r1, [r2, #0]
 8005ffc:	6053      	str	r3, [r2, #4]
 8005ffe:	e7da      	b.n	8005fb6 <_free_r+0x22>
 8006000:	d902      	bls.n	8006008 <_free_r+0x74>
 8006002:	230c      	movs	r3, #12
 8006004:	602b      	str	r3, [r5, #0]
 8006006:	e7d6      	b.n	8005fb6 <_free_r+0x22>
 8006008:	6820      	ldr	r0, [r4, #0]
 800600a:	1821      	adds	r1, r4, r0
 800600c:	428b      	cmp	r3, r1
 800600e:	bf01      	itttt	eq
 8006010:	6819      	ldreq	r1, [r3, #0]
 8006012:	685b      	ldreq	r3, [r3, #4]
 8006014:	1809      	addeq	r1, r1, r0
 8006016:	6021      	streq	r1, [r4, #0]
 8006018:	6063      	str	r3, [r4, #4]
 800601a:	6054      	str	r4, [r2, #4]
 800601c:	e7cb      	b.n	8005fb6 <_free_r+0x22>
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	200004e8 	.word	0x200004e8

08006024 <sbrk_aligned>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	4e0e      	ldr	r6, [pc, #56]	; (8006060 <sbrk_aligned+0x3c>)
 8006028:	460c      	mov	r4, r1
 800602a:	6831      	ldr	r1, [r6, #0]
 800602c:	4605      	mov	r5, r0
 800602e:	b911      	cbnz	r1, 8006036 <sbrk_aligned+0x12>
 8006030:	f000 f9e8 	bl	8006404 <_sbrk_r>
 8006034:	6030      	str	r0, [r6, #0]
 8006036:	4621      	mov	r1, r4
 8006038:	4628      	mov	r0, r5
 800603a:	f000 f9e3 	bl	8006404 <_sbrk_r>
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	d00a      	beq.n	8006058 <sbrk_aligned+0x34>
 8006042:	1cc4      	adds	r4, r0, #3
 8006044:	f024 0403 	bic.w	r4, r4, #3
 8006048:	42a0      	cmp	r0, r4
 800604a:	d007      	beq.n	800605c <sbrk_aligned+0x38>
 800604c:	1a21      	subs	r1, r4, r0
 800604e:	4628      	mov	r0, r5
 8006050:	f000 f9d8 	bl	8006404 <_sbrk_r>
 8006054:	3001      	adds	r0, #1
 8006056:	d101      	bne.n	800605c <sbrk_aligned+0x38>
 8006058:	f04f 34ff 	mov.w	r4, #4294967295
 800605c:	4620      	mov	r0, r4
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	200004ec 	.word	0x200004ec

08006064 <_malloc_r>:
 8006064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006068:	1ccd      	adds	r5, r1, #3
 800606a:	f025 0503 	bic.w	r5, r5, #3
 800606e:	3508      	adds	r5, #8
 8006070:	2d0c      	cmp	r5, #12
 8006072:	bf38      	it	cc
 8006074:	250c      	movcc	r5, #12
 8006076:	2d00      	cmp	r5, #0
 8006078:	4607      	mov	r7, r0
 800607a:	db01      	blt.n	8006080 <_malloc_r+0x1c>
 800607c:	42a9      	cmp	r1, r5
 800607e:	d905      	bls.n	800608c <_malloc_r+0x28>
 8006080:	230c      	movs	r3, #12
 8006082:	2600      	movs	r6, #0
 8006084:	603b      	str	r3, [r7, #0]
 8006086:	4630      	mov	r0, r6
 8006088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608c:	4e2e      	ldr	r6, [pc, #184]	; (8006148 <_malloc_r+0xe4>)
 800608e:	f000 fa25 	bl	80064dc <__malloc_lock>
 8006092:	6833      	ldr	r3, [r6, #0]
 8006094:	461c      	mov	r4, r3
 8006096:	bb34      	cbnz	r4, 80060e6 <_malloc_r+0x82>
 8006098:	4629      	mov	r1, r5
 800609a:	4638      	mov	r0, r7
 800609c:	f7ff ffc2 	bl	8006024 <sbrk_aligned>
 80060a0:	1c43      	adds	r3, r0, #1
 80060a2:	4604      	mov	r4, r0
 80060a4:	d14d      	bne.n	8006142 <_malloc_r+0xde>
 80060a6:	6834      	ldr	r4, [r6, #0]
 80060a8:	4626      	mov	r6, r4
 80060aa:	2e00      	cmp	r6, #0
 80060ac:	d140      	bne.n	8006130 <_malloc_r+0xcc>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	4631      	mov	r1, r6
 80060b2:	4638      	mov	r0, r7
 80060b4:	eb04 0803 	add.w	r8, r4, r3
 80060b8:	f000 f9a4 	bl	8006404 <_sbrk_r>
 80060bc:	4580      	cmp	r8, r0
 80060be:	d13a      	bne.n	8006136 <_malloc_r+0xd2>
 80060c0:	6821      	ldr	r1, [r4, #0]
 80060c2:	3503      	adds	r5, #3
 80060c4:	1a6d      	subs	r5, r5, r1
 80060c6:	f025 0503 	bic.w	r5, r5, #3
 80060ca:	3508      	adds	r5, #8
 80060cc:	2d0c      	cmp	r5, #12
 80060ce:	bf38      	it	cc
 80060d0:	250c      	movcc	r5, #12
 80060d2:	4638      	mov	r0, r7
 80060d4:	4629      	mov	r1, r5
 80060d6:	f7ff ffa5 	bl	8006024 <sbrk_aligned>
 80060da:	3001      	adds	r0, #1
 80060dc:	d02b      	beq.n	8006136 <_malloc_r+0xd2>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	442b      	add	r3, r5
 80060e2:	6023      	str	r3, [r4, #0]
 80060e4:	e00e      	b.n	8006104 <_malloc_r+0xa0>
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	1b52      	subs	r2, r2, r5
 80060ea:	d41e      	bmi.n	800612a <_malloc_r+0xc6>
 80060ec:	2a0b      	cmp	r2, #11
 80060ee:	d916      	bls.n	800611e <_malloc_r+0xba>
 80060f0:	1961      	adds	r1, r4, r5
 80060f2:	42a3      	cmp	r3, r4
 80060f4:	6025      	str	r5, [r4, #0]
 80060f6:	bf18      	it	ne
 80060f8:	6059      	strne	r1, [r3, #4]
 80060fa:	6863      	ldr	r3, [r4, #4]
 80060fc:	bf08      	it	eq
 80060fe:	6031      	streq	r1, [r6, #0]
 8006100:	5162      	str	r2, [r4, r5]
 8006102:	604b      	str	r3, [r1, #4]
 8006104:	4638      	mov	r0, r7
 8006106:	f104 060b 	add.w	r6, r4, #11
 800610a:	f000 f9ed 	bl	80064e8 <__malloc_unlock>
 800610e:	f026 0607 	bic.w	r6, r6, #7
 8006112:	1d23      	adds	r3, r4, #4
 8006114:	1af2      	subs	r2, r6, r3
 8006116:	d0b6      	beq.n	8006086 <_malloc_r+0x22>
 8006118:	1b9b      	subs	r3, r3, r6
 800611a:	50a3      	str	r3, [r4, r2]
 800611c:	e7b3      	b.n	8006086 <_malloc_r+0x22>
 800611e:	6862      	ldr	r2, [r4, #4]
 8006120:	42a3      	cmp	r3, r4
 8006122:	bf0c      	ite	eq
 8006124:	6032      	streq	r2, [r6, #0]
 8006126:	605a      	strne	r2, [r3, #4]
 8006128:	e7ec      	b.n	8006104 <_malloc_r+0xa0>
 800612a:	4623      	mov	r3, r4
 800612c:	6864      	ldr	r4, [r4, #4]
 800612e:	e7b2      	b.n	8006096 <_malloc_r+0x32>
 8006130:	4634      	mov	r4, r6
 8006132:	6876      	ldr	r6, [r6, #4]
 8006134:	e7b9      	b.n	80060aa <_malloc_r+0x46>
 8006136:	230c      	movs	r3, #12
 8006138:	4638      	mov	r0, r7
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	f000 f9d4 	bl	80064e8 <__malloc_unlock>
 8006140:	e7a1      	b.n	8006086 <_malloc_r+0x22>
 8006142:	6025      	str	r5, [r4, #0]
 8006144:	e7de      	b.n	8006104 <_malloc_r+0xa0>
 8006146:	bf00      	nop
 8006148:	200004e8 	.word	0x200004e8

0800614c <__ssputs_r>:
 800614c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	688e      	ldr	r6, [r1, #8]
 8006152:	4682      	mov	sl, r0
 8006154:	429e      	cmp	r6, r3
 8006156:	460c      	mov	r4, r1
 8006158:	4690      	mov	r8, r2
 800615a:	461f      	mov	r7, r3
 800615c:	d838      	bhi.n	80061d0 <__ssputs_r+0x84>
 800615e:	898a      	ldrh	r2, [r1, #12]
 8006160:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006164:	d032      	beq.n	80061cc <__ssputs_r+0x80>
 8006166:	6825      	ldr	r5, [r4, #0]
 8006168:	6909      	ldr	r1, [r1, #16]
 800616a:	3301      	adds	r3, #1
 800616c:	eba5 0901 	sub.w	r9, r5, r1
 8006170:	6965      	ldr	r5, [r4, #20]
 8006172:	444b      	add	r3, r9
 8006174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800617c:	106d      	asrs	r5, r5, #1
 800617e:	429d      	cmp	r5, r3
 8006180:	bf38      	it	cc
 8006182:	461d      	movcc	r5, r3
 8006184:	0553      	lsls	r3, r2, #21
 8006186:	d531      	bpl.n	80061ec <__ssputs_r+0xa0>
 8006188:	4629      	mov	r1, r5
 800618a:	f7ff ff6b 	bl	8006064 <_malloc_r>
 800618e:	4606      	mov	r6, r0
 8006190:	b950      	cbnz	r0, 80061a8 <__ssputs_r+0x5c>
 8006192:	230c      	movs	r3, #12
 8006194:	f04f 30ff 	mov.w	r0, #4294967295
 8006198:	f8ca 3000 	str.w	r3, [sl]
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061a2:	81a3      	strh	r3, [r4, #12]
 80061a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a8:	464a      	mov	r2, r9
 80061aa:	6921      	ldr	r1, [r4, #16]
 80061ac:	f7fe f830 	bl	8004210 <memcpy>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	6126      	str	r6, [r4, #16]
 80061be:	444e      	add	r6, r9
 80061c0:	6026      	str	r6, [r4, #0]
 80061c2:	463e      	mov	r6, r7
 80061c4:	6165      	str	r5, [r4, #20]
 80061c6:	eba5 0509 	sub.w	r5, r5, r9
 80061ca:	60a5      	str	r5, [r4, #8]
 80061cc:	42be      	cmp	r6, r7
 80061ce:	d900      	bls.n	80061d2 <__ssputs_r+0x86>
 80061d0:	463e      	mov	r6, r7
 80061d2:	4632      	mov	r2, r6
 80061d4:	4641      	mov	r1, r8
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	f000 f966 	bl	80064a8 <memmove>
 80061dc:	68a3      	ldr	r3, [r4, #8]
 80061de:	2000      	movs	r0, #0
 80061e0:	1b9b      	subs	r3, r3, r6
 80061e2:	60a3      	str	r3, [r4, #8]
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	4433      	add	r3, r6
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	e7db      	b.n	80061a4 <__ssputs_r+0x58>
 80061ec:	462a      	mov	r2, r5
 80061ee:	f000 f981 	bl	80064f4 <_realloc_r>
 80061f2:	4606      	mov	r6, r0
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d1e1      	bne.n	80061bc <__ssputs_r+0x70>
 80061f8:	4650      	mov	r0, sl
 80061fa:	6921      	ldr	r1, [r4, #16]
 80061fc:	f7ff feca 	bl	8005f94 <_free_r>
 8006200:	e7c7      	b.n	8006192 <__ssputs_r+0x46>
	...

08006204 <_svfiprintf_r>:
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	4698      	mov	r8, r3
 800620a:	898b      	ldrh	r3, [r1, #12]
 800620c:	4607      	mov	r7, r0
 800620e:	061b      	lsls	r3, r3, #24
 8006210:	460d      	mov	r5, r1
 8006212:	4614      	mov	r4, r2
 8006214:	b09d      	sub	sp, #116	; 0x74
 8006216:	d50e      	bpl.n	8006236 <_svfiprintf_r+0x32>
 8006218:	690b      	ldr	r3, [r1, #16]
 800621a:	b963      	cbnz	r3, 8006236 <_svfiprintf_r+0x32>
 800621c:	2140      	movs	r1, #64	; 0x40
 800621e:	f7ff ff21 	bl	8006064 <_malloc_r>
 8006222:	6028      	str	r0, [r5, #0]
 8006224:	6128      	str	r0, [r5, #16]
 8006226:	b920      	cbnz	r0, 8006232 <_svfiprintf_r+0x2e>
 8006228:	230c      	movs	r3, #12
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	e0d1      	b.n	80063d6 <_svfiprintf_r+0x1d2>
 8006232:	2340      	movs	r3, #64	; 0x40
 8006234:	616b      	str	r3, [r5, #20]
 8006236:	2300      	movs	r3, #0
 8006238:	9309      	str	r3, [sp, #36]	; 0x24
 800623a:	2320      	movs	r3, #32
 800623c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006240:	2330      	movs	r3, #48	; 0x30
 8006242:	f04f 0901 	mov.w	r9, #1
 8006246:	f8cd 800c 	str.w	r8, [sp, #12]
 800624a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80063f0 <_svfiprintf_r+0x1ec>
 800624e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006252:	4623      	mov	r3, r4
 8006254:	469a      	mov	sl, r3
 8006256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800625a:	b10a      	cbz	r2, 8006260 <_svfiprintf_r+0x5c>
 800625c:	2a25      	cmp	r2, #37	; 0x25
 800625e:	d1f9      	bne.n	8006254 <_svfiprintf_r+0x50>
 8006260:	ebba 0b04 	subs.w	fp, sl, r4
 8006264:	d00b      	beq.n	800627e <_svfiprintf_r+0x7a>
 8006266:	465b      	mov	r3, fp
 8006268:	4622      	mov	r2, r4
 800626a:	4629      	mov	r1, r5
 800626c:	4638      	mov	r0, r7
 800626e:	f7ff ff6d 	bl	800614c <__ssputs_r>
 8006272:	3001      	adds	r0, #1
 8006274:	f000 80aa 	beq.w	80063cc <_svfiprintf_r+0x1c8>
 8006278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800627a:	445a      	add	r2, fp
 800627c:	9209      	str	r2, [sp, #36]	; 0x24
 800627e:	f89a 3000 	ldrb.w	r3, [sl]
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 80a2 	beq.w	80063cc <_svfiprintf_r+0x1c8>
 8006288:	2300      	movs	r3, #0
 800628a:	f04f 32ff 	mov.w	r2, #4294967295
 800628e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006292:	f10a 0a01 	add.w	sl, sl, #1
 8006296:	9304      	str	r3, [sp, #16]
 8006298:	9307      	str	r3, [sp, #28]
 800629a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800629e:	931a      	str	r3, [sp, #104]	; 0x68
 80062a0:	4654      	mov	r4, sl
 80062a2:	2205      	movs	r2, #5
 80062a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a8:	4851      	ldr	r0, [pc, #324]	; (80063f0 <_svfiprintf_r+0x1ec>)
 80062aa:	f7ff facf 	bl	800584c <memchr>
 80062ae:	9a04      	ldr	r2, [sp, #16]
 80062b0:	b9d8      	cbnz	r0, 80062ea <_svfiprintf_r+0xe6>
 80062b2:	06d0      	lsls	r0, r2, #27
 80062b4:	bf44      	itt	mi
 80062b6:	2320      	movmi	r3, #32
 80062b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062bc:	0711      	lsls	r1, r2, #28
 80062be:	bf44      	itt	mi
 80062c0:	232b      	movmi	r3, #43	; 0x2b
 80062c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062c6:	f89a 3000 	ldrb.w	r3, [sl]
 80062ca:	2b2a      	cmp	r3, #42	; 0x2a
 80062cc:	d015      	beq.n	80062fa <_svfiprintf_r+0xf6>
 80062ce:	4654      	mov	r4, sl
 80062d0:	2000      	movs	r0, #0
 80062d2:	f04f 0c0a 	mov.w	ip, #10
 80062d6:	9a07      	ldr	r2, [sp, #28]
 80062d8:	4621      	mov	r1, r4
 80062da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062de:	3b30      	subs	r3, #48	; 0x30
 80062e0:	2b09      	cmp	r3, #9
 80062e2:	d94e      	bls.n	8006382 <_svfiprintf_r+0x17e>
 80062e4:	b1b0      	cbz	r0, 8006314 <_svfiprintf_r+0x110>
 80062e6:	9207      	str	r2, [sp, #28]
 80062e8:	e014      	b.n	8006314 <_svfiprintf_r+0x110>
 80062ea:	eba0 0308 	sub.w	r3, r0, r8
 80062ee:	fa09 f303 	lsl.w	r3, r9, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	46a2      	mov	sl, r4
 80062f6:	9304      	str	r3, [sp, #16]
 80062f8:	e7d2      	b.n	80062a0 <_svfiprintf_r+0x9c>
 80062fa:	9b03      	ldr	r3, [sp, #12]
 80062fc:	1d19      	adds	r1, r3, #4
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	9103      	str	r1, [sp, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	bfbb      	ittet	lt
 8006306:	425b      	neglt	r3, r3
 8006308:	f042 0202 	orrlt.w	r2, r2, #2
 800630c:	9307      	strge	r3, [sp, #28]
 800630e:	9307      	strlt	r3, [sp, #28]
 8006310:	bfb8      	it	lt
 8006312:	9204      	strlt	r2, [sp, #16]
 8006314:	7823      	ldrb	r3, [r4, #0]
 8006316:	2b2e      	cmp	r3, #46	; 0x2e
 8006318:	d10c      	bne.n	8006334 <_svfiprintf_r+0x130>
 800631a:	7863      	ldrb	r3, [r4, #1]
 800631c:	2b2a      	cmp	r3, #42	; 0x2a
 800631e:	d135      	bne.n	800638c <_svfiprintf_r+0x188>
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	3402      	adds	r4, #2
 8006324:	1d1a      	adds	r2, r3, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	9203      	str	r2, [sp, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	bfb8      	it	lt
 800632e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80063f4 <_svfiprintf_r+0x1f0>
 8006338:	2203      	movs	r2, #3
 800633a:	4650      	mov	r0, sl
 800633c:	7821      	ldrb	r1, [r4, #0]
 800633e:	f7ff fa85 	bl	800584c <memchr>
 8006342:	b140      	cbz	r0, 8006356 <_svfiprintf_r+0x152>
 8006344:	2340      	movs	r3, #64	; 0x40
 8006346:	eba0 000a 	sub.w	r0, r0, sl
 800634a:	fa03 f000 	lsl.w	r0, r3, r0
 800634e:	9b04      	ldr	r3, [sp, #16]
 8006350:	3401      	adds	r4, #1
 8006352:	4303      	orrs	r3, r0
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800635a:	2206      	movs	r2, #6
 800635c:	4826      	ldr	r0, [pc, #152]	; (80063f8 <_svfiprintf_r+0x1f4>)
 800635e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006362:	f7ff fa73 	bl	800584c <memchr>
 8006366:	2800      	cmp	r0, #0
 8006368:	d038      	beq.n	80063dc <_svfiprintf_r+0x1d8>
 800636a:	4b24      	ldr	r3, [pc, #144]	; (80063fc <_svfiprintf_r+0x1f8>)
 800636c:	bb1b      	cbnz	r3, 80063b6 <_svfiprintf_r+0x1b2>
 800636e:	9b03      	ldr	r3, [sp, #12]
 8006370:	3307      	adds	r3, #7
 8006372:	f023 0307 	bic.w	r3, r3, #7
 8006376:	3308      	adds	r3, #8
 8006378:	9303      	str	r3, [sp, #12]
 800637a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800637c:	4433      	add	r3, r6
 800637e:	9309      	str	r3, [sp, #36]	; 0x24
 8006380:	e767      	b.n	8006252 <_svfiprintf_r+0x4e>
 8006382:	460c      	mov	r4, r1
 8006384:	2001      	movs	r0, #1
 8006386:	fb0c 3202 	mla	r2, ip, r2, r3
 800638a:	e7a5      	b.n	80062d8 <_svfiprintf_r+0xd4>
 800638c:	2300      	movs	r3, #0
 800638e:	f04f 0c0a 	mov.w	ip, #10
 8006392:	4619      	mov	r1, r3
 8006394:	3401      	adds	r4, #1
 8006396:	9305      	str	r3, [sp, #20]
 8006398:	4620      	mov	r0, r4
 800639a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800639e:	3a30      	subs	r2, #48	; 0x30
 80063a0:	2a09      	cmp	r2, #9
 80063a2:	d903      	bls.n	80063ac <_svfiprintf_r+0x1a8>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d0c5      	beq.n	8006334 <_svfiprintf_r+0x130>
 80063a8:	9105      	str	r1, [sp, #20]
 80063aa:	e7c3      	b.n	8006334 <_svfiprintf_r+0x130>
 80063ac:	4604      	mov	r4, r0
 80063ae:	2301      	movs	r3, #1
 80063b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80063b4:	e7f0      	b.n	8006398 <_svfiprintf_r+0x194>
 80063b6:	ab03      	add	r3, sp, #12
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	462a      	mov	r2, r5
 80063bc:	4638      	mov	r0, r7
 80063be:	4b10      	ldr	r3, [pc, #64]	; (8006400 <_svfiprintf_r+0x1fc>)
 80063c0:	a904      	add	r1, sp, #16
 80063c2:	f7fd ffd9 	bl	8004378 <_printf_float>
 80063c6:	1c42      	adds	r2, r0, #1
 80063c8:	4606      	mov	r6, r0
 80063ca:	d1d6      	bne.n	800637a <_svfiprintf_r+0x176>
 80063cc:	89ab      	ldrh	r3, [r5, #12]
 80063ce:	065b      	lsls	r3, r3, #25
 80063d0:	f53f af2c 	bmi.w	800622c <_svfiprintf_r+0x28>
 80063d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063d6:	b01d      	add	sp, #116	; 0x74
 80063d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063dc:	ab03      	add	r3, sp, #12
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	462a      	mov	r2, r5
 80063e2:	4638      	mov	r0, r7
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <_svfiprintf_r+0x1fc>)
 80063e6:	a904      	add	r1, sp, #16
 80063e8:	f7fe fa62 	bl	80048b0 <_printf_i>
 80063ec:	e7eb      	b.n	80063c6 <_svfiprintf_r+0x1c2>
 80063ee:	bf00      	nop
 80063f0:	080079e4 	.word	0x080079e4
 80063f4:	080079ea 	.word	0x080079ea
 80063f8:	080079ee 	.word	0x080079ee
 80063fc:	08004379 	.word	0x08004379
 8006400:	0800614d 	.word	0x0800614d

08006404 <_sbrk_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	2300      	movs	r3, #0
 8006408:	4d05      	ldr	r5, [pc, #20]	; (8006420 <_sbrk_r+0x1c>)
 800640a:	4604      	mov	r4, r0
 800640c:	4608      	mov	r0, r1
 800640e:	602b      	str	r3, [r5, #0]
 8006410:	f7fb fd6c 	bl	8001eec <_sbrk>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_sbrk_r+0x1a>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_sbrk_r+0x1a>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	200004f0 	.word	0x200004f0

08006424 <__assert_func>:
 8006424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006426:	4614      	mov	r4, r2
 8006428:	461a      	mov	r2, r3
 800642a:	4b09      	ldr	r3, [pc, #36]	; (8006450 <__assert_func+0x2c>)
 800642c:	4605      	mov	r5, r0
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68d8      	ldr	r0, [r3, #12]
 8006432:	b14c      	cbz	r4, 8006448 <__assert_func+0x24>
 8006434:	4b07      	ldr	r3, [pc, #28]	; (8006454 <__assert_func+0x30>)
 8006436:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800643a:	9100      	str	r1, [sp, #0]
 800643c:	462b      	mov	r3, r5
 800643e:	4906      	ldr	r1, [pc, #24]	; (8006458 <__assert_func+0x34>)
 8006440:	f000 f80e 	bl	8006460 <fiprintf>
 8006444:	f000 faaa 	bl	800699c <abort>
 8006448:	4b04      	ldr	r3, [pc, #16]	; (800645c <__assert_func+0x38>)
 800644a:	461c      	mov	r4, r3
 800644c:	e7f3      	b.n	8006436 <__assert_func+0x12>
 800644e:	bf00      	nop
 8006450:	20000014 	.word	0x20000014
 8006454:	080079f5 	.word	0x080079f5
 8006458:	08007a02 	.word	0x08007a02
 800645c:	08007a30 	.word	0x08007a30

08006460 <fiprintf>:
 8006460:	b40e      	push	{r1, r2, r3}
 8006462:	b503      	push	{r0, r1, lr}
 8006464:	4601      	mov	r1, r0
 8006466:	ab03      	add	r3, sp, #12
 8006468:	4805      	ldr	r0, [pc, #20]	; (8006480 <fiprintf+0x20>)
 800646a:	f853 2b04 	ldr.w	r2, [r3], #4
 800646e:	6800      	ldr	r0, [r0, #0]
 8006470:	9301      	str	r3, [sp, #4]
 8006472:	f000 f895 	bl	80065a0 <_vfiprintf_r>
 8006476:	b002      	add	sp, #8
 8006478:	f85d eb04 	ldr.w	lr, [sp], #4
 800647c:	b003      	add	sp, #12
 800647e:	4770      	bx	lr
 8006480:	20000014 	.word	0x20000014

08006484 <__ascii_mbtowc>:
 8006484:	b082      	sub	sp, #8
 8006486:	b901      	cbnz	r1, 800648a <__ascii_mbtowc+0x6>
 8006488:	a901      	add	r1, sp, #4
 800648a:	b142      	cbz	r2, 800649e <__ascii_mbtowc+0x1a>
 800648c:	b14b      	cbz	r3, 80064a2 <__ascii_mbtowc+0x1e>
 800648e:	7813      	ldrb	r3, [r2, #0]
 8006490:	600b      	str	r3, [r1, #0]
 8006492:	7812      	ldrb	r2, [r2, #0]
 8006494:	1e10      	subs	r0, r2, #0
 8006496:	bf18      	it	ne
 8006498:	2001      	movne	r0, #1
 800649a:	b002      	add	sp, #8
 800649c:	4770      	bx	lr
 800649e:	4610      	mov	r0, r2
 80064a0:	e7fb      	b.n	800649a <__ascii_mbtowc+0x16>
 80064a2:	f06f 0001 	mvn.w	r0, #1
 80064a6:	e7f8      	b.n	800649a <__ascii_mbtowc+0x16>

080064a8 <memmove>:
 80064a8:	4288      	cmp	r0, r1
 80064aa:	b510      	push	{r4, lr}
 80064ac:	eb01 0402 	add.w	r4, r1, r2
 80064b0:	d902      	bls.n	80064b8 <memmove+0x10>
 80064b2:	4284      	cmp	r4, r0
 80064b4:	4623      	mov	r3, r4
 80064b6:	d807      	bhi.n	80064c8 <memmove+0x20>
 80064b8:	1e43      	subs	r3, r0, #1
 80064ba:	42a1      	cmp	r1, r4
 80064bc:	d008      	beq.n	80064d0 <memmove+0x28>
 80064be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064c6:	e7f8      	b.n	80064ba <memmove+0x12>
 80064c8:	4601      	mov	r1, r0
 80064ca:	4402      	add	r2, r0
 80064cc:	428a      	cmp	r2, r1
 80064ce:	d100      	bne.n	80064d2 <memmove+0x2a>
 80064d0:	bd10      	pop	{r4, pc}
 80064d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064da:	e7f7      	b.n	80064cc <memmove+0x24>

080064dc <__malloc_lock>:
 80064dc:	4801      	ldr	r0, [pc, #4]	; (80064e4 <__malloc_lock+0x8>)
 80064de:	f000 bc19 	b.w	8006d14 <__retarget_lock_acquire_recursive>
 80064e2:	bf00      	nop
 80064e4:	200004f4 	.word	0x200004f4

080064e8 <__malloc_unlock>:
 80064e8:	4801      	ldr	r0, [pc, #4]	; (80064f0 <__malloc_unlock+0x8>)
 80064ea:	f000 bc14 	b.w	8006d16 <__retarget_lock_release_recursive>
 80064ee:	bf00      	nop
 80064f0:	200004f4 	.word	0x200004f4

080064f4 <_realloc_r>:
 80064f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f8:	4680      	mov	r8, r0
 80064fa:	4614      	mov	r4, r2
 80064fc:	460e      	mov	r6, r1
 80064fe:	b921      	cbnz	r1, 800650a <_realloc_r+0x16>
 8006500:	4611      	mov	r1, r2
 8006502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006506:	f7ff bdad 	b.w	8006064 <_malloc_r>
 800650a:	b92a      	cbnz	r2, 8006518 <_realloc_r+0x24>
 800650c:	f7ff fd42 	bl	8005f94 <_free_r>
 8006510:	4625      	mov	r5, r4
 8006512:	4628      	mov	r0, r5
 8006514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006518:	f000 fc64 	bl	8006de4 <_malloc_usable_size_r>
 800651c:	4284      	cmp	r4, r0
 800651e:	4607      	mov	r7, r0
 8006520:	d802      	bhi.n	8006528 <_realloc_r+0x34>
 8006522:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006526:	d812      	bhi.n	800654e <_realloc_r+0x5a>
 8006528:	4621      	mov	r1, r4
 800652a:	4640      	mov	r0, r8
 800652c:	f7ff fd9a 	bl	8006064 <_malloc_r>
 8006530:	4605      	mov	r5, r0
 8006532:	2800      	cmp	r0, #0
 8006534:	d0ed      	beq.n	8006512 <_realloc_r+0x1e>
 8006536:	42bc      	cmp	r4, r7
 8006538:	4622      	mov	r2, r4
 800653a:	4631      	mov	r1, r6
 800653c:	bf28      	it	cs
 800653e:	463a      	movcs	r2, r7
 8006540:	f7fd fe66 	bl	8004210 <memcpy>
 8006544:	4631      	mov	r1, r6
 8006546:	4640      	mov	r0, r8
 8006548:	f7ff fd24 	bl	8005f94 <_free_r>
 800654c:	e7e1      	b.n	8006512 <_realloc_r+0x1e>
 800654e:	4635      	mov	r5, r6
 8006550:	e7df      	b.n	8006512 <_realloc_r+0x1e>

08006552 <__sfputc_r>:
 8006552:	6893      	ldr	r3, [r2, #8]
 8006554:	b410      	push	{r4}
 8006556:	3b01      	subs	r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	6093      	str	r3, [r2, #8]
 800655c:	da07      	bge.n	800656e <__sfputc_r+0x1c>
 800655e:	6994      	ldr	r4, [r2, #24]
 8006560:	42a3      	cmp	r3, r4
 8006562:	db01      	blt.n	8006568 <__sfputc_r+0x16>
 8006564:	290a      	cmp	r1, #10
 8006566:	d102      	bne.n	800656e <__sfputc_r+0x1c>
 8006568:	bc10      	pop	{r4}
 800656a:	f000 b949 	b.w	8006800 <__swbuf_r>
 800656e:	6813      	ldr	r3, [r2, #0]
 8006570:	1c58      	adds	r0, r3, #1
 8006572:	6010      	str	r0, [r2, #0]
 8006574:	7019      	strb	r1, [r3, #0]
 8006576:	4608      	mov	r0, r1
 8006578:	bc10      	pop	{r4}
 800657a:	4770      	bx	lr

0800657c <__sfputs_r>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	4614      	mov	r4, r2
 8006584:	18d5      	adds	r5, r2, r3
 8006586:	42ac      	cmp	r4, r5
 8006588:	d101      	bne.n	800658e <__sfputs_r+0x12>
 800658a:	2000      	movs	r0, #0
 800658c:	e007      	b.n	800659e <__sfputs_r+0x22>
 800658e:	463a      	mov	r2, r7
 8006590:	4630      	mov	r0, r6
 8006592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006596:	f7ff ffdc 	bl	8006552 <__sfputc_r>
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	d1f3      	bne.n	8006586 <__sfputs_r+0xa>
 800659e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065a0 <_vfiprintf_r>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	460d      	mov	r5, r1
 80065a6:	4614      	mov	r4, r2
 80065a8:	4698      	mov	r8, r3
 80065aa:	4606      	mov	r6, r0
 80065ac:	b09d      	sub	sp, #116	; 0x74
 80065ae:	b118      	cbz	r0, 80065b8 <_vfiprintf_r+0x18>
 80065b0:	6983      	ldr	r3, [r0, #24]
 80065b2:	b90b      	cbnz	r3, 80065b8 <_vfiprintf_r+0x18>
 80065b4:	f000 fb10 	bl	8006bd8 <__sinit>
 80065b8:	4b89      	ldr	r3, [pc, #548]	; (80067e0 <_vfiprintf_r+0x240>)
 80065ba:	429d      	cmp	r5, r3
 80065bc:	d11b      	bne.n	80065f6 <_vfiprintf_r+0x56>
 80065be:	6875      	ldr	r5, [r6, #4]
 80065c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065c2:	07d9      	lsls	r1, r3, #31
 80065c4:	d405      	bmi.n	80065d2 <_vfiprintf_r+0x32>
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	059a      	lsls	r2, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_vfiprintf_r+0x32>
 80065cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065ce:	f000 fba1 	bl	8006d14 <__retarget_lock_acquire_recursive>
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	071b      	lsls	r3, r3, #28
 80065d6:	d501      	bpl.n	80065dc <_vfiprintf_r+0x3c>
 80065d8:	692b      	ldr	r3, [r5, #16]
 80065da:	b9eb      	cbnz	r3, 8006618 <_vfiprintf_r+0x78>
 80065dc:	4629      	mov	r1, r5
 80065de:	4630      	mov	r0, r6
 80065e0:	f000 f96e 	bl	80068c0 <__swsetup_r>
 80065e4:	b1c0      	cbz	r0, 8006618 <_vfiprintf_r+0x78>
 80065e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065e8:	07dc      	lsls	r4, r3, #31
 80065ea:	d50e      	bpl.n	800660a <_vfiprintf_r+0x6a>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	b01d      	add	sp, #116	; 0x74
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	4b7b      	ldr	r3, [pc, #492]	; (80067e4 <_vfiprintf_r+0x244>)
 80065f8:	429d      	cmp	r5, r3
 80065fa:	d101      	bne.n	8006600 <_vfiprintf_r+0x60>
 80065fc:	68b5      	ldr	r5, [r6, #8]
 80065fe:	e7df      	b.n	80065c0 <_vfiprintf_r+0x20>
 8006600:	4b79      	ldr	r3, [pc, #484]	; (80067e8 <_vfiprintf_r+0x248>)
 8006602:	429d      	cmp	r5, r3
 8006604:	bf08      	it	eq
 8006606:	68f5      	ldreq	r5, [r6, #12]
 8006608:	e7da      	b.n	80065c0 <_vfiprintf_r+0x20>
 800660a:	89ab      	ldrh	r3, [r5, #12]
 800660c:	0598      	lsls	r0, r3, #22
 800660e:	d4ed      	bmi.n	80065ec <_vfiprintf_r+0x4c>
 8006610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006612:	f000 fb80 	bl	8006d16 <__retarget_lock_release_recursive>
 8006616:	e7e9      	b.n	80065ec <_vfiprintf_r+0x4c>
 8006618:	2300      	movs	r3, #0
 800661a:	9309      	str	r3, [sp, #36]	; 0x24
 800661c:	2320      	movs	r3, #32
 800661e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006622:	2330      	movs	r3, #48	; 0x30
 8006624:	f04f 0901 	mov.w	r9, #1
 8006628:	f8cd 800c 	str.w	r8, [sp, #12]
 800662c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80067ec <_vfiprintf_r+0x24c>
 8006630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006634:	4623      	mov	r3, r4
 8006636:	469a      	mov	sl, r3
 8006638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800663c:	b10a      	cbz	r2, 8006642 <_vfiprintf_r+0xa2>
 800663e:	2a25      	cmp	r2, #37	; 0x25
 8006640:	d1f9      	bne.n	8006636 <_vfiprintf_r+0x96>
 8006642:	ebba 0b04 	subs.w	fp, sl, r4
 8006646:	d00b      	beq.n	8006660 <_vfiprintf_r+0xc0>
 8006648:	465b      	mov	r3, fp
 800664a:	4622      	mov	r2, r4
 800664c:	4629      	mov	r1, r5
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ff94 	bl	800657c <__sfputs_r>
 8006654:	3001      	adds	r0, #1
 8006656:	f000 80aa 	beq.w	80067ae <_vfiprintf_r+0x20e>
 800665a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800665c:	445a      	add	r2, fp
 800665e:	9209      	str	r2, [sp, #36]	; 0x24
 8006660:	f89a 3000 	ldrb.w	r3, [sl]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 80a2 	beq.w	80067ae <_vfiprintf_r+0x20e>
 800666a:	2300      	movs	r3, #0
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006674:	f10a 0a01 	add.w	sl, sl, #1
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006680:	931a      	str	r3, [sp, #104]	; 0x68
 8006682:	4654      	mov	r4, sl
 8006684:	2205      	movs	r2, #5
 8006686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668a:	4858      	ldr	r0, [pc, #352]	; (80067ec <_vfiprintf_r+0x24c>)
 800668c:	f7ff f8de 	bl	800584c <memchr>
 8006690:	9a04      	ldr	r2, [sp, #16]
 8006692:	b9d8      	cbnz	r0, 80066cc <_vfiprintf_r+0x12c>
 8006694:	06d1      	lsls	r1, r2, #27
 8006696:	bf44      	itt	mi
 8006698:	2320      	movmi	r3, #32
 800669a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669e:	0713      	lsls	r3, r2, #28
 80066a0:	bf44      	itt	mi
 80066a2:	232b      	movmi	r3, #43	; 0x2b
 80066a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a8:	f89a 3000 	ldrb.w	r3, [sl]
 80066ac:	2b2a      	cmp	r3, #42	; 0x2a
 80066ae:	d015      	beq.n	80066dc <_vfiprintf_r+0x13c>
 80066b0:	4654      	mov	r4, sl
 80066b2:	2000      	movs	r0, #0
 80066b4:	f04f 0c0a 	mov.w	ip, #10
 80066b8:	9a07      	ldr	r2, [sp, #28]
 80066ba:	4621      	mov	r1, r4
 80066bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c0:	3b30      	subs	r3, #48	; 0x30
 80066c2:	2b09      	cmp	r3, #9
 80066c4:	d94e      	bls.n	8006764 <_vfiprintf_r+0x1c4>
 80066c6:	b1b0      	cbz	r0, 80066f6 <_vfiprintf_r+0x156>
 80066c8:	9207      	str	r2, [sp, #28]
 80066ca:	e014      	b.n	80066f6 <_vfiprintf_r+0x156>
 80066cc:	eba0 0308 	sub.w	r3, r0, r8
 80066d0:	fa09 f303 	lsl.w	r3, r9, r3
 80066d4:	4313      	orrs	r3, r2
 80066d6:	46a2      	mov	sl, r4
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	e7d2      	b.n	8006682 <_vfiprintf_r+0xe2>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	1d19      	adds	r1, r3, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	9103      	str	r1, [sp, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bfbb      	ittet	lt
 80066e8:	425b      	neglt	r3, r3
 80066ea:	f042 0202 	orrlt.w	r2, r2, #2
 80066ee:	9307      	strge	r3, [sp, #28]
 80066f0:	9307      	strlt	r3, [sp, #28]
 80066f2:	bfb8      	it	lt
 80066f4:	9204      	strlt	r2, [sp, #16]
 80066f6:	7823      	ldrb	r3, [r4, #0]
 80066f8:	2b2e      	cmp	r3, #46	; 0x2e
 80066fa:	d10c      	bne.n	8006716 <_vfiprintf_r+0x176>
 80066fc:	7863      	ldrb	r3, [r4, #1]
 80066fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006700:	d135      	bne.n	800676e <_vfiprintf_r+0x1ce>
 8006702:	9b03      	ldr	r3, [sp, #12]
 8006704:	3402      	adds	r4, #2
 8006706:	1d1a      	adds	r2, r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	9203      	str	r2, [sp, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	bfb8      	it	lt
 8006710:	f04f 33ff 	movlt.w	r3, #4294967295
 8006714:	9305      	str	r3, [sp, #20]
 8006716:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80067f0 <_vfiprintf_r+0x250>
 800671a:	2203      	movs	r2, #3
 800671c:	4650      	mov	r0, sl
 800671e:	7821      	ldrb	r1, [r4, #0]
 8006720:	f7ff f894 	bl	800584c <memchr>
 8006724:	b140      	cbz	r0, 8006738 <_vfiprintf_r+0x198>
 8006726:	2340      	movs	r3, #64	; 0x40
 8006728:	eba0 000a 	sub.w	r0, r0, sl
 800672c:	fa03 f000 	lsl.w	r0, r3, r0
 8006730:	9b04      	ldr	r3, [sp, #16]
 8006732:	3401      	adds	r4, #1
 8006734:	4303      	orrs	r3, r0
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673c:	2206      	movs	r2, #6
 800673e:	482d      	ldr	r0, [pc, #180]	; (80067f4 <_vfiprintf_r+0x254>)
 8006740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006744:	f7ff f882 	bl	800584c <memchr>
 8006748:	2800      	cmp	r0, #0
 800674a:	d03f      	beq.n	80067cc <_vfiprintf_r+0x22c>
 800674c:	4b2a      	ldr	r3, [pc, #168]	; (80067f8 <_vfiprintf_r+0x258>)
 800674e:	bb1b      	cbnz	r3, 8006798 <_vfiprintf_r+0x1f8>
 8006750:	9b03      	ldr	r3, [sp, #12]
 8006752:	3307      	adds	r3, #7
 8006754:	f023 0307 	bic.w	r3, r3, #7
 8006758:	3308      	adds	r3, #8
 800675a:	9303      	str	r3, [sp, #12]
 800675c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675e:	443b      	add	r3, r7
 8006760:	9309      	str	r3, [sp, #36]	; 0x24
 8006762:	e767      	b.n	8006634 <_vfiprintf_r+0x94>
 8006764:	460c      	mov	r4, r1
 8006766:	2001      	movs	r0, #1
 8006768:	fb0c 3202 	mla	r2, ip, r2, r3
 800676c:	e7a5      	b.n	80066ba <_vfiprintf_r+0x11a>
 800676e:	2300      	movs	r3, #0
 8006770:	f04f 0c0a 	mov.w	ip, #10
 8006774:	4619      	mov	r1, r3
 8006776:	3401      	adds	r4, #1
 8006778:	9305      	str	r3, [sp, #20]
 800677a:	4620      	mov	r0, r4
 800677c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006780:	3a30      	subs	r2, #48	; 0x30
 8006782:	2a09      	cmp	r2, #9
 8006784:	d903      	bls.n	800678e <_vfiprintf_r+0x1ee>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0c5      	beq.n	8006716 <_vfiprintf_r+0x176>
 800678a:	9105      	str	r1, [sp, #20]
 800678c:	e7c3      	b.n	8006716 <_vfiprintf_r+0x176>
 800678e:	4604      	mov	r4, r0
 8006790:	2301      	movs	r3, #1
 8006792:	fb0c 2101 	mla	r1, ip, r1, r2
 8006796:	e7f0      	b.n	800677a <_vfiprintf_r+0x1da>
 8006798:	ab03      	add	r3, sp, #12
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	462a      	mov	r2, r5
 800679e:	4630      	mov	r0, r6
 80067a0:	4b16      	ldr	r3, [pc, #88]	; (80067fc <_vfiprintf_r+0x25c>)
 80067a2:	a904      	add	r1, sp, #16
 80067a4:	f7fd fde8 	bl	8004378 <_printf_float>
 80067a8:	4607      	mov	r7, r0
 80067aa:	1c78      	adds	r0, r7, #1
 80067ac:	d1d6      	bne.n	800675c <_vfiprintf_r+0x1bc>
 80067ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067b0:	07d9      	lsls	r1, r3, #31
 80067b2:	d405      	bmi.n	80067c0 <_vfiprintf_r+0x220>
 80067b4:	89ab      	ldrh	r3, [r5, #12]
 80067b6:	059a      	lsls	r2, r3, #22
 80067b8:	d402      	bmi.n	80067c0 <_vfiprintf_r+0x220>
 80067ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067bc:	f000 faab 	bl	8006d16 <__retarget_lock_release_recursive>
 80067c0:	89ab      	ldrh	r3, [r5, #12]
 80067c2:	065b      	lsls	r3, r3, #25
 80067c4:	f53f af12 	bmi.w	80065ec <_vfiprintf_r+0x4c>
 80067c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ca:	e711      	b.n	80065f0 <_vfiprintf_r+0x50>
 80067cc:	ab03      	add	r3, sp, #12
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4630      	mov	r0, r6
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <_vfiprintf_r+0x25c>)
 80067d6:	a904      	add	r1, sp, #16
 80067d8:	f7fe f86a 	bl	80048b0 <_printf_i>
 80067dc:	e7e4      	b.n	80067a8 <_vfiprintf_r+0x208>
 80067de:	bf00      	nop
 80067e0:	08007b5c 	.word	0x08007b5c
 80067e4:	08007b7c 	.word	0x08007b7c
 80067e8:	08007b3c 	.word	0x08007b3c
 80067ec:	080079e4 	.word	0x080079e4
 80067f0:	080079ea 	.word	0x080079ea
 80067f4:	080079ee 	.word	0x080079ee
 80067f8:	08004379 	.word	0x08004379
 80067fc:	0800657d 	.word	0x0800657d

08006800 <__swbuf_r>:
 8006800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006802:	460e      	mov	r6, r1
 8006804:	4614      	mov	r4, r2
 8006806:	4605      	mov	r5, r0
 8006808:	b118      	cbz	r0, 8006812 <__swbuf_r+0x12>
 800680a:	6983      	ldr	r3, [r0, #24]
 800680c:	b90b      	cbnz	r3, 8006812 <__swbuf_r+0x12>
 800680e:	f000 f9e3 	bl	8006bd8 <__sinit>
 8006812:	4b21      	ldr	r3, [pc, #132]	; (8006898 <__swbuf_r+0x98>)
 8006814:	429c      	cmp	r4, r3
 8006816:	d12b      	bne.n	8006870 <__swbuf_r+0x70>
 8006818:	686c      	ldr	r4, [r5, #4]
 800681a:	69a3      	ldr	r3, [r4, #24]
 800681c:	60a3      	str	r3, [r4, #8]
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	071a      	lsls	r2, r3, #28
 8006822:	d52f      	bpl.n	8006884 <__swbuf_r+0x84>
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	b36b      	cbz	r3, 8006884 <__swbuf_r+0x84>
 8006828:	6923      	ldr	r3, [r4, #16]
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	b2f6      	uxtb	r6, r6
 800682e:	1ac0      	subs	r0, r0, r3
 8006830:	6963      	ldr	r3, [r4, #20]
 8006832:	4637      	mov	r7, r6
 8006834:	4283      	cmp	r3, r0
 8006836:	dc04      	bgt.n	8006842 <__swbuf_r+0x42>
 8006838:	4621      	mov	r1, r4
 800683a:	4628      	mov	r0, r5
 800683c:	f000 f938 	bl	8006ab0 <_fflush_r>
 8006840:	bb30      	cbnz	r0, 8006890 <__swbuf_r+0x90>
 8006842:	68a3      	ldr	r3, [r4, #8]
 8006844:	3001      	adds	r0, #1
 8006846:	3b01      	subs	r3, #1
 8006848:	60a3      	str	r3, [r4, #8]
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	6022      	str	r2, [r4, #0]
 8006850:	701e      	strb	r6, [r3, #0]
 8006852:	6963      	ldr	r3, [r4, #20]
 8006854:	4283      	cmp	r3, r0
 8006856:	d004      	beq.n	8006862 <__swbuf_r+0x62>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	07db      	lsls	r3, r3, #31
 800685c:	d506      	bpl.n	800686c <__swbuf_r+0x6c>
 800685e:	2e0a      	cmp	r6, #10
 8006860:	d104      	bne.n	800686c <__swbuf_r+0x6c>
 8006862:	4621      	mov	r1, r4
 8006864:	4628      	mov	r0, r5
 8006866:	f000 f923 	bl	8006ab0 <_fflush_r>
 800686a:	b988      	cbnz	r0, 8006890 <__swbuf_r+0x90>
 800686c:	4638      	mov	r0, r7
 800686e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <__swbuf_r+0x9c>)
 8006872:	429c      	cmp	r4, r3
 8006874:	d101      	bne.n	800687a <__swbuf_r+0x7a>
 8006876:	68ac      	ldr	r4, [r5, #8]
 8006878:	e7cf      	b.n	800681a <__swbuf_r+0x1a>
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <__swbuf_r+0xa0>)
 800687c:	429c      	cmp	r4, r3
 800687e:	bf08      	it	eq
 8006880:	68ec      	ldreq	r4, [r5, #12]
 8006882:	e7ca      	b.n	800681a <__swbuf_r+0x1a>
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f000 f81a 	bl	80068c0 <__swsetup_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	d0cb      	beq.n	8006828 <__swbuf_r+0x28>
 8006890:	f04f 37ff 	mov.w	r7, #4294967295
 8006894:	e7ea      	b.n	800686c <__swbuf_r+0x6c>
 8006896:	bf00      	nop
 8006898:	08007b5c 	.word	0x08007b5c
 800689c:	08007b7c 	.word	0x08007b7c
 80068a0:	08007b3c 	.word	0x08007b3c

080068a4 <__ascii_wctomb>:
 80068a4:	4603      	mov	r3, r0
 80068a6:	4608      	mov	r0, r1
 80068a8:	b141      	cbz	r1, 80068bc <__ascii_wctomb+0x18>
 80068aa:	2aff      	cmp	r2, #255	; 0xff
 80068ac:	d904      	bls.n	80068b8 <__ascii_wctomb+0x14>
 80068ae:	228a      	movs	r2, #138	; 0x8a
 80068b0:	f04f 30ff 	mov.w	r0, #4294967295
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	4770      	bx	lr
 80068b8:	2001      	movs	r0, #1
 80068ba:	700a      	strb	r2, [r1, #0]
 80068bc:	4770      	bx	lr
	...

080068c0 <__swsetup_r>:
 80068c0:	4b32      	ldr	r3, [pc, #200]	; (800698c <__swsetup_r+0xcc>)
 80068c2:	b570      	push	{r4, r5, r6, lr}
 80068c4:	681d      	ldr	r5, [r3, #0]
 80068c6:	4606      	mov	r6, r0
 80068c8:	460c      	mov	r4, r1
 80068ca:	b125      	cbz	r5, 80068d6 <__swsetup_r+0x16>
 80068cc:	69ab      	ldr	r3, [r5, #24]
 80068ce:	b913      	cbnz	r3, 80068d6 <__swsetup_r+0x16>
 80068d0:	4628      	mov	r0, r5
 80068d2:	f000 f981 	bl	8006bd8 <__sinit>
 80068d6:	4b2e      	ldr	r3, [pc, #184]	; (8006990 <__swsetup_r+0xd0>)
 80068d8:	429c      	cmp	r4, r3
 80068da:	d10f      	bne.n	80068fc <__swsetup_r+0x3c>
 80068dc:	686c      	ldr	r4, [r5, #4]
 80068de:	89a3      	ldrh	r3, [r4, #12]
 80068e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068e4:	0719      	lsls	r1, r3, #28
 80068e6:	d42c      	bmi.n	8006942 <__swsetup_r+0x82>
 80068e8:	06dd      	lsls	r5, r3, #27
 80068ea:	d411      	bmi.n	8006910 <__swsetup_r+0x50>
 80068ec:	2309      	movs	r3, #9
 80068ee:	6033      	str	r3, [r6, #0]
 80068f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	e03e      	b.n	800697a <__swsetup_r+0xba>
 80068fc:	4b25      	ldr	r3, [pc, #148]	; (8006994 <__swsetup_r+0xd4>)
 80068fe:	429c      	cmp	r4, r3
 8006900:	d101      	bne.n	8006906 <__swsetup_r+0x46>
 8006902:	68ac      	ldr	r4, [r5, #8]
 8006904:	e7eb      	b.n	80068de <__swsetup_r+0x1e>
 8006906:	4b24      	ldr	r3, [pc, #144]	; (8006998 <__swsetup_r+0xd8>)
 8006908:	429c      	cmp	r4, r3
 800690a:	bf08      	it	eq
 800690c:	68ec      	ldreq	r4, [r5, #12]
 800690e:	e7e6      	b.n	80068de <__swsetup_r+0x1e>
 8006910:	0758      	lsls	r0, r3, #29
 8006912:	d512      	bpl.n	800693a <__swsetup_r+0x7a>
 8006914:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006916:	b141      	cbz	r1, 800692a <__swsetup_r+0x6a>
 8006918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800691c:	4299      	cmp	r1, r3
 800691e:	d002      	beq.n	8006926 <__swsetup_r+0x66>
 8006920:	4630      	mov	r0, r6
 8006922:	f7ff fb37 	bl	8005f94 <_free_r>
 8006926:	2300      	movs	r3, #0
 8006928:	6363      	str	r3, [r4, #52]	; 0x34
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	2300      	movs	r3, #0
 8006934:	6063      	str	r3, [r4, #4]
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	f043 0308 	orr.w	r3, r3, #8
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	6923      	ldr	r3, [r4, #16]
 8006944:	b94b      	cbnz	r3, 800695a <__swsetup_r+0x9a>
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800694c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006950:	d003      	beq.n	800695a <__swsetup_r+0x9a>
 8006952:	4621      	mov	r1, r4
 8006954:	4630      	mov	r0, r6
 8006956:	f000 fa05 	bl	8006d64 <__smakebuf_r>
 800695a:	89a0      	ldrh	r0, [r4, #12]
 800695c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006960:	f010 0301 	ands.w	r3, r0, #1
 8006964:	d00a      	beq.n	800697c <__swsetup_r+0xbc>
 8006966:	2300      	movs	r3, #0
 8006968:	60a3      	str	r3, [r4, #8]
 800696a:	6963      	ldr	r3, [r4, #20]
 800696c:	425b      	negs	r3, r3
 800696e:	61a3      	str	r3, [r4, #24]
 8006970:	6923      	ldr	r3, [r4, #16]
 8006972:	b943      	cbnz	r3, 8006986 <__swsetup_r+0xc6>
 8006974:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006978:	d1ba      	bne.n	80068f0 <__swsetup_r+0x30>
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	0781      	lsls	r1, r0, #30
 800697e:	bf58      	it	pl
 8006980:	6963      	ldrpl	r3, [r4, #20]
 8006982:	60a3      	str	r3, [r4, #8]
 8006984:	e7f4      	b.n	8006970 <__swsetup_r+0xb0>
 8006986:	2000      	movs	r0, #0
 8006988:	e7f7      	b.n	800697a <__swsetup_r+0xba>
 800698a:	bf00      	nop
 800698c:	20000014 	.word	0x20000014
 8006990:	08007b5c 	.word	0x08007b5c
 8006994:	08007b7c 	.word	0x08007b7c
 8006998:	08007b3c 	.word	0x08007b3c

0800699c <abort>:
 800699c:	2006      	movs	r0, #6
 800699e:	b508      	push	{r3, lr}
 80069a0:	f000 fa50 	bl	8006e44 <raise>
 80069a4:	2001      	movs	r0, #1
 80069a6:	f7fb fa2d 	bl	8001e04 <_exit>
	...

080069ac <__sflush_r>:
 80069ac:	898a      	ldrh	r2, [r1, #12]
 80069ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b0:	4605      	mov	r5, r0
 80069b2:	0710      	lsls	r0, r2, #28
 80069b4:	460c      	mov	r4, r1
 80069b6:	d457      	bmi.n	8006a68 <__sflush_r+0xbc>
 80069b8:	684b      	ldr	r3, [r1, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	dc04      	bgt.n	80069c8 <__sflush_r+0x1c>
 80069be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	dc01      	bgt.n	80069c8 <__sflush_r+0x1c>
 80069c4:	2000      	movs	r0, #0
 80069c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	d0fa      	beq.n	80069c4 <__sflush_r+0x18>
 80069ce:	2300      	movs	r3, #0
 80069d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069d4:	682f      	ldr	r7, [r5, #0]
 80069d6:	602b      	str	r3, [r5, #0]
 80069d8:	d032      	beq.n	8006a40 <__sflush_r+0x94>
 80069da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	075a      	lsls	r2, r3, #29
 80069e0:	d505      	bpl.n	80069ee <__sflush_r+0x42>
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	1ac0      	subs	r0, r0, r3
 80069e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069e8:	b10b      	cbz	r3, 80069ee <__sflush_r+0x42>
 80069ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069ec:	1ac0      	subs	r0, r0, r3
 80069ee:	2300      	movs	r3, #0
 80069f0:	4602      	mov	r2, r0
 80069f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069f4:	4628      	mov	r0, r5
 80069f6:	6a21      	ldr	r1, [r4, #32]
 80069f8:	47b0      	blx	r6
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	d106      	bne.n	8006a0e <__sflush_r+0x62>
 8006a00:	6829      	ldr	r1, [r5, #0]
 8006a02:	291d      	cmp	r1, #29
 8006a04:	d82c      	bhi.n	8006a60 <__sflush_r+0xb4>
 8006a06:	4a29      	ldr	r2, [pc, #164]	; (8006aac <__sflush_r+0x100>)
 8006a08:	40ca      	lsrs	r2, r1
 8006a0a:	07d6      	lsls	r6, r2, #31
 8006a0c:	d528      	bpl.n	8006a60 <__sflush_r+0xb4>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	6062      	str	r2, [r4, #4]
 8006a12:	6922      	ldr	r2, [r4, #16]
 8006a14:	04d9      	lsls	r1, r3, #19
 8006a16:	6022      	str	r2, [r4, #0]
 8006a18:	d504      	bpl.n	8006a24 <__sflush_r+0x78>
 8006a1a:	1c42      	adds	r2, r0, #1
 8006a1c:	d101      	bne.n	8006a22 <__sflush_r+0x76>
 8006a1e:	682b      	ldr	r3, [r5, #0]
 8006a20:	b903      	cbnz	r3, 8006a24 <__sflush_r+0x78>
 8006a22:	6560      	str	r0, [r4, #84]	; 0x54
 8006a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a26:	602f      	str	r7, [r5, #0]
 8006a28:	2900      	cmp	r1, #0
 8006a2a:	d0cb      	beq.n	80069c4 <__sflush_r+0x18>
 8006a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a30:	4299      	cmp	r1, r3
 8006a32:	d002      	beq.n	8006a3a <__sflush_r+0x8e>
 8006a34:	4628      	mov	r0, r5
 8006a36:	f7ff faad 	bl	8005f94 <_free_r>
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8006a3e:	e7c2      	b.n	80069c6 <__sflush_r+0x1a>
 8006a40:	6a21      	ldr	r1, [r4, #32]
 8006a42:	2301      	movs	r3, #1
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b0      	blx	r6
 8006a48:	1c41      	adds	r1, r0, #1
 8006a4a:	d1c7      	bne.n	80069dc <__sflush_r+0x30>
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0c4      	beq.n	80069dc <__sflush_r+0x30>
 8006a52:	2b1d      	cmp	r3, #29
 8006a54:	d001      	beq.n	8006a5a <__sflush_r+0xae>
 8006a56:	2b16      	cmp	r3, #22
 8006a58:	d101      	bne.n	8006a5e <__sflush_r+0xb2>
 8006a5a:	602f      	str	r7, [r5, #0]
 8006a5c:	e7b2      	b.n	80069c4 <__sflush_r+0x18>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a64:	81a3      	strh	r3, [r4, #12]
 8006a66:	e7ae      	b.n	80069c6 <__sflush_r+0x1a>
 8006a68:	690f      	ldr	r7, [r1, #16]
 8006a6a:	2f00      	cmp	r7, #0
 8006a6c:	d0aa      	beq.n	80069c4 <__sflush_r+0x18>
 8006a6e:	0793      	lsls	r3, r2, #30
 8006a70:	bf18      	it	ne
 8006a72:	2300      	movne	r3, #0
 8006a74:	680e      	ldr	r6, [r1, #0]
 8006a76:	bf08      	it	eq
 8006a78:	694b      	ldreq	r3, [r1, #20]
 8006a7a:	1bf6      	subs	r6, r6, r7
 8006a7c:	600f      	str	r7, [r1, #0]
 8006a7e:	608b      	str	r3, [r1, #8]
 8006a80:	2e00      	cmp	r6, #0
 8006a82:	dd9f      	ble.n	80069c4 <__sflush_r+0x18>
 8006a84:	4633      	mov	r3, r6
 8006a86:	463a      	mov	r2, r7
 8006a88:	4628      	mov	r0, r5
 8006a8a:	6a21      	ldr	r1, [r4, #32]
 8006a8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006a90:	47e0      	blx	ip
 8006a92:	2800      	cmp	r0, #0
 8006a94:	dc06      	bgt.n	8006aa4 <__sflush_r+0xf8>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	e790      	b.n	80069c6 <__sflush_r+0x1a>
 8006aa4:	4407      	add	r7, r0
 8006aa6:	1a36      	subs	r6, r6, r0
 8006aa8:	e7ea      	b.n	8006a80 <__sflush_r+0xd4>
 8006aaa:	bf00      	nop
 8006aac:	20400001 	.word	0x20400001

08006ab0 <_fflush_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	690b      	ldr	r3, [r1, #16]
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	b913      	cbnz	r3, 8006ac0 <_fflush_r+0x10>
 8006aba:	2500      	movs	r5, #0
 8006abc:	4628      	mov	r0, r5
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	b118      	cbz	r0, 8006aca <_fflush_r+0x1a>
 8006ac2:	6983      	ldr	r3, [r0, #24]
 8006ac4:	b90b      	cbnz	r3, 8006aca <_fflush_r+0x1a>
 8006ac6:	f000 f887 	bl	8006bd8 <__sinit>
 8006aca:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <_fflush_r+0x6c>)
 8006acc:	429c      	cmp	r4, r3
 8006ace:	d11b      	bne.n	8006b08 <_fflush_r+0x58>
 8006ad0:	686c      	ldr	r4, [r5, #4]
 8006ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0ef      	beq.n	8006aba <_fflush_r+0xa>
 8006ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006adc:	07d0      	lsls	r0, r2, #31
 8006ade:	d404      	bmi.n	8006aea <_fflush_r+0x3a>
 8006ae0:	0599      	lsls	r1, r3, #22
 8006ae2:	d402      	bmi.n	8006aea <_fflush_r+0x3a>
 8006ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae6:	f000 f915 	bl	8006d14 <__retarget_lock_acquire_recursive>
 8006aea:	4628      	mov	r0, r5
 8006aec:	4621      	mov	r1, r4
 8006aee:	f7ff ff5d 	bl	80069ac <__sflush_r>
 8006af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af4:	4605      	mov	r5, r0
 8006af6:	07da      	lsls	r2, r3, #31
 8006af8:	d4e0      	bmi.n	8006abc <_fflush_r+0xc>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	059b      	lsls	r3, r3, #22
 8006afe:	d4dd      	bmi.n	8006abc <_fflush_r+0xc>
 8006b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b02:	f000 f908 	bl	8006d16 <__retarget_lock_release_recursive>
 8006b06:	e7d9      	b.n	8006abc <_fflush_r+0xc>
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <_fflush_r+0x70>)
 8006b0a:	429c      	cmp	r4, r3
 8006b0c:	d101      	bne.n	8006b12 <_fflush_r+0x62>
 8006b0e:	68ac      	ldr	r4, [r5, #8]
 8006b10:	e7df      	b.n	8006ad2 <_fflush_r+0x22>
 8006b12:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <_fflush_r+0x74>)
 8006b14:	429c      	cmp	r4, r3
 8006b16:	bf08      	it	eq
 8006b18:	68ec      	ldreq	r4, [r5, #12]
 8006b1a:	e7da      	b.n	8006ad2 <_fflush_r+0x22>
 8006b1c:	08007b5c 	.word	0x08007b5c
 8006b20:	08007b7c 	.word	0x08007b7c
 8006b24:	08007b3c 	.word	0x08007b3c

08006b28 <std>:
 8006b28:	2300      	movs	r3, #0
 8006b2a:	b510      	push	{r4, lr}
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b36:	6083      	str	r3, [r0, #8]
 8006b38:	8181      	strh	r1, [r0, #12]
 8006b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b3c:	81c2      	strh	r2, [r0, #14]
 8006b3e:	6183      	str	r3, [r0, #24]
 8006b40:	4619      	mov	r1, r3
 8006b42:	2208      	movs	r2, #8
 8006b44:	305c      	adds	r0, #92	; 0x5c
 8006b46:	f7fd fb71 	bl	800422c <memset>
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <std+0x38>)
 8006b4c:	6224      	str	r4, [r4, #32]
 8006b4e:	6263      	str	r3, [r4, #36]	; 0x24
 8006b50:	4b04      	ldr	r3, [pc, #16]	; (8006b64 <std+0x3c>)
 8006b52:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b54:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <std+0x40>)
 8006b56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b58:	4b04      	ldr	r3, [pc, #16]	; (8006b6c <std+0x44>)
 8006b5a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b5c:	bd10      	pop	{r4, pc}
 8006b5e:	bf00      	nop
 8006b60:	08006e7d 	.word	0x08006e7d
 8006b64:	08006e9f 	.word	0x08006e9f
 8006b68:	08006ed7 	.word	0x08006ed7
 8006b6c:	08006efb 	.word	0x08006efb

08006b70 <_cleanup_r>:
 8006b70:	4901      	ldr	r1, [pc, #4]	; (8006b78 <_cleanup_r+0x8>)
 8006b72:	f000 b8af 	b.w	8006cd4 <_fwalk_reent>
 8006b76:	bf00      	nop
 8006b78:	08006ab1 	.word	0x08006ab1

08006b7c <__sfmoreglue>:
 8006b7c:	2268      	movs	r2, #104	; 0x68
 8006b7e:	b570      	push	{r4, r5, r6, lr}
 8006b80:	1e4d      	subs	r5, r1, #1
 8006b82:	4355      	muls	r5, r2
 8006b84:	460e      	mov	r6, r1
 8006b86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b8a:	f7ff fa6b 	bl	8006064 <_malloc_r>
 8006b8e:	4604      	mov	r4, r0
 8006b90:	b140      	cbz	r0, 8006ba4 <__sfmoreglue+0x28>
 8006b92:	2100      	movs	r1, #0
 8006b94:	e9c0 1600 	strd	r1, r6, [r0]
 8006b98:	300c      	adds	r0, #12
 8006b9a:	60a0      	str	r0, [r4, #8]
 8006b9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ba0:	f7fd fb44 	bl	800422c <memset>
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	bd70      	pop	{r4, r5, r6, pc}

08006ba8 <__sfp_lock_acquire>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__sfp_lock_acquire+0x8>)
 8006baa:	f000 b8b3 	b.w	8006d14 <__retarget_lock_acquire_recursive>
 8006bae:	bf00      	nop
 8006bb0:	200004f5 	.word	0x200004f5

08006bb4 <__sfp_lock_release>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__sfp_lock_release+0x8>)
 8006bb6:	f000 b8ae 	b.w	8006d16 <__retarget_lock_release_recursive>
 8006bba:	bf00      	nop
 8006bbc:	200004f5 	.word	0x200004f5

08006bc0 <__sinit_lock_acquire>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <__sinit_lock_acquire+0x8>)
 8006bc2:	f000 b8a7 	b.w	8006d14 <__retarget_lock_acquire_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	200004f6 	.word	0x200004f6

08006bcc <__sinit_lock_release>:
 8006bcc:	4801      	ldr	r0, [pc, #4]	; (8006bd4 <__sinit_lock_release+0x8>)
 8006bce:	f000 b8a2 	b.w	8006d16 <__retarget_lock_release_recursive>
 8006bd2:	bf00      	nop
 8006bd4:	200004f6 	.word	0x200004f6

08006bd8 <__sinit>:
 8006bd8:	b510      	push	{r4, lr}
 8006bda:	4604      	mov	r4, r0
 8006bdc:	f7ff fff0 	bl	8006bc0 <__sinit_lock_acquire>
 8006be0:	69a3      	ldr	r3, [r4, #24]
 8006be2:	b11b      	cbz	r3, 8006bec <__sinit+0x14>
 8006be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be8:	f7ff bff0 	b.w	8006bcc <__sinit_lock_release>
 8006bec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bf0:	6523      	str	r3, [r4, #80]	; 0x50
 8006bf2:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <__sinit+0x68>)
 8006bf4:	4a13      	ldr	r2, [pc, #76]	; (8006c44 <__sinit+0x6c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bfa:	42a3      	cmp	r3, r4
 8006bfc:	bf08      	it	eq
 8006bfe:	2301      	moveq	r3, #1
 8006c00:	4620      	mov	r0, r4
 8006c02:	bf08      	it	eq
 8006c04:	61a3      	streq	r3, [r4, #24]
 8006c06:	f000 f81f 	bl	8006c48 <__sfp>
 8006c0a:	6060      	str	r0, [r4, #4]
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 f81b 	bl	8006c48 <__sfp>
 8006c12:	60a0      	str	r0, [r4, #8]
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 f817 	bl	8006c48 <__sfp>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2104      	movs	r1, #4
 8006c1e:	60e0      	str	r0, [r4, #12]
 8006c20:	6860      	ldr	r0, [r4, #4]
 8006c22:	f7ff ff81 	bl	8006b28 <std>
 8006c26:	2201      	movs	r2, #1
 8006c28:	2109      	movs	r1, #9
 8006c2a:	68a0      	ldr	r0, [r4, #8]
 8006c2c:	f7ff ff7c 	bl	8006b28 <std>
 8006c30:	2202      	movs	r2, #2
 8006c32:	2112      	movs	r1, #18
 8006c34:	68e0      	ldr	r0, [r4, #12]
 8006c36:	f7ff ff77 	bl	8006b28 <std>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	61a3      	str	r3, [r4, #24]
 8006c3e:	e7d1      	b.n	8006be4 <__sinit+0xc>
 8006c40:	080077c4 	.word	0x080077c4
 8006c44:	08006b71 	.word	0x08006b71

08006c48 <__sfp>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	f7ff ffac 	bl	8006ba8 <__sfp_lock_acquire>
 8006c50:	4b1e      	ldr	r3, [pc, #120]	; (8006ccc <__sfp+0x84>)
 8006c52:	681e      	ldr	r6, [r3, #0]
 8006c54:	69b3      	ldr	r3, [r6, #24]
 8006c56:	b913      	cbnz	r3, 8006c5e <__sfp+0x16>
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f7ff ffbd 	bl	8006bd8 <__sinit>
 8006c5e:	3648      	adds	r6, #72	; 0x48
 8006c60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	d503      	bpl.n	8006c70 <__sfp+0x28>
 8006c68:	6833      	ldr	r3, [r6, #0]
 8006c6a:	b30b      	cbz	r3, 8006cb0 <__sfp+0x68>
 8006c6c:	6836      	ldr	r6, [r6, #0]
 8006c6e:	e7f7      	b.n	8006c60 <__sfp+0x18>
 8006c70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c74:	b9d5      	cbnz	r5, 8006cac <__sfp+0x64>
 8006c76:	4b16      	ldr	r3, [pc, #88]	; (8006cd0 <__sfp+0x88>)
 8006c78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c7c:	60e3      	str	r3, [r4, #12]
 8006c7e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c80:	f000 f847 	bl	8006d12 <__retarget_lock_init_recursive>
 8006c84:	f7ff ff96 	bl	8006bb4 <__sfp_lock_release>
 8006c88:	2208      	movs	r2, #8
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c94:	6025      	str	r5, [r4, #0]
 8006c96:	61a5      	str	r5, [r4, #24]
 8006c98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c9c:	f7fd fac6 	bl	800422c <memset>
 8006ca0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ca4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ca8:	4620      	mov	r0, r4
 8006caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cac:	3468      	adds	r4, #104	; 0x68
 8006cae:	e7d9      	b.n	8006c64 <__sfp+0x1c>
 8006cb0:	2104      	movs	r1, #4
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	f7ff ff62 	bl	8006b7c <__sfmoreglue>
 8006cb8:	4604      	mov	r4, r0
 8006cba:	6030      	str	r0, [r6, #0]
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d1d5      	bne.n	8006c6c <__sfp+0x24>
 8006cc0:	f7ff ff78 	bl	8006bb4 <__sfp_lock_release>
 8006cc4:	230c      	movs	r3, #12
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	e7ee      	b.n	8006ca8 <__sfp+0x60>
 8006cca:	bf00      	nop
 8006ccc:	080077c4 	.word	0x080077c4
 8006cd0:	ffff0001 	.word	0xffff0001

08006cd4 <_fwalk_reent>:
 8006cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cd8:	4606      	mov	r6, r0
 8006cda:	4688      	mov	r8, r1
 8006cdc:	2700      	movs	r7, #0
 8006cde:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ce2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ce6:	f1b9 0901 	subs.w	r9, r9, #1
 8006cea:	d505      	bpl.n	8006cf8 <_fwalk_reent+0x24>
 8006cec:	6824      	ldr	r4, [r4, #0]
 8006cee:	2c00      	cmp	r4, #0
 8006cf0:	d1f7      	bne.n	8006ce2 <_fwalk_reent+0xe>
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cf8:	89ab      	ldrh	r3, [r5, #12]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d907      	bls.n	8006d0e <_fwalk_reent+0x3a>
 8006cfe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d02:	3301      	adds	r3, #1
 8006d04:	d003      	beq.n	8006d0e <_fwalk_reent+0x3a>
 8006d06:	4629      	mov	r1, r5
 8006d08:	4630      	mov	r0, r6
 8006d0a:	47c0      	blx	r8
 8006d0c:	4307      	orrs	r7, r0
 8006d0e:	3568      	adds	r5, #104	; 0x68
 8006d10:	e7e9      	b.n	8006ce6 <_fwalk_reent+0x12>

08006d12 <__retarget_lock_init_recursive>:
 8006d12:	4770      	bx	lr

08006d14 <__retarget_lock_acquire_recursive>:
 8006d14:	4770      	bx	lr

08006d16 <__retarget_lock_release_recursive>:
 8006d16:	4770      	bx	lr

08006d18 <__swhatbuf_r>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	460e      	mov	r6, r1
 8006d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d20:	4614      	mov	r4, r2
 8006d22:	2900      	cmp	r1, #0
 8006d24:	461d      	mov	r5, r3
 8006d26:	b096      	sub	sp, #88	; 0x58
 8006d28:	da08      	bge.n	8006d3c <__swhatbuf_r+0x24>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d30:	602a      	str	r2, [r5, #0]
 8006d32:	061a      	lsls	r2, r3, #24
 8006d34:	d410      	bmi.n	8006d58 <__swhatbuf_r+0x40>
 8006d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d3a:	e00e      	b.n	8006d5a <__swhatbuf_r+0x42>
 8006d3c:	466a      	mov	r2, sp
 8006d3e:	f000 f903 	bl	8006f48 <_fstat_r>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	dbf1      	blt.n	8006d2a <__swhatbuf_r+0x12>
 8006d46:	9a01      	ldr	r2, [sp, #4]
 8006d48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d50:	425a      	negs	r2, r3
 8006d52:	415a      	adcs	r2, r3
 8006d54:	602a      	str	r2, [r5, #0]
 8006d56:	e7ee      	b.n	8006d36 <__swhatbuf_r+0x1e>
 8006d58:	2340      	movs	r3, #64	; 0x40
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	b016      	add	sp, #88	; 0x58
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d64 <__smakebuf_r>:
 8006d64:	898b      	ldrh	r3, [r1, #12]
 8006d66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d68:	079d      	lsls	r5, r3, #30
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	d507      	bpl.n	8006d80 <__smakebuf_r+0x1c>
 8006d70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	6123      	str	r3, [r4, #16]
 8006d78:	2301      	movs	r3, #1
 8006d7a:	6163      	str	r3, [r4, #20]
 8006d7c:	b002      	add	sp, #8
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	466a      	mov	r2, sp
 8006d82:	ab01      	add	r3, sp, #4
 8006d84:	f7ff ffc8 	bl	8006d18 <__swhatbuf_r>
 8006d88:	9900      	ldr	r1, [sp, #0]
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f7ff f969 	bl	8006064 <_malloc_r>
 8006d92:	b948      	cbnz	r0, 8006da8 <__smakebuf_r+0x44>
 8006d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d98:	059a      	lsls	r2, r3, #22
 8006d9a:	d4ef      	bmi.n	8006d7c <__smakebuf_r+0x18>
 8006d9c:	f023 0303 	bic.w	r3, r3, #3
 8006da0:	f043 0302 	orr.w	r3, r3, #2
 8006da4:	81a3      	strh	r3, [r4, #12]
 8006da6:	e7e3      	b.n	8006d70 <__smakebuf_r+0xc>
 8006da8:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <__smakebuf_r+0x7c>)
 8006daa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	6020      	str	r0, [r4, #0]
 8006db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db4:	81a3      	strh	r3, [r4, #12]
 8006db6:	9b00      	ldr	r3, [sp, #0]
 8006db8:	6120      	str	r0, [r4, #16]
 8006dba:	6163      	str	r3, [r4, #20]
 8006dbc:	9b01      	ldr	r3, [sp, #4]
 8006dbe:	b15b      	cbz	r3, 8006dd8 <__smakebuf_r+0x74>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc6:	f000 f8d1 	bl	8006f6c <_isatty_r>
 8006dca:	b128      	cbz	r0, 8006dd8 <__smakebuf_r+0x74>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	f043 0301 	orr.w	r3, r3, #1
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	89a0      	ldrh	r0, [r4, #12]
 8006dda:	4305      	orrs	r5, r0
 8006ddc:	81a5      	strh	r5, [r4, #12]
 8006dde:	e7cd      	b.n	8006d7c <__smakebuf_r+0x18>
 8006de0:	08006b71 	.word	0x08006b71

08006de4 <_malloc_usable_size_r>:
 8006de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de8:	1f18      	subs	r0, r3, #4
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bfbc      	itt	lt
 8006dee:	580b      	ldrlt	r3, [r1, r0]
 8006df0:	18c0      	addlt	r0, r0, r3
 8006df2:	4770      	bx	lr

08006df4 <_raise_r>:
 8006df4:	291f      	cmp	r1, #31
 8006df6:	b538      	push	{r3, r4, r5, lr}
 8006df8:	4604      	mov	r4, r0
 8006dfa:	460d      	mov	r5, r1
 8006dfc:	d904      	bls.n	8006e08 <_raise_r+0x14>
 8006dfe:	2316      	movs	r3, #22
 8006e00:	6003      	str	r3, [r0, #0]
 8006e02:	f04f 30ff 	mov.w	r0, #4294967295
 8006e06:	bd38      	pop	{r3, r4, r5, pc}
 8006e08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e0a:	b112      	cbz	r2, 8006e12 <_raise_r+0x1e>
 8006e0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e10:	b94b      	cbnz	r3, 8006e26 <_raise_r+0x32>
 8006e12:	4620      	mov	r0, r4
 8006e14:	f000 f830 	bl	8006e78 <_getpid_r>
 8006e18:	462a      	mov	r2, r5
 8006e1a:	4601      	mov	r1, r0
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e22:	f000 b817 	b.w	8006e54 <_kill_r>
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d00a      	beq.n	8006e40 <_raise_r+0x4c>
 8006e2a:	1c59      	adds	r1, r3, #1
 8006e2c:	d103      	bne.n	8006e36 <_raise_r+0x42>
 8006e2e:	2316      	movs	r3, #22
 8006e30:	6003      	str	r3, [r0, #0]
 8006e32:	2001      	movs	r0, #1
 8006e34:	e7e7      	b.n	8006e06 <_raise_r+0x12>
 8006e36:	2400      	movs	r4, #0
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e3e:	4798      	blx	r3
 8006e40:	2000      	movs	r0, #0
 8006e42:	e7e0      	b.n	8006e06 <_raise_r+0x12>

08006e44 <raise>:
 8006e44:	4b02      	ldr	r3, [pc, #8]	; (8006e50 <raise+0xc>)
 8006e46:	4601      	mov	r1, r0
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f7ff bfd3 	b.w	8006df4 <_raise_r>
 8006e4e:	bf00      	nop
 8006e50:	20000014 	.word	0x20000014

08006e54 <_kill_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	2300      	movs	r3, #0
 8006e58:	4d06      	ldr	r5, [pc, #24]	; (8006e74 <_kill_r+0x20>)
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	4611      	mov	r1, r2
 8006e60:	602b      	str	r3, [r5, #0]
 8006e62:	f7fa ffbf 	bl	8001de4 <_kill>
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	d102      	bne.n	8006e70 <_kill_r+0x1c>
 8006e6a:	682b      	ldr	r3, [r5, #0]
 8006e6c:	b103      	cbz	r3, 8006e70 <_kill_r+0x1c>
 8006e6e:	6023      	str	r3, [r4, #0]
 8006e70:	bd38      	pop	{r3, r4, r5, pc}
 8006e72:	bf00      	nop
 8006e74:	200004f0 	.word	0x200004f0

08006e78 <_getpid_r>:
 8006e78:	f7fa bfad 	b.w	8001dd6 <_getpid>

08006e7c <__sread>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	460c      	mov	r4, r1
 8006e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e84:	f000 f894 	bl	8006fb0 <_read_r>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	bfab      	itete	ge
 8006e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e90:	181b      	addge	r3, r3, r0
 8006e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e96:	bfac      	ite	ge
 8006e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e9a:	81a3      	strhlt	r3, [r4, #12]
 8006e9c:	bd10      	pop	{r4, pc}

08006e9e <__swrite>:
 8006e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea2:	461f      	mov	r7, r3
 8006ea4:	898b      	ldrh	r3, [r1, #12]
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	05db      	lsls	r3, r3, #23
 8006eaa:	460c      	mov	r4, r1
 8006eac:	4616      	mov	r6, r2
 8006eae:	d505      	bpl.n	8006ebc <__swrite+0x1e>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb8:	f000 f868 	bl	8006f8c <_lseek_r>
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	4632      	mov	r2, r6
 8006ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	463b      	mov	r3, r7
 8006eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed2:	f000 b817 	b.w	8006f04 <_write_r>

08006ed6 <__sseek>:
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	460c      	mov	r4, r1
 8006eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ede:	f000 f855 	bl	8006f8c <_lseek_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	bf15      	itete	ne
 8006ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ef2:	81a3      	strheq	r3, [r4, #12]
 8006ef4:	bf18      	it	ne
 8006ef6:	81a3      	strhne	r3, [r4, #12]
 8006ef8:	bd10      	pop	{r4, pc}

08006efa <__sclose>:
 8006efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efe:	f000 b813 	b.w	8006f28 <_close_r>
	...

08006f04 <_write_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4d05      	ldr	r5, [pc, #20]	; (8006f24 <_write_r+0x20>)
 8006f10:	602a      	str	r2, [r5, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f7fa ff9d 	bl	8001e52 <_write>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_write_r+0x1e>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_write_r+0x1e>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	200004f0 	.word	0x200004f0

08006f28 <_close_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	4d05      	ldr	r5, [pc, #20]	; (8006f44 <_close_r+0x1c>)
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	f7fa ffa9 	bl	8001e8a <_close>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_close_r+0x1a>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_close_r+0x1a>
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	200004f0 	.word	0x200004f0

08006f48 <_fstat_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4d06      	ldr	r5, [pc, #24]	; (8006f68 <_fstat_r+0x20>)
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	4611      	mov	r1, r2
 8006f54:	602b      	str	r3, [r5, #0]
 8006f56:	f7fa ffa3 	bl	8001ea0 <_fstat>
 8006f5a:	1c43      	adds	r3, r0, #1
 8006f5c:	d102      	bne.n	8006f64 <_fstat_r+0x1c>
 8006f5e:	682b      	ldr	r3, [r5, #0]
 8006f60:	b103      	cbz	r3, 8006f64 <_fstat_r+0x1c>
 8006f62:	6023      	str	r3, [r4, #0]
 8006f64:	bd38      	pop	{r3, r4, r5, pc}
 8006f66:	bf00      	nop
 8006f68:	200004f0 	.word	0x200004f0

08006f6c <_isatty_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	2300      	movs	r3, #0
 8006f70:	4d05      	ldr	r5, [pc, #20]	; (8006f88 <_isatty_r+0x1c>)
 8006f72:	4604      	mov	r4, r0
 8006f74:	4608      	mov	r0, r1
 8006f76:	602b      	str	r3, [r5, #0]
 8006f78:	f7fa ffa1 	bl	8001ebe <_isatty>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_isatty_r+0x1a>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_isatty_r+0x1a>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	200004f0 	.word	0x200004f0

08006f8c <_lseek_r>:
 8006f8c:	b538      	push	{r3, r4, r5, lr}
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4608      	mov	r0, r1
 8006f92:	4611      	mov	r1, r2
 8006f94:	2200      	movs	r2, #0
 8006f96:	4d05      	ldr	r5, [pc, #20]	; (8006fac <_lseek_r+0x20>)
 8006f98:	602a      	str	r2, [r5, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f7fa ff99 	bl	8001ed2 <_lseek>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d102      	bne.n	8006faa <_lseek_r+0x1e>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	b103      	cbz	r3, 8006faa <_lseek_r+0x1e>
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	200004f0 	.word	0x200004f0

08006fb0 <_read_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4d05      	ldr	r5, [pc, #20]	; (8006fd0 <_read_r+0x20>)
 8006fbc:	602a      	str	r2, [r5, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f7fa ff2a 	bl	8001e18 <_read>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d102      	bne.n	8006fce <_read_r+0x1e>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	b103      	cbz	r3, 8006fce <_read_r+0x1e>
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	200004f0 	.word	0x200004f0

08006fd4 <_init>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	bf00      	nop
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr

08006fe0 <_fini>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	bf00      	nop
 8006fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe6:	bc08      	pop	{r3}
 8006fe8:	469e      	mov	lr, r3
 8006fea:	4770      	bx	lr
